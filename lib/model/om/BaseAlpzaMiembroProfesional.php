<?php

/**
 * Base class that represents a row from the 'alpza_miembro_profesional' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Sat Nov 24 15:15:37 2012
 *
 * @package    lib.model.om
 */
abstract class BaseAlpzaMiembroProfesional extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        AlpzaMiembroProfesionalPeer
	 */
	protected static $peer;

	/**
	 * The value for the id_alpza_miembro_profesional field.
	 * @var        int
	 */
	protected $id_alpza_miembro_profesional;

	/**
	 * The value for the alpza_miembro_id_alpza_miembro field.
	 * @var        int
	 */
	protected $alpza_miembro_id_alpza_miembro;

	/**
	 * The value for the nombre_formal field.
	 * @var        string
	 */
	protected $nombre_formal;

	/**
	 * The value for the sigla field.
	 * @var        string
	 */
	protected $sigla;

	/**
	 * The value for the numero_identificacion field.
	 * @var        string
	 */
	protected $numero_identificacion;

	/**
	 * The value for the ano_ingreso_alpza field.
	 * @var        string
	 */
	protected $ano_ingreso_alpza;

	/**
	 * The value for the nombre field.
	 * @var        string
	 */
	protected $nombre;

	/**
	 * The value for the apellido field.
	 * @var        string
	 */
	protected $apellido;

	/**
	 * The value for the profesion field.
	 * @var        string
	 */
	protected $profesion;

	/**
	 * The value for the trabajo field.
	 * @var        string
	 */
	protected $trabajo;

	/**
	 * The value for the cargo field.
	 * @var        string
	 */
	protected $cargo;

	/**
	 * The value for the otra_asociacion field.
	 * @var        string
	 */
	protected $otra_asociacion;

	/**
	 * The value for the direccion field.
	 * @var        string
	 */
	protected $direccion;

	/**
	 * The value for the codigo_postal field.
	 * @var        string
	 */
	protected $codigo_postal;

	/**
	 * The value for the pais field.
	 * @var        string
	 */
	protected $pais;

	/**
	 * The value for the telefono_cod_ciudad field.
	 * @var        string
	 */
	protected $telefono_cod_ciudad;

	/**
	 * The value for the telefono_cod_pais field.
	 * @var        string
	 */
	protected $telefono_cod_pais;

	/**
	 * The value for the telefono field.
	 * @var        string
	 */
	protected $telefono;

	/**
	 * The value for the celular field.
	 * @var        string
	 */
	protected $celular;

	/**
	 * The value for the fax field.
	 * @var        string
	 */
	protected $fax;

	/**
	 * The value for the email field.
	 * @var        string
	 */
	protected $email;

	/**
	 * The value for the sitio_web field.
	 * @var        string
	 */
	protected $sitio_web;

	/**
	 * The value for the intereses_principales field.
	 * @var        string
	 */
	protected $intereses_principales;

	/**
	 * The value for the area_tematica_interes field.
	 * @var        string
	 */
	protected $area_tematica_interes;

	/**
	 * The value for the area_experiencia field.
	 * @var        string
	 */
	protected $area_experiencia;

	/**
	 * The value for the proyecto field.
	 * @var        string
	 */
	protected $proyecto;

	/**
	 * The value for the publicacion field.
	 * @var        string
	 */
	protected $publicacion;

	/**
	 * @var        AlpzaMiembro
	 */
	protected $aAlpzaMiembro;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior

	const PEER = 'AlpzaMiembroProfesionalPeer';

	/**
	 * Get the [id_alpza_miembro_profesional] column value.
	 *
	 * @return     int
	 */
	public function getIdAlpzaMiembroProfesional()
	{
		return $this->id_alpza_miembro_profesional;
	}

	/**
	 * Get the [alpza_miembro_id_alpza_miembro] column value.
	 *
	 * @return     int
	 */
	public function getAlpzaMiembroIdAlpzaMiembro()
	{
		return $this->alpza_miembro_id_alpza_miembro;
	}

	/**
	 * Get the [nombre_formal] column value.
	 *
	 * @return     string
	 */
	public function getNombreFormal()
	{
		return $this->nombre_formal;
	}

	/**
	 * Get the [sigla] column value.
	 *
	 * @return     string
	 */
	public function getSigla()
	{
		return $this->sigla;
	}

	/**
	 * Get the [optionally formatted] temporal [numero_identificacion] column value.
	 *
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getNumeroIdentificacion($format = 'Y-m-d')
	{
		if ($this->numero_identificacion === null) {
			return null;
		}


		if ($this->numero_identificacion === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->numero_identificacion);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->numero_identificacion, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [ano_ingreso_alpza] column value.
	 *
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getAnoIngresoAlpza($format = 'Y-m-d')
	{
		if ($this->ano_ingreso_alpza === null) {
			return null;
		}


		if ($this->ano_ingreso_alpza === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->ano_ingreso_alpza);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->ano_ingreso_alpza, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [nombre] column value.
	 *
	 * @return     string
	 */
	public function getNombre()
	{
		return $this->nombre;
	}

	/**
	 * Get the [apellido] column value.
	 *
	 * @return     string
	 */
	public function getApellido()
	{
		return $this->apellido;
	}

	/**
	 * Get the [profesion] column value.
	 *
	 * @return     string
	 */
	public function getProfesion()
	{
		return $this->profesion;
	}

	/**
	 * Get the [trabajo] column value.
	 *
	 * @return     string
	 */
	public function getTrabajo()
	{
		return $this->trabajo;
	}

	/**
	 * Get the [cargo] column value.
	 *
	 * @return     string
	 */
	public function getCargo()
	{
		return $this->cargo;
	}

	/**
	 * Get the [otra_asociacion] column value.
	 *
	 * @return     string
	 */
	public function getOtraAsociacion()
	{
		return $this->otra_asociacion;
	}

	/**
	 * Get the [direccion] column value.
	 *
	 * @return     string
	 */
	public function getDireccion()
	{
		return $this->direccion;
	}

	/**
	 * Get the [codigo_postal] column value.
	 *
	 * @return     string
	 */
	public function getCodigoPostal()
	{
		return $this->codigo_postal;
	}

	/**
	 * Get the [pais] column value.
	 *
	 * @return     string
	 */
	public function getPais()
	{
		return $this->pais;
	}

	/**
	 * Get the [telefono_cod_ciudad] column value.
	 *
	 * @return     string
	 */
	public function getTelefonoCodCiudad()
	{
		return $this->telefono_cod_ciudad;
	}

	/**
	 * Get the [telefono_cod_pais] column value.
	 *
	 * @return     string
	 */
	public function getTelefonoCodPais()
	{
		return $this->telefono_cod_pais;
	}

	/**
	 * Get the [telefono] column value.
	 *
	 * @return     string
	 */
	public function getTelefono()
	{
		return $this->telefono;
	}

	/**
	 * Get the [celular] column value.
	 *
	 * @return     string
	 */
	public function getCelular()
	{
		return $this->celular;
	}

	/**
	 * Get the [fax] column value.
	 *
	 * @return     string
	 */
	public function getFax()
	{
		return $this->fax;
	}

	/**
	 * Get the [email] column value.
	 *
	 * @return     string
	 */
	public function getEmail()
	{
		return $this->email;
	}

	/**
	 * Get the [sitio_web] column value.
	 *
	 * @return     string
	 */
	public function getSitioWeb()
	{
		return $this->sitio_web;
	}

	/**
	 * Get the [intereses_principales] column value.
	 *
	 * @return     string
	 */
	public function getInteresesPrincipales()
	{
		return $this->intereses_principales;
	}

	/**
	 * Get the [area_tematica_interes] column value.
	 *
	 * @return     string
	 */
	public function getAreaTematicaInteres()
	{
		return $this->area_tematica_interes;
	}

	/**
	 * Get the [area_experiencia] column value.
	 *
	 * @return     string
	 */
	public function getAreaExperiencia()
	{
		return $this->area_experiencia;
	}

	/**
	 * Get the [proyecto] column value.
	 *
	 * @return     string
	 */
	public function getProyecto()
	{
		return $this->proyecto;
	}

	/**
	 * Get the [publicacion] column value.
	 *
	 * @return     string
	 */
	public function getPublicacion()
	{
		return $this->publicacion;
	}

	/**
	 * Set the value of [id_alpza_miembro_profesional] column.
	 *
	 * @param      int $v new value
	 * @return     AlpzaMiembroProfesional The current object (for fluent API support)
	 */
	public function setIdAlpzaMiembroProfesional($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_alpza_miembro_profesional !== $v) {
			$this->id_alpza_miembro_profesional = $v;
			$this->modifiedColumns[] = AlpzaMiembroProfesionalPeer::ID_ALPZA_MIEMBRO_PROFESIONAL;
		}

		return $this;
	} // setIdAlpzaMiembroProfesional()

	/**
	 * Set the value of [alpza_miembro_id_alpza_miembro] column.
	 *
	 * @param      int $v new value
	 * @return     AlpzaMiembroProfesional The current object (for fluent API support)
	 */
	public function setAlpzaMiembroIdAlpzaMiembro($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->alpza_miembro_id_alpza_miembro !== $v) {
			$this->alpza_miembro_id_alpza_miembro = $v;
			$this->modifiedColumns[] = AlpzaMiembroProfesionalPeer::ALPZA_MIEMBRO_ID_ALPZA_MIEMBRO;
		}

		if ($this->aAlpzaMiembro !== null && $this->aAlpzaMiembro->getIdAlpzaMiembro() !== $v) {
			$this->aAlpzaMiembro = null;
		}

		return $this;
	} // setAlpzaMiembroIdAlpzaMiembro()

	/**
	 * Set the value of [nombre_formal] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroProfesional The current object (for fluent API support)
	 */
	public function setNombreFormal($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nombre_formal !== $v) {
			$this->nombre_formal = $v;
			$this->modifiedColumns[] = AlpzaMiembroProfesionalPeer::NOMBRE_FORMAL;
		}

		return $this;
	} // setNombreFormal()

	/**
	 * Set the value of [sigla] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroProfesional The current object (for fluent API support)
	 */
	public function setSigla($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->sigla !== $v) {
			$this->sigla = $v;
			$this->modifiedColumns[] = AlpzaMiembroProfesionalPeer::SIGLA;
		}

		return $this;
	} // setSigla()

	/**
	 * Sets the value of [numero_identificacion] column to a normalized version of the date/time value specified.
	 *
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     AlpzaMiembroProfesional The current object (for fluent API support)
	 */
	public function setNumeroIdentificacion($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->numero_identificacion !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->numero_identificacion !== null && $tmpDt = new DateTime($this->numero_identificacion)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match
			)
			{
				$this->numero_identificacion = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = AlpzaMiembroProfesionalPeer::NUMERO_IDENTIFICACION;
			}
		} // if either are not null

		return $this;
	} // setNumeroIdentificacion()

	/**
	 * Sets the value of [ano_ingreso_alpza] column to a normalized version of the date/time value specified.
	 *
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     AlpzaMiembroProfesional The current object (for fluent API support)
	 */
	public function setAnoIngresoAlpza($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->ano_ingreso_alpza !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->ano_ingreso_alpza !== null && $tmpDt = new DateTime($this->ano_ingreso_alpza)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match
			)
			{
				$this->ano_ingreso_alpza = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = AlpzaMiembroProfesionalPeer::ANO_INGRESO_ALPZA;
			}
		} // if either are not null

		return $this;
	} // setAnoIngresoAlpza()

	/**
	 * Set the value of [nombre] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroProfesional The current object (for fluent API support)
	 */
	public function setNombre($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nombre !== $v) {
			$this->nombre = $v;
			$this->modifiedColumns[] = AlpzaMiembroProfesionalPeer::NOMBRE;
		}

		return $this;
	} // setNombre()

	/**
	 * Set the value of [apellido] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroProfesional The current object (for fluent API support)
	 */
	public function setApellido($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->apellido !== $v) {
			$this->apellido = $v;
			$this->modifiedColumns[] = AlpzaMiembroProfesionalPeer::APELLIDO;
		}

		return $this;
	} // setApellido()

	/**
	 * Set the value of [profesion] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroProfesional The current object (for fluent API support)
	 */
	public function setProfesion($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->profesion !== $v) {
			$this->profesion = $v;
			$this->modifiedColumns[] = AlpzaMiembroProfesionalPeer::PROFESION;
		}

		return $this;
	} // setProfesion()

	/**
	 * Set the value of [trabajo] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroProfesional The current object (for fluent API support)
	 */
	public function setTrabajo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->trabajo !== $v) {
			$this->trabajo = $v;
			$this->modifiedColumns[] = AlpzaMiembroProfesionalPeer::TRABAJO;
		}

		return $this;
	} // setTrabajo()

	/**
	 * Set the value of [cargo] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroProfesional The current object (for fluent API support)
	 */
	public function setCargo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cargo !== $v) {
			$this->cargo = $v;
			$this->modifiedColumns[] = AlpzaMiembroProfesionalPeer::CARGO;
		}

		return $this;
	} // setCargo()

	/**
	 * Set the value of [otra_asociacion] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroProfesional The current object (for fluent API support)
	 */
	public function setOtraAsociacion($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->otra_asociacion !== $v) {
			$this->otra_asociacion = $v;
			$this->modifiedColumns[] = AlpzaMiembroProfesionalPeer::OTRA_ASOCIACION;
		}

		return $this;
	} // setOtraAsociacion()

	/**
	 * Set the value of [direccion] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroProfesional The current object (for fluent API support)
	 */
	public function setDireccion($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->direccion !== $v) {
			$this->direccion = $v;
			$this->modifiedColumns[] = AlpzaMiembroProfesionalPeer::DIRECCION;
		}

		return $this;
	} // setDireccion()

	/**
	 * Set the value of [codigo_postal] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroProfesional The current object (for fluent API support)
	 */
	public function setCodigoPostal($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->codigo_postal !== $v) {
			$this->codigo_postal = $v;
			$this->modifiedColumns[] = AlpzaMiembroProfesionalPeer::CODIGO_POSTAL;
		}

		return $this;
	} // setCodigoPostal()

	/**
	 * Set the value of [pais] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroProfesional The current object (for fluent API support)
	 */
	public function setPais($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pais !== $v) {
			$this->pais = $v;
			$this->modifiedColumns[] = AlpzaMiembroProfesionalPeer::PAIS;
		}

		return $this;
	} // setPais()

	/**
	 * Set the value of [telefono_cod_ciudad] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroProfesional The current object (for fluent API support)
	 */
	public function setTelefonoCodCiudad($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->telefono_cod_ciudad !== $v) {
			$this->telefono_cod_ciudad = $v;
			$this->modifiedColumns[] = AlpzaMiembroProfesionalPeer::TELEFONO_COD_CIUDAD;
		}

		return $this;
	} // setTelefonoCodCiudad()

	/**
	 * Set the value of [telefono_cod_pais] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroProfesional The current object (for fluent API support)
	 */
	public function setTelefonoCodPais($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->telefono_cod_pais !== $v) {
			$this->telefono_cod_pais = $v;
			$this->modifiedColumns[] = AlpzaMiembroProfesionalPeer::TELEFONO_COD_PAIS;
		}

		return $this;
	} // setTelefonoCodPais()

	/**
	 * Set the value of [telefono] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroProfesional The current object (for fluent API support)
	 */
	public function setTelefono($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->telefono !== $v) {
			$this->telefono = $v;
			$this->modifiedColumns[] = AlpzaMiembroProfesionalPeer::TELEFONO;
		}

		return $this;
	} // setTelefono()

	/**
	 * Set the value of [celular] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroProfesional The current object (for fluent API support)
	 */
	public function setCelular($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->celular !== $v) {
			$this->celular = $v;
			$this->modifiedColumns[] = AlpzaMiembroProfesionalPeer::CELULAR;
		}

		return $this;
	} // setCelular()

	/**
	 * Set the value of [fax] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroProfesional The current object (for fluent API support)
	 */
	public function setFax($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fax !== $v) {
			$this->fax = $v;
			$this->modifiedColumns[] = AlpzaMiembroProfesionalPeer::FAX;
		}

		return $this;
	} // setFax()

	/**
	 * Set the value of [email] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroProfesional The current object (for fluent API support)
	 */
	public function setEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->email !== $v) {
			$this->email = $v;
			$this->modifiedColumns[] = AlpzaMiembroProfesionalPeer::EMAIL;
		}

		return $this;
	} // setEmail()

	/**
	 * Set the value of [sitio_web] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroProfesional The current object (for fluent API support)
	 */
	public function setSitioWeb($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->sitio_web !== $v) {
			$this->sitio_web = $v;
			$this->modifiedColumns[] = AlpzaMiembroProfesionalPeer::SITIO_WEB;
		}

		return $this;
	} // setSitioWeb()

	/**
	 * Set the value of [intereses_principales] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroProfesional The current object (for fluent API support)
	 */
	public function setInteresesPrincipales($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->intereses_principales !== $v) {
			$this->intereses_principales = $v;
			$this->modifiedColumns[] = AlpzaMiembroProfesionalPeer::INTERESES_PRINCIPALES;
		}

		return $this;
	} // setInteresesPrincipales()

	/**
	 * Set the value of [area_tematica_interes] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroProfesional The current object (for fluent API support)
	 */
	public function setAreaTematicaInteres($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->area_tematica_interes !== $v) {
			$this->area_tematica_interes = $v;
			$this->modifiedColumns[] = AlpzaMiembroProfesionalPeer::AREA_TEMATICA_INTERES;
		}

		return $this;
	} // setAreaTematicaInteres()

	/**
	 * Set the value of [area_experiencia] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroProfesional The current object (for fluent API support)
	 */
	public function setAreaExperiencia($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->area_experiencia !== $v) {
			$this->area_experiencia = $v;
			$this->modifiedColumns[] = AlpzaMiembroProfesionalPeer::AREA_EXPERIENCIA;
		}

		return $this;
	} // setAreaExperiencia()

	/**
	 * Set the value of [proyecto] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroProfesional The current object (for fluent API support)
	 */
	public function setProyecto($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->proyecto !== $v) {
			$this->proyecto = $v;
			$this->modifiedColumns[] = AlpzaMiembroProfesionalPeer::PROYECTO;
		}

		return $this;
	} // setProyecto()

	/**
	 * Set the value of [publicacion] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroProfesional The current object (for fluent API support)
	 */
	public function setPublicacion($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->publicacion !== $v) {
			$this->publicacion = $v;
			$this->modifiedColumns[] = AlpzaMiembroProfesionalPeer::PUBLICACION;
		}

		return $this;
	} // setPublicacion()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id_alpza_miembro_profesional = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->alpza_miembro_id_alpza_miembro = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->nombre_formal = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->sigla = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->numero_identificacion = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->ano_ingreso_alpza = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->nombre = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->apellido = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->profesion = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->trabajo = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->cargo = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->otra_asociacion = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->direccion = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->codigo_postal = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->pais = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->telefono_cod_ciudad = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->telefono_cod_pais = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->telefono = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->celular = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->fax = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->email = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->sitio_web = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->intereses_principales = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->area_tematica_interes = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->area_experiencia = ($row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
			$this->proyecto = ($row[$startcol + 25] !== null) ? (string) $row[$startcol + 25] : null;
			$this->publicacion = ($row[$startcol + 26] !== null) ? (string) $row[$startcol + 26] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 27; // 27 = AlpzaMiembroProfesionalPeer::NUM_COLUMNS - AlpzaMiembroProfesionalPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating AlpzaMiembroProfesional object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aAlpzaMiembro !== null && $this->alpza_miembro_id_alpza_miembro !== $this->aAlpzaMiembro->getIdAlpzaMiembro()) {
			$this->aAlpzaMiembro = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(AlpzaMiembroProfesionalPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = AlpzaMiembroProfesionalPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aAlpzaMiembro = null;
		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(AlpzaMiembroProfesionalPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseAlpzaMiembroProfesional:delete:pre') as $callable)
			{
				if (call_user_func($callable, $this, $con))
				{
					$con->commit();
						
					return;
				}
			}

			if ($ret) {
				AlpzaMiembroProfesionalPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseAlpzaMiembroProfesional:delete:post') as $callable)
				{
					call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(AlpzaMiembroProfesionalPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseAlpzaMiembroProfesional:save:pre') as $callable)
			{
				if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
				{
					$con->commit();
						
					return $affectedRows;
				}
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseAlpzaMiembroProfesional:save:post') as $callable)
				{
					call_user_func($callable, $this, $con, $affectedRows);
				}

				AlpzaMiembroProfesionalPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aAlpzaMiembro !== null) {
				if ($this->aAlpzaMiembro->isModified() || $this->aAlpzaMiembro->isNew()) {
					$affectedRows += $this->aAlpzaMiembro->save($con);
				}
				$this->setAlpzaMiembro($this->aAlpzaMiembro);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = AlpzaMiembroProfesionalPeer::ID_ALPZA_MIEMBRO_PROFESIONAL;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = AlpzaMiembroProfesionalPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
					// should always be true here (even though technically
					// BasePeer::doInsert() can insert multiple rows).

					$this->setIdAlpzaMiembroProfesional($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += AlpzaMiembroProfesionalPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aAlpzaMiembro !== null) {
				if (!$this->aAlpzaMiembro->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aAlpzaMiembro->getValidationFailures());
				}
			}


			if (($retval = AlpzaMiembroProfesionalPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = AlpzaMiembroProfesionalPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getIdAlpzaMiembroProfesional();
				break;
			case 1:
				return $this->getAlpzaMiembroIdAlpzaMiembro();
				break;
			case 2:
				return $this->getNombreFormal();
				break;
			case 3:
				return $this->getSigla();
				break;
			case 4:
				return $this->getNumeroIdentificacion();
				break;
			case 5:
				return $this->getAnoIngresoAlpza();
				break;
			case 6:
				return $this->getNombre();
				break;
			case 7:
				return $this->getApellido();
				break;
			case 8:
				return $this->getProfesion();
				break;
			case 9:
				return $this->getTrabajo();
				break;
			case 10:
				return $this->getCargo();
				break;
			case 11:
				return $this->getOtraAsociacion();
				break;
			case 12:
				return $this->getDireccion();
				break;
			case 13:
				return $this->getCodigoPostal();
				break;
			case 14:
				return $this->getPais();
				break;
			case 15:
				return $this->getTelefonoCodCiudad();
				break;
			case 16:
				return $this->getTelefonoCodPais();
				break;
			case 17:
				return $this->getTelefono();
				break;
			case 18:
				return $this->getCelular();
				break;
			case 19:
				return $this->getFax();
				break;
			case 20:
				return $this->getEmail();
				break;
			case 21:
				return $this->getSitioWeb();
				break;
			case 22:
				return $this->getInteresesPrincipales();
				break;
			case 23:
				return $this->getAreaTematicaInteres();
				break;
			case 24:
				return $this->getAreaExperiencia();
				break;
			case 25:
				return $this->getProyecto();
				break;
			case 26:
				return $this->getPublicacion();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = AlpzaMiembroProfesionalPeer::getFieldNames($keyType);
		$result = array(
		$keys[0] => $this->getIdAlpzaMiembroProfesional(),
		$keys[1] => $this->getAlpzaMiembroIdAlpzaMiembro(),
		$keys[2] => $this->getNombreFormal(),
		$keys[3] => $this->getSigla(),
		$keys[4] => $this->getNumeroIdentificacion(),
		$keys[5] => $this->getAnoIngresoAlpza(),
		$keys[6] => $this->getNombre(),
		$keys[7] => $this->getApellido(),
		$keys[8] => $this->getProfesion(),
		$keys[9] => $this->getTrabajo(),
		$keys[10] => $this->getCargo(),
		$keys[11] => $this->getOtraAsociacion(),
		$keys[12] => $this->getDireccion(),
		$keys[13] => $this->getCodigoPostal(),
		$keys[14] => $this->getPais(),
		$keys[15] => $this->getTelefonoCodCiudad(),
		$keys[16] => $this->getTelefonoCodPais(),
		$keys[17] => $this->getTelefono(),
		$keys[18] => $this->getCelular(),
		$keys[19] => $this->getFax(),
		$keys[20] => $this->getEmail(),
		$keys[21] => $this->getSitioWeb(),
		$keys[22] => $this->getInteresesPrincipales(),
		$keys[23] => $this->getAreaTematicaInteres(),
		$keys[24] => $this->getAreaExperiencia(),
		$keys[25] => $this->getProyecto(),
		$keys[26] => $this->getPublicacion(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = AlpzaMiembroProfesionalPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setIdAlpzaMiembroProfesional($value);
				break;
			case 1:
				$this->setAlpzaMiembroIdAlpzaMiembro($value);
				break;
			case 2:
				$this->setNombreFormal($value);
				break;
			case 3:
				$this->setSigla($value);
				break;
			case 4:
				$this->setNumeroIdentificacion($value);
				break;
			case 5:
				$this->setAnoIngresoAlpza($value);
				break;
			case 6:
				$this->setNombre($value);
				break;
			case 7:
				$this->setApellido($value);
				break;
			case 8:
				$this->setProfesion($value);
				break;
			case 9:
				$this->setTrabajo($value);
				break;
			case 10:
				$this->setCargo($value);
				break;
			case 11:
				$this->setOtraAsociacion($value);
				break;
			case 12:
				$this->setDireccion($value);
				break;
			case 13:
				$this->setCodigoPostal($value);
				break;
			case 14:
				$this->setPais($value);
				break;
			case 15:
				$this->setTelefonoCodCiudad($value);
				break;
			case 16:
				$this->setTelefonoCodPais($value);
				break;
			case 17:
				$this->setTelefono($value);
				break;
			case 18:
				$this->setCelular($value);
				break;
			case 19:
				$this->setFax($value);
				break;
			case 20:
				$this->setEmail($value);
				break;
			case 21:
				$this->setSitioWeb($value);
				break;
			case 22:
				$this->setInteresesPrincipales($value);
				break;
			case 23:
				$this->setAreaTematicaInteres($value);
				break;
			case 24:
				$this->setAreaExperiencia($value);
				break;
			case 25:
				$this->setProyecto($value);
				break;
			case 26:
				$this->setPublicacion($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = AlpzaMiembroProfesionalPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setIdAlpzaMiembroProfesional($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setAlpzaMiembroIdAlpzaMiembro($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setNombreFormal($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setSigla($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setNumeroIdentificacion($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setAnoIngresoAlpza($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setNombre($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setApellido($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setProfesion($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setTrabajo($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setCargo($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setOtraAsociacion($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setDireccion($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setCodigoPostal($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setPais($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setTelefonoCodCiudad($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setTelefonoCodPais($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setTelefono($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setCelular($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setFax($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setEmail($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setSitioWeb($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setInteresesPrincipales($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setAreaTematicaInteres($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setAreaExperiencia($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setProyecto($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setPublicacion($arr[$keys[26]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(AlpzaMiembroProfesionalPeer::DATABASE_NAME);

		if ($this->isColumnModified(AlpzaMiembroProfesionalPeer::ID_ALPZA_MIEMBRO_PROFESIONAL)) $criteria->add(AlpzaMiembroProfesionalPeer::ID_ALPZA_MIEMBRO_PROFESIONAL, $this->id_alpza_miembro_profesional);
		if ($this->isColumnModified(AlpzaMiembroProfesionalPeer::ALPZA_MIEMBRO_ID_ALPZA_MIEMBRO)) $criteria->add(AlpzaMiembroProfesionalPeer::ALPZA_MIEMBRO_ID_ALPZA_MIEMBRO, $this->alpza_miembro_id_alpza_miembro);
		if ($this->isColumnModified(AlpzaMiembroProfesionalPeer::NOMBRE_FORMAL)) $criteria->add(AlpzaMiembroProfesionalPeer::NOMBRE_FORMAL, $this->nombre_formal);
		if ($this->isColumnModified(AlpzaMiembroProfesionalPeer::SIGLA)) $criteria->add(AlpzaMiembroProfesionalPeer::SIGLA, $this->sigla);
		if ($this->isColumnModified(AlpzaMiembroProfesionalPeer::NUMERO_IDENTIFICACION)) $criteria->add(AlpzaMiembroProfesionalPeer::NUMERO_IDENTIFICACION, $this->numero_identificacion);
		if ($this->isColumnModified(AlpzaMiembroProfesionalPeer::ANO_INGRESO_ALPZA)) $criteria->add(AlpzaMiembroProfesionalPeer::ANO_INGRESO_ALPZA, $this->ano_ingreso_alpza);
		if ($this->isColumnModified(AlpzaMiembroProfesionalPeer::NOMBRE)) $criteria->add(AlpzaMiembroProfesionalPeer::NOMBRE, $this->nombre);
		if ($this->isColumnModified(AlpzaMiembroProfesionalPeer::APELLIDO)) $criteria->add(AlpzaMiembroProfesionalPeer::APELLIDO, $this->apellido);
		if ($this->isColumnModified(AlpzaMiembroProfesionalPeer::PROFESION)) $criteria->add(AlpzaMiembroProfesionalPeer::PROFESION, $this->profesion);
		if ($this->isColumnModified(AlpzaMiembroProfesionalPeer::TRABAJO)) $criteria->add(AlpzaMiembroProfesionalPeer::TRABAJO, $this->trabajo);
		if ($this->isColumnModified(AlpzaMiembroProfesionalPeer::CARGO)) $criteria->add(AlpzaMiembroProfesionalPeer::CARGO, $this->cargo);
		if ($this->isColumnModified(AlpzaMiembroProfesionalPeer::OTRA_ASOCIACION)) $criteria->add(AlpzaMiembroProfesionalPeer::OTRA_ASOCIACION, $this->otra_asociacion);
		if ($this->isColumnModified(AlpzaMiembroProfesionalPeer::DIRECCION)) $criteria->add(AlpzaMiembroProfesionalPeer::DIRECCION, $this->direccion);
		if ($this->isColumnModified(AlpzaMiembroProfesionalPeer::CODIGO_POSTAL)) $criteria->add(AlpzaMiembroProfesionalPeer::CODIGO_POSTAL, $this->codigo_postal);
		if ($this->isColumnModified(AlpzaMiembroProfesionalPeer::PAIS)) $criteria->add(AlpzaMiembroProfesionalPeer::PAIS, $this->pais);
		if ($this->isColumnModified(AlpzaMiembroProfesionalPeer::TELEFONO_COD_CIUDAD)) $criteria->add(AlpzaMiembroProfesionalPeer::TELEFONO_COD_CIUDAD, $this->telefono_cod_ciudad);
		if ($this->isColumnModified(AlpzaMiembroProfesionalPeer::TELEFONO_COD_PAIS)) $criteria->add(AlpzaMiembroProfesionalPeer::TELEFONO_COD_PAIS, $this->telefono_cod_pais);
		if ($this->isColumnModified(AlpzaMiembroProfesionalPeer::TELEFONO)) $criteria->add(AlpzaMiembroProfesionalPeer::TELEFONO, $this->telefono);
		if ($this->isColumnModified(AlpzaMiembroProfesionalPeer::CELULAR)) $criteria->add(AlpzaMiembroProfesionalPeer::CELULAR, $this->celular);
		if ($this->isColumnModified(AlpzaMiembroProfesionalPeer::FAX)) $criteria->add(AlpzaMiembroProfesionalPeer::FAX, $this->fax);
		if ($this->isColumnModified(AlpzaMiembroProfesionalPeer::EMAIL)) $criteria->add(AlpzaMiembroProfesionalPeer::EMAIL, $this->email);
		if ($this->isColumnModified(AlpzaMiembroProfesionalPeer::SITIO_WEB)) $criteria->add(AlpzaMiembroProfesionalPeer::SITIO_WEB, $this->sitio_web);
		if ($this->isColumnModified(AlpzaMiembroProfesionalPeer::INTERESES_PRINCIPALES)) $criteria->add(AlpzaMiembroProfesionalPeer::INTERESES_PRINCIPALES, $this->intereses_principales);
		if ($this->isColumnModified(AlpzaMiembroProfesionalPeer::AREA_TEMATICA_INTERES)) $criteria->add(AlpzaMiembroProfesionalPeer::AREA_TEMATICA_INTERES, $this->area_tematica_interes);
		if ($this->isColumnModified(AlpzaMiembroProfesionalPeer::AREA_EXPERIENCIA)) $criteria->add(AlpzaMiembroProfesionalPeer::AREA_EXPERIENCIA, $this->area_experiencia);
		if ($this->isColumnModified(AlpzaMiembroProfesionalPeer::PROYECTO)) $criteria->add(AlpzaMiembroProfesionalPeer::PROYECTO, $this->proyecto);
		if ($this->isColumnModified(AlpzaMiembroProfesionalPeer::PUBLICACION)) $criteria->add(AlpzaMiembroProfesionalPeer::PUBLICACION, $this->publicacion);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(AlpzaMiembroProfesionalPeer::DATABASE_NAME);

		$criteria->add(AlpzaMiembroProfesionalPeer::ID_ALPZA_MIEMBRO_PROFESIONAL, $this->id_alpza_miembro_profesional);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getIdAlpzaMiembroProfesional();
	}

	/**
	 * Generic method to set the primary key (id_alpza_miembro_profesional column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setIdAlpzaMiembroProfesional($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of AlpzaMiembroProfesional (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setAlpzaMiembroIdAlpzaMiembro($this->alpza_miembro_id_alpza_miembro);

		$copyObj->setNombreFormal($this->nombre_formal);

		$copyObj->setSigla($this->sigla);

		$copyObj->setNumeroIdentificacion($this->numero_identificacion);

		$copyObj->setAnoIngresoAlpza($this->ano_ingreso_alpza);

		$copyObj->setNombre($this->nombre);

		$copyObj->setApellido($this->apellido);

		$copyObj->setProfesion($this->profesion);

		$copyObj->setTrabajo($this->trabajo);

		$copyObj->setCargo($this->cargo);

		$copyObj->setOtraAsociacion($this->otra_asociacion);

		$copyObj->setDireccion($this->direccion);

		$copyObj->setCodigoPostal($this->codigo_postal);

		$copyObj->setPais($this->pais);

		$copyObj->setTelefonoCodCiudad($this->telefono_cod_ciudad);

		$copyObj->setTelefonoCodPais($this->telefono_cod_pais);

		$copyObj->setTelefono($this->telefono);

		$copyObj->setCelular($this->celular);

		$copyObj->setFax($this->fax);

		$copyObj->setEmail($this->email);

		$copyObj->setSitioWeb($this->sitio_web);

		$copyObj->setInteresesPrincipales($this->intereses_principales);

		$copyObj->setAreaTematicaInteres($this->area_tematica_interes);

		$copyObj->setAreaExperiencia($this->area_experiencia);

		$copyObj->setProyecto($this->proyecto);

		$copyObj->setPublicacion($this->publicacion);


		$copyObj->setNew(true);

		$copyObj->setIdAlpzaMiembroProfesional(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     AlpzaMiembroProfesional Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     AlpzaMiembroProfesionalPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new AlpzaMiembroProfesionalPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a AlpzaMiembro object.
	 *
	 * @param      AlpzaMiembro $v
	 * @return     AlpzaMiembroProfesional The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setAlpzaMiembro(AlpzaMiembro $v = null)
	{
		if ($v === null) {
			$this->setAlpzaMiembroIdAlpzaMiembro(NULL);
		} else {
			$this->setAlpzaMiembroIdAlpzaMiembro($v->getIdAlpzaMiembro());
		}

		$this->aAlpzaMiembro = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the AlpzaMiembro object, it will not be re-added.
		if ($v !== null) {
			$v->addAlpzaMiembroProfesional($this);
		}

		return $this;
	}


	/**
	 * Get the associated AlpzaMiembro object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     AlpzaMiembro The associated AlpzaMiembro object.
	 * @throws     PropelException
	 */
	public function getAlpzaMiembro(PropelPDO $con = null)
	{
		if ($this->aAlpzaMiembro === null && ($this->alpza_miembro_id_alpza_miembro !== null)) {
			$this->aAlpzaMiembro = AlpzaMiembroPeer::retrieveByPk($this->alpza_miembro_id_alpza_miembro);
			/* The following can be used additionally to
			 guarantee the related object contains a reference
			 to this object.  This level of coupling may, however, be
			 undesirable since it could result in an only partially populated collection
			 in the referenced object.
			 $this->aAlpzaMiembro->addAlpzaMiembroProfesionals($this);
			 */
		}
		return $this->aAlpzaMiembro;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

		$this->aAlpzaMiembro = null;
	}

	// symfony_behaviors behavior

	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
		if (!$callable = sfMixer::getCallable('BaseAlpzaMiembroProfesional:'.$method))
		{
			throw new sfException(sprintf('Call to undefined method BaseAlpzaMiembroProfesional::%s', $method));
		}

		array_unshift($arguments, $this);

		return call_user_func_array($callable, $arguments);
	}

} // BaseAlpzaMiembroProfesional
