<?php

/**
 * Base class that represents a row from the 'alpza_contenido' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Sat Oct 20 15:09:54 2012
 *
 * @package    lib.model.om
 */
abstract class BaseAlpzaContenido extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        AlpzaContenidoPeer
	 */
	protected static $peer;

	/**
	 * The value for the id_alpza_contenido field.
	 * @var        int
	 */
	protected $id_alpza_contenido;

	/**
	 * The value for the id_alpza_miembro field.
	 * @var        int
	 */
	protected $id_alpza_miembro;

	/**
	 * The value for the id_alpza_noticia field.
	 * @var        int
	 */
	protected $id_alpza_noticia;

	/**
	 * The value for the id_alpza_evento field.
	 * @var        int
	 */
	protected $id_alpza_evento;

	/**
	 * The value for the id_alpza_beca field.
	 * @var        int
	 */
	protected $id_alpza_beca;

	/**
	 * The value for the id_alpza_publicacion field.
	 * @var        int
	 */
	protected $id_alpza_publicacion;

	/**
	 * The value for the id_alpza_junta field.
	 * @var        int
	 */
	protected $id_alpza_junta;

	/**
	 * The value for the id_alpza_comite field.
	 * @var        int
	 */
	protected $id_alpza_comite;

	/**
	 * The value for the id_alpza_congreso field.
	 * @var        int
	 */
	protected $id_alpza_congreso;

	/**
	 * The value for the id_alpza_informacion field.
	 * @var        int
	 */
	protected $id_alpza_informacion;

	/**
	 * @var        AlpzaMiembro
	 */
	protected $aAlpzaMiembro;

	/**
	 * @var        AlpzaNoticia
	 */
	protected $aAlpzaNoticia;

	/**
	 * @var        AlpzaEvento
	 */
	protected $aAlpzaEvento;

	/**
	 * @var        AlpzaBeca
	 */
	protected $aAlpzaBeca;

	/**
	 * @var        AlpzaPublicacion
	 */
	protected $aAlpzaPublicacion;

	/**
	 * @var        AlpzaJunta
	 */
	protected $aAlpzaJunta;

	/**
	 * @var        AlpzaComite
	 */
	protected $aAlpzaComite;

	/**
	 * @var        AlpzaCongreso
	 */
	protected $aAlpzaCongreso;

	/**
	 * @var        AlpzaInformacion
	 */
	protected $aAlpzaInformacion;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior

	const PEER = 'AlpzaContenidoPeer';

	/**
	 * Get the [id_alpza_contenido] column value.
	 *
	 * @return     int
	 */
	public function getIdAlpzaContenido()
	{
		return $this->id_alpza_contenido;
	}

	/**
	 * Get the [id_alpza_miembro] column value.
	 *
	 * @return     int
	 */
	public function getIdAlpzaMiembro()
	{
		return $this->id_alpza_miembro;
	}

	/**
	 * Get the [id_alpza_noticia] column value.
	 *
	 * @return     int
	 */
	public function getIdAlpzaNoticia()
	{
		return $this->id_alpza_noticia;
	}

	/**
	 * Get the [id_alpza_evento] column value.
	 *
	 * @return     int
	 */
	public function getIdAlpzaEvento()
	{
		return $this->id_alpza_evento;
	}

	/**
	 * Get the [id_alpza_beca] column value.
	 *
	 * @return     int
	 */
	public function getIdAlpzaBeca()
	{
		return $this->id_alpza_beca;
	}

	/**
	 * Get the [id_alpza_publicacion] column value.
	 *
	 * @return     int
	 */
	public function getIdAlpzaPublicacion()
	{
		return $this->id_alpza_publicacion;
	}

	/**
	 * Get the [id_alpza_junta] column value.
	 *
	 * @return     int
	 */
	public function getIdAlpzaJunta()
	{
		return $this->id_alpza_junta;
	}

	/**
	 * Get the [id_alpza_comite] column value.
	 *
	 * @return     int
	 */
	public function getIdAlpzaComite()
	{
		return $this->id_alpza_comite;
	}

	/**
	 * Get the [id_alpza_congreso] column value.
	 *
	 * @return     int
	 */
	public function getIdAlpzaCongreso()
	{
		return $this->id_alpza_congreso;
	}

	/**
	 * Get the [id_alpza_informacion] column value.
	 *
	 * @return     int
	 */
	public function getIdAlpzaInformacion()
	{
		return $this->id_alpza_informacion;
	}

	/**
	 * Set the value of [id_alpza_contenido] column.
	 *
	 * @param      int $v new value
	 * @return     AlpzaContenido The current object (for fluent API support)
	 */
	public function setIdAlpzaContenido($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_alpza_contenido !== $v) {
			$this->id_alpza_contenido = $v;
			$this->modifiedColumns[] = AlpzaContenidoPeer::ID_ALPZA_CONTENIDO;
		}

		return $this;
	} // setIdAlpzaContenido()

	/**
	 * Set the value of [id_alpza_miembro] column.
	 *
	 * @param      int $v new value
	 * @return     AlpzaContenido The current object (for fluent API support)
	 */
	public function setIdAlpzaMiembro($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_alpza_miembro !== $v) {
			$this->id_alpza_miembro = $v;
			$this->modifiedColumns[] = AlpzaContenidoPeer::ID_ALPZA_MIEMBRO;
		}

		if ($this->aAlpzaMiembro !== null && $this->aAlpzaMiembro->getIdAlpzaMiembro() !== $v) {
			$this->aAlpzaMiembro = null;
		}

		return $this;
	} // setIdAlpzaMiembro()

	/**
	 * Set the value of [id_alpza_noticia] column.
	 *
	 * @param      int $v new value
	 * @return     AlpzaContenido The current object (for fluent API support)
	 */
	public function setIdAlpzaNoticia($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_alpza_noticia !== $v) {
			$this->id_alpza_noticia = $v;
			$this->modifiedColumns[] = AlpzaContenidoPeer::ID_ALPZA_NOTICIA;
		}

		if ($this->aAlpzaNoticia !== null && $this->aAlpzaNoticia->getIdAlpzaNoticia() !== $v) {
			$this->aAlpzaNoticia = null;
		}

		return $this;
	} // setIdAlpzaNoticia()

	/**
	 * Set the value of [id_alpza_evento] column.
	 *
	 * @param      int $v new value
	 * @return     AlpzaContenido The current object (for fluent API support)
	 */
	public function setIdAlpzaEvento($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_alpza_evento !== $v) {
			$this->id_alpza_evento = $v;
			$this->modifiedColumns[] = AlpzaContenidoPeer::ID_ALPZA_EVENTO;
		}

		if ($this->aAlpzaEvento !== null && $this->aAlpzaEvento->getIdAlpzaEvento() !== $v) {
			$this->aAlpzaEvento = null;
		}

		return $this;
	} // setIdAlpzaEvento()

	/**
	 * Set the value of [id_alpza_beca] column.
	 *
	 * @param      int $v new value
	 * @return     AlpzaContenido The current object (for fluent API support)
	 */
	public function setIdAlpzaBeca($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_alpza_beca !== $v) {
			$this->id_alpza_beca = $v;
			$this->modifiedColumns[] = AlpzaContenidoPeer::ID_ALPZA_BECA;
		}

		if ($this->aAlpzaBeca !== null && $this->aAlpzaBeca->getIdAlpzaBeca() !== $v) {
			$this->aAlpzaBeca = null;
		}

		return $this;
	} // setIdAlpzaBeca()

	/**
	 * Set the value of [id_alpza_publicacion] column.
	 *
	 * @param      int $v new value
	 * @return     AlpzaContenido The current object (for fluent API support)
	 */
	public function setIdAlpzaPublicacion($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_alpza_publicacion !== $v) {
			$this->id_alpza_publicacion = $v;
			$this->modifiedColumns[] = AlpzaContenidoPeer::ID_ALPZA_PUBLICACION;
		}

		if ($this->aAlpzaPublicacion !== null && $this->aAlpzaPublicacion->getIdAlpzaPublicacion() !== $v) {
			$this->aAlpzaPublicacion = null;
		}

		return $this;
	} // setIdAlpzaPublicacion()

	/**
	 * Set the value of [id_alpza_junta] column.
	 *
	 * @param      int $v new value
	 * @return     AlpzaContenido The current object (for fluent API support)
	 */
	public function setIdAlpzaJunta($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_alpza_junta !== $v) {
			$this->id_alpza_junta = $v;
			$this->modifiedColumns[] = AlpzaContenidoPeer::ID_ALPZA_JUNTA;
		}

		if ($this->aAlpzaJunta !== null && $this->aAlpzaJunta->getIdAlpzaJunta() !== $v) {
			$this->aAlpzaJunta = null;
		}

		return $this;
	} // setIdAlpzaJunta()

	/**
	 * Set the value of [id_alpza_comite] column.
	 *
	 * @param      int $v new value
	 * @return     AlpzaContenido The current object (for fluent API support)
	 */
	public function setIdAlpzaComite($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_alpza_comite !== $v) {
			$this->id_alpza_comite = $v;
			$this->modifiedColumns[] = AlpzaContenidoPeer::ID_ALPZA_COMITE;
		}

		if ($this->aAlpzaComite !== null && $this->aAlpzaComite->getIdAlpzaComite() !== $v) {
			$this->aAlpzaComite = null;
		}

		return $this;
	} // setIdAlpzaComite()

	/**
	 * Set the value of [id_alpza_congreso] column.
	 *
	 * @param      int $v new value
	 * @return     AlpzaContenido The current object (for fluent API support)
	 */
	public function setIdAlpzaCongreso($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_alpza_congreso !== $v) {
			$this->id_alpza_congreso = $v;
			$this->modifiedColumns[] = AlpzaContenidoPeer::ID_ALPZA_CONGRESO;
		}

		if ($this->aAlpzaCongreso !== null && $this->aAlpzaCongreso->getIdAlpzaCongreso() !== $v) {
			$this->aAlpzaCongreso = null;
		}

		return $this;
	} // setIdAlpzaCongreso()

	/**
	 * Set the value of [id_alpza_informacion] column.
	 *
	 * @param      int $v new value
	 * @return     AlpzaContenido The current object (for fluent API support)
	 */
	public function setIdAlpzaInformacion($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_alpza_informacion !== $v) {
			$this->id_alpza_informacion = $v;
			$this->modifiedColumns[] = AlpzaContenidoPeer::ID_ALPZA_INFORMACION;
		}

		if ($this->aAlpzaInformacion !== null && $this->aAlpzaInformacion->getIdAlpzaInformacion() !== $v) {
			$this->aAlpzaInformacion = null;
		}

		return $this;
	} // setIdAlpzaInformacion()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id_alpza_contenido = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->id_alpza_miembro = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->id_alpza_noticia = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->id_alpza_evento = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
			$this->id_alpza_beca = ($row[$startcol + 4] !== null) ? (int) $row[$startcol + 4] : null;
			$this->id_alpza_publicacion = ($row[$startcol + 5] !== null) ? (int) $row[$startcol + 5] : null;
			$this->id_alpza_junta = ($row[$startcol + 6] !== null) ? (int) $row[$startcol + 6] : null;
			$this->id_alpza_comite = ($row[$startcol + 7] !== null) ? (int) $row[$startcol + 7] : null;
			$this->id_alpza_congreso = ($row[$startcol + 8] !== null) ? (int) $row[$startcol + 8] : null;
			$this->id_alpza_informacion = ($row[$startcol + 9] !== null) ? (int) $row[$startcol + 9] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 10; // 10 = AlpzaContenidoPeer::NUM_COLUMNS - AlpzaContenidoPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating AlpzaContenido object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aAlpzaMiembro !== null && $this->id_alpza_miembro !== $this->aAlpzaMiembro->getIdAlpzaMiembro()) {
			$this->aAlpzaMiembro = null;
		}
		if ($this->aAlpzaNoticia !== null && $this->id_alpza_noticia !== $this->aAlpzaNoticia->getIdAlpzaNoticia()) {
			$this->aAlpzaNoticia = null;
		}
		if ($this->aAlpzaEvento !== null && $this->id_alpza_evento !== $this->aAlpzaEvento->getIdAlpzaEvento()) {
			$this->aAlpzaEvento = null;
		}
		if ($this->aAlpzaBeca !== null && $this->id_alpza_beca !== $this->aAlpzaBeca->getIdAlpzaBeca()) {
			$this->aAlpzaBeca = null;
		}
		if ($this->aAlpzaPublicacion !== null && $this->id_alpza_publicacion !== $this->aAlpzaPublicacion->getIdAlpzaPublicacion()) {
			$this->aAlpzaPublicacion = null;
		}
		if ($this->aAlpzaJunta !== null && $this->id_alpza_junta !== $this->aAlpzaJunta->getIdAlpzaJunta()) {
			$this->aAlpzaJunta = null;
		}
		if ($this->aAlpzaComite !== null && $this->id_alpza_comite !== $this->aAlpzaComite->getIdAlpzaComite()) {
			$this->aAlpzaComite = null;
		}
		if ($this->aAlpzaCongreso !== null && $this->id_alpza_congreso !== $this->aAlpzaCongreso->getIdAlpzaCongreso()) {
			$this->aAlpzaCongreso = null;
		}
		if ($this->aAlpzaInformacion !== null && $this->id_alpza_informacion !== $this->aAlpzaInformacion->getIdAlpzaInformacion()) {
			$this->aAlpzaInformacion = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(AlpzaContenidoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = AlpzaContenidoPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aAlpzaMiembro = null;
			$this->aAlpzaNoticia = null;
			$this->aAlpzaEvento = null;
			$this->aAlpzaBeca = null;
			$this->aAlpzaPublicacion = null;
			$this->aAlpzaJunta = null;
			$this->aAlpzaComite = null;
			$this->aAlpzaCongreso = null;
			$this->aAlpzaInformacion = null;
		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(AlpzaContenidoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseAlpzaContenido:delete:pre') as $callable)
			{
				if (call_user_func($callable, $this, $con))
				{
					$con->commit();
						
					return;
				}
			}

			if ($ret) {
				AlpzaContenidoPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseAlpzaContenido:delete:post') as $callable)
				{
					call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(AlpzaContenidoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseAlpzaContenido:save:pre') as $callable)
			{
				if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
				{
					$con->commit();
						
					return $affectedRows;
				}
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseAlpzaContenido:save:post') as $callable)
				{
					call_user_func($callable, $this, $con, $affectedRows);
				}

				AlpzaContenidoPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aAlpzaMiembro !== null) {
				if ($this->aAlpzaMiembro->isModified() || $this->aAlpzaMiembro->isNew()) {
					$affectedRows += $this->aAlpzaMiembro->save($con);
				}
				$this->setAlpzaMiembro($this->aAlpzaMiembro);
			}

			if ($this->aAlpzaNoticia !== null) {
				if ($this->aAlpzaNoticia->isModified() || $this->aAlpzaNoticia->isNew()) {
					$affectedRows += $this->aAlpzaNoticia->save($con);
				}
				$this->setAlpzaNoticia($this->aAlpzaNoticia);
			}

			if ($this->aAlpzaEvento !== null) {
				if ($this->aAlpzaEvento->isModified() || $this->aAlpzaEvento->isNew()) {
					$affectedRows += $this->aAlpzaEvento->save($con);
				}
				$this->setAlpzaEvento($this->aAlpzaEvento);
			}

			if ($this->aAlpzaBeca !== null) {
				if ($this->aAlpzaBeca->isModified() || $this->aAlpzaBeca->isNew()) {
					$affectedRows += $this->aAlpzaBeca->save($con);
				}
				$this->setAlpzaBeca($this->aAlpzaBeca);
			}

			if ($this->aAlpzaPublicacion !== null) {
				if ($this->aAlpzaPublicacion->isModified() || $this->aAlpzaPublicacion->isNew()) {
					$affectedRows += $this->aAlpzaPublicacion->save($con);
				}
				$this->setAlpzaPublicacion($this->aAlpzaPublicacion);
			}

			if ($this->aAlpzaJunta !== null) {
				if ($this->aAlpzaJunta->isModified() || $this->aAlpzaJunta->isNew()) {
					$affectedRows += $this->aAlpzaJunta->save($con);
				}
				$this->setAlpzaJunta($this->aAlpzaJunta);
			}

			if ($this->aAlpzaComite !== null) {
				if ($this->aAlpzaComite->isModified() || $this->aAlpzaComite->isNew()) {
					$affectedRows += $this->aAlpzaComite->save($con);
				}
				$this->setAlpzaComite($this->aAlpzaComite);
			}

			if ($this->aAlpzaCongreso !== null) {
				if ($this->aAlpzaCongreso->isModified() || $this->aAlpzaCongreso->isNew()) {
					$affectedRows += $this->aAlpzaCongreso->save($con);
				}
				$this->setAlpzaCongreso($this->aAlpzaCongreso);
			}

			if ($this->aAlpzaInformacion !== null) {
				if ($this->aAlpzaInformacion->isModified() || $this->aAlpzaInformacion->isNew()) {
					$affectedRows += $this->aAlpzaInformacion->save($con);
				}
				$this->setAlpzaInformacion($this->aAlpzaInformacion);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = AlpzaContenidoPeer::ID_ALPZA_CONTENIDO;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = AlpzaContenidoPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
					// should always be true here (even though technically
					// BasePeer::doInsert() can insert multiple rows).

					$this->setIdAlpzaContenido($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += AlpzaContenidoPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aAlpzaMiembro !== null) {
				if (!$this->aAlpzaMiembro->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aAlpzaMiembro->getValidationFailures());
				}
			}

			if ($this->aAlpzaNoticia !== null) {
				if (!$this->aAlpzaNoticia->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aAlpzaNoticia->getValidationFailures());
				}
			}

			if ($this->aAlpzaEvento !== null) {
				if (!$this->aAlpzaEvento->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aAlpzaEvento->getValidationFailures());
				}
			}

			if ($this->aAlpzaBeca !== null) {
				if (!$this->aAlpzaBeca->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aAlpzaBeca->getValidationFailures());
				}
			}

			if ($this->aAlpzaPublicacion !== null) {
				if (!$this->aAlpzaPublicacion->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aAlpzaPublicacion->getValidationFailures());
				}
			}

			if ($this->aAlpzaJunta !== null) {
				if (!$this->aAlpzaJunta->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aAlpzaJunta->getValidationFailures());
				}
			}

			if ($this->aAlpzaComite !== null) {
				if (!$this->aAlpzaComite->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aAlpzaComite->getValidationFailures());
				}
			}

			if ($this->aAlpzaCongreso !== null) {
				if (!$this->aAlpzaCongreso->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aAlpzaCongreso->getValidationFailures());
				}
			}

			if ($this->aAlpzaInformacion !== null) {
				if (!$this->aAlpzaInformacion->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aAlpzaInformacion->getValidationFailures());
				}
			}


			if (($retval = AlpzaContenidoPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = AlpzaContenidoPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getIdAlpzaContenido();
				break;
			case 1:
				return $this->getIdAlpzaMiembro();
				break;
			case 2:
				return $this->getIdAlpzaNoticia();
				break;
			case 3:
				return $this->getIdAlpzaEvento();
				break;
			case 4:
				return $this->getIdAlpzaBeca();
				break;
			case 5:
				return $this->getIdAlpzaPublicacion();
				break;
			case 6:
				return $this->getIdAlpzaJunta();
				break;
			case 7:
				return $this->getIdAlpzaComite();
				break;
			case 8:
				return $this->getIdAlpzaCongreso();
				break;
			case 9:
				return $this->getIdAlpzaInformacion();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = AlpzaContenidoPeer::getFieldNames($keyType);
		$result = array(
		$keys[0] => $this->getIdAlpzaContenido(),
		$keys[1] => $this->getIdAlpzaMiembro(),
		$keys[2] => $this->getIdAlpzaNoticia(),
		$keys[3] => $this->getIdAlpzaEvento(),
		$keys[4] => $this->getIdAlpzaBeca(),
		$keys[5] => $this->getIdAlpzaPublicacion(),
		$keys[6] => $this->getIdAlpzaJunta(),
		$keys[7] => $this->getIdAlpzaComite(),
		$keys[8] => $this->getIdAlpzaCongreso(),
		$keys[9] => $this->getIdAlpzaInformacion(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = AlpzaContenidoPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setIdAlpzaContenido($value);
				break;
			case 1:
				$this->setIdAlpzaMiembro($value);
				break;
			case 2:
				$this->setIdAlpzaNoticia($value);
				break;
			case 3:
				$this->setIdAlpzaEvento($value);
				break;
			case 4:
				$this->setIdAlpzaBeca($value);
				break;
			case 5:
				$this->setIdAlpzaPublicacion($value);
				break;
			case 6:
				$this->setIdAlpzaJunta($value);
				break;
			case 7:
				$this->setIdAlpzaComite($value);
				break;
			case 8:
				$this->setIdAlpzaCongreso($value);
				break;
			case 9:
				$this->setIdAlpzaInformacion($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = AlpzaContenidoPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setIdAlpzaContenido($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setIdAlpzaMiembro($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setIdAlpzaNoticia($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setIdAlpzaEvento($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setIdAlpzaBeca($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setIdAlpzaPublicacion($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setIdAlpzaJunta($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setIdAlpzaComite($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setIdAlpzaCongreso($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setIdAlpzaInformacion($arr[$keys[9]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(AlpzaContenidoPeer::DATABASE_NAME);

		if ($this->isColumnModified(AlpzaContenidoPeer::ID_ALPZA_CONTENIDO)) $criteria->add(AlpzaContenidoPeer::ID_ALPZA_CONTENIDO, $this->id_alpza_contenido);
		if ($this->isColumnModified(AlpzaContenidoPeer::ID_ALPZA_MIEMBRO)) $criteria->add(AlpzaContenidoPeer::ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);
		if ($this->isColumnModified(AlpzaContenidoPeer::ID_ALPZA_NOTICIA)) $criteria->add(AlpzaContenidoPeer::ID_ALPZA_NOTICIA, $this->id_alpza_noticia);
		if ($this->isColumnModified(AlpzaContenidoPeer::ID_ALPZA_EVENTO)) $criteria->add(AlpzaContenidoPeer::ID_ALPZA_EVENTO, $this->id_alpza_evento);
		if ($this->isColumnModified(AlpzaContenidoPeer::ID_ALPZA_BECA)) $criteria->add(AlpzaContenidoPeer::ID_ALPZA_BECA, $this->id_alpza_beca);
		if ($this->isColumnModified(AlpzaContenidoPeer::ID_ALPZA_PUBLICACION)) $criteria->add(AlpzaContenidoPeer::ID_ALPZA_PUBLICACION, $this->id_alpza_publicacion);
		if ($this->isColumnModified(AlpzaContenidoPeer::ID_ALPZA_JUNTA)) $criteria->add(AlpzaContenidoPeer::ID_ALPZA_JUNTA, $this->id_alpza_junta);
		if ($this->isColumnModified(AlpzaContenidoPeer::ID_ALPZA_COMITE)) $criteria->add(AlpzaContenidoPeer::ID_ALPZA_COMITE, $this->id_alpza_comite);
		if ($this->isColumnModified(AlpzaContenidoPeer::ID_ALPZA_CONGRESO)) $criteria->add(AlpzaContenidoPeer::ID_ALPZA_CONGRESO, $this->id_alpza_congreso);
		if ($this->isColumnModified(AlpzaContenidoPeer::ID_ALPZA_INFORMACION)) $criteria->add(AlpzaContenidoPeer::ID_ALPZA_INFORMACION, $this->id_alpza_informacion);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(AlpzaContenidoPeer::DATABASE_NAME);

		$criteria->add(AlpzaContenidoPeer::ID_ALPZA_CONTENIDO, $this->id_alpza_contenido);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getIdAlpzaContenido();
	}

	/**
	 * Generic method to set the primary key (id_alpza_contenido column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setIdAlpzaContenido($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of AlpzaContenido (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setIdAlpzaMiembro($this->id_alpza_miembro);

		$copyObj->setIdAlpzaNoticia($this->id_alpza_noticia);

		$copyObj->setIdAlpzaEvento($this->id_alpza_evento);

		$copyObj->setIdAlpzaBeca($this->id_alpza_beca);

		$copyObj->setIdAlpzaPublicacion($this->id_alpza_publicacion);

		$copyObj->setIdAlpzaJunta($this->id_alpza_junta);

		$copyObj->setIdAlpzaComite($this->id_alpza_comite);

		$copyObj->setIdAlpzaCongreso($this->id_alpza_congreso);

		$copyObj->setIdAlpzaInformacion($this->id_alpza_informacion);


		$copyObj->setNew(true);

		$copyObj->setIdAlpzaContenido(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     AlpzaContenido Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     AlpzaContenidoPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new AlpzaContenidoPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a AlpzaMiembro object.
	 *
	 * @param      AlpzaMiembro $v
	 * @return     AlpzaContenido The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setAlpzaMiembro(AlpzaMiembro $v = null)
	{
		if ($v === null) {
			$this->setIdAlpzaMiembro(NULL);
		} else {
			$this->setIdAlpzaMiembro($v->getIdAlpzaMiembro());
		}

		$this->aAlpzaMiembro = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the AlpzaMiembro object, it will not be re-added.
		if ($v !== null) {
			$v->addAlpzaContenido($this);
		}

		return $this;
	}


	/**
	 * Get the associated AlpzaMiembro object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     AlpzaMiembro The associated AlpzaMiembro object.
	 * @throws     PropelException
	 */
	public function getAlpzaMiembro(PropelPDO $con = null)
	{
		if ($this->aAlpzaMiembro === null && ($this->id_alpza_miembro !== null)) {
			$this->aAlpzaMiembro = AlpzaMiembroPeer::retrieveByPk($this->id_alpza_miembro);
			/* The following can be used additionally to
			 guarantee the related object contains a reference
			 to this object.  This level of coupling may, however, be
			 undesirable since it could result in an only partially populated collection
			 in the referenced object.
			 $this->aAlpzaMiembro->addAlpzaContenidos($this);
			 */
		}
		return $this->aAlpzaMiembro;
	}

	/**
	 * Declares an association between this object and a AlpzaNoticia object.
	 *
	 * @param      AlpzaNoticia $v
	 * @return     AlpzaContenido The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setAlpzaNoticia(AlpzaNoticia $v = null)
	{
		if ($v === null) {
			$this->setIdAlpzaNoticia(NULL);
		} else {
			$this->setIdAlpzaNoticia($v->getIdAlpzaNoticia());
		}

		$this->aAlpzaNoticia = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the AlpzaNoticia object, it will not be re-added.
		if ($v !== null) {
			$v->addAlpzaContenido($this);
		}

		return $this;
	}


	/**
	 * Get the associated AlpzaNoticia object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     AlpzaNoticia The associated AlpzaNoticia object.
	 * @throws     PropelException
	 */
	public function getAlpzaNoticia(PropelPDO $con = null)
	{
		if ($this->aAlpzaNoticia === null && ($this->id_alpza_noticia !== null)) {
			$this->aAlpzaNoticia = AlpzaNoticiaPeer::retrieveByPk($this->id_alpza_noticia);
			/* The following can be used additionally to
			 guarantee the related object contains a reference
			 to this object.  This level of coupling may, however, be
			 undesirable since it could result in an only partially populated collection
			 in the referenced object.
			 $this->aAlpzaNoticia->addAlpzaContenidos($this);
			 */
		}
		return $this->aAlpzaNoticia;
	}

	/**
	 * Declares an association between this object and a AlpzaEvento object.
	 *
	 * @param      AlpzaEvento $v
	 * @return     AlpzaContenido The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setAlpzaEvento(AlpzaEvento $v = null)
	{
		if ($v === null) {
			$this->setIdAlpzaEvento(NULL);
		} else {
			$this->setIdAlpzaEvento($v->getIdAlpzaEvento());
		}

		$this->aAlpzaEvento = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the AlpzaEvento object, it will not be re-added.
		if ($v !== null) {
			$v->addAlpzaContenido($this);
		}

		return $this;
	}


	/**
	 * Get the associated AlpzaEvento object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     AlpzaEvento The associated AlpzaEvento object.
	 * @throws     PropelException
	 */
	public function getAlpzaEvento(PropelPDO $con = null)
	{
		if ($this->aAlpzaEvento === null && ($this->id_alpza_evento !== null)) {
			$this->aAlpzaEvento = AlpzaEventoPeer::retrieveByPk($this->id_alpza_evento);
			/* The following can be used additionally to
			 guarantee the related object contains a reference
			 to this object.  This level of coupling may, however, be
			 undesirable since it could result in an only partially populated collection
			 in the referenced object.
			 $this->aAlpzaEvento->addAlpzaContenidos($this);
			 */
		}
		return $this->aAlpzaEvento;
	}

	/**
	 * Declares an association between this object and a AlpzaBeca object.
	 *
	 * @param      AlpzaBeca $v
	 * @return     AlpzaContenido The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setAlpzaBeca(AlpzaBeca $v = null)
	{
		if ($v === null) {
			$this->setIdAlpzaBeca(NULL);
		} else {
			$this->setIdAlpzaBeca($v->getIdAlpzaBeca());
		}

		$this->aAlpzaBeca = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the AlpzaBeca object, it will not be re-added.
		if ($v !== null) {
			$v->addAlpzaContenido($this);
		}

		return $this;
	}


	/**
	 * Get the associated AlpzaBeca object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     AlpzaBeca The associated AlpzaBeca object.
	 * @throws     PropelException
	 */
	public function getAlpzaBeca(PropelPDO $con = null)
	{
		if ($this->aAlpzaBeca === null && ($this->id_alpza_beca !== null)) {
			$this->aAlpzaBeca = AlpzaBecaPeer::retrieveByPk($this->id_alpza_beca);
			/* The following can be used additionally to
			 guarantee the related object contains a reference
			 to this object.  This level of coupling may, however, be
			 undesirable since it could result in an only partially populated collection
			 in the referenced object.
			 $this->aAlpzaBeca->addAlpzaContenidos($this);
			 */
		}
		return $this->aAlpzaBeca;
	}

	/**
	 * Declares an association between this object and a AlpzaPublicacion object.
	 *
	 * @param      AlpzaPublicacion $v
	 * @return     AlpzaContenido The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setAlpzaPublicacion(AlpzaPublicacion $v = null)
	{
		if ($v === null) {
			$this->setIdAlpzaPublicacion(NULL);
		} else {
			$this->setIdAlpzaPublicacion($v->getIdAlpzaPublicacion());
		}

		$this->aAlpzaPublicacion = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the AlpzaPublicacion object, it will not be re-added.
		if ($v !== null) {
			$v->addAlpzaContenido($this);
		}

		return $this;
	}


	/**
	 * Get the associated AlpzaPublicacion object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     AlpzaPublicacion The associated AlpzaPublicacion object.
	 * @throws     PropelException
	 */
	public function getAlpzaPublicacion(PropelPDO $con = null)
	{
		if ($this->aAlpzaPublicacion === null && ($this->id_alpza_publicacion !== null)) {
			$this->aAlpzaPublicacion = AlpzaPublicacionPeer::retrieveByPk($this->id_alpza_publicacion);
			/* The following can be used additionally to
			 guarantee the related object contains a reference
			 to this object.  This level of coupling may, however, be
			 undesirable since it could result in an only partially populated collection
			 in the referenced object.
			 $this->aAlpzaPublicacion->addAlpzaContenidos($this);
			 */
		}
		return $this->aAlpzaPublicacion;
	}

	/**
	 * Declares an association between this object and a AlpzaJunta object.
	 *
	 * @param      AlpzaJunta $v
	 * @return     AlpzaContenido The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setAlpzaJunta(AlpzaJunta $v = null)
	{
		if ($v === null) {
			$this->setIdAlpzaJunta(NULL);
		} else {
			$this->setIdAlpzaJunta($v->getIdAlpzaJunta());
		}

		$this->aAlpzaJunta = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the AlpzaJunta object, it will not be re-added.
		if ($v !== null) {
			$v->addAlpzaContenido($this);
		}

		return $this;
	}


	/**
	 * Get the associated AlpzaJunta object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     AlpzaJunta The associated AlpzaJunta object.
	 * @throws     PropelException
	 */
	public function getAlpzaJunta(PropelPDO $con = null)
	{
		if ($this->aAlpzaJunta === null && ($this->id_alpza_junta !== null)) {
			$this->aAlpzaJunta = AlpzaJuntaPeer::retrieveByPk($this->id_alpza_junta);
			/* The following can be used additionally to
			 guarantee the related object contains a reference
			 to this object.  This level of coupling may, however, be
			 undesirable since it could result in an only partially populated collection
			 in the referenced object.
			 $this->aAlpzaJunta->addAlpzaContenidos($this);
			 */
		}
		return $this->aAlpzaJunta;
	}

	/**
	 * Declares an association between this object and a AlpzaComite object.
	 *
	 * @param      AlpzaComite $v
	 * @return     AlpzaContenido The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setAlpzaComite(AlpzaComite $v = null)
	{
		if ($v === null) {
			$this->setIdAlpzaComite(NULL);
		} else {
			$this->setIdAlpzaComite($v->getIdAlpzaComite());
		}

		$this->aAlpzaComite = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the AlpzaComite object, it will not be re-added.
		if ($v !== null) {
			$v->addAlpzaContenido($this);
		}

		return $this;
	}


	/**
	 * Get the associated AlpzaComite object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     AlpzaComite The associated AlpzaComite object.
	 * @throws     PropelException
	 */
	public function getAlpzaComite(PropelPDO $con = null)
	{
		if ($this->aAlpzaComite === null && ($this->id_alpza_comite !== null)) {
			$this->aAlpzaComite = AlpzaComitePeer::retrieveByPk($this->id_alpza_comite);
			/* The following can be used additionally to
			 guarantee the related object contains a reference
			 to this object.  This level of coupling may, however, be
			 undesirable since it could result in an only partially populated collection
			 in the referenced object.
			 $this->aAlpzaComite->addAlpzaContenidos($this);
			 */
		}
		return $this->aAlpzaComite;
	}

	/**
	 * Declares an association between this object and a AlpzaCongreso object.
	 *
	 * @param      AlpzaCongreso $v
	 * @return     AlpzaContenido The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setAlpzaCongreso(AlpzaCongreso $v = null)
	{
		if ($v === null) {
			$this->setIdAlpzaCongreso(NULL);
		} else {
			$this->setIdAlpzaCongreso($v->getIdAlpzaCongreso());
		}

		$this->aAlpzaCongreso = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the AlpzaCongreso object, it will not be re-added.
		if ($v !== null) {
			$v->addAlpzaContenido($this);
		}

		return $this;
	}


	/**
	 * Get the associated AlpzaCongreso object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     AlpzaCongreso The associated AlpzaCongreso object.
	 * @throws     PropelException
	 */
	public function getAlpzaCongreso(PropelPDO $con = null)
	{
		if ($this->aAlpzaCongreso === null && ($this->id_alpza_congreso !== null)) {
			$this->aAlpzaCongreso = AlpzaCongresoPeer::retrieveByPk($this->id_alpza_congreso);
			/* The following can be used additionally to
			 guarantee the related object contains a reference
			 to this object.  This level of coupling may, however, be
			 undesirable since it could result in an only partially populated collection
			 in the referenced object.
			 $this->aAlpzaCongreso->addAlpzaContenidos($this);
			 */
		}
		return $this->aAlpzaCongreso;
	}

	/**
	 * Declares an association between this object and a AlpzaInformacion object.
	 *
	 * @param      AlpzaInformacion $v
	 * @return     AlpzaContenido The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setAlpzaInformacion(AlpzaInformacion $v = null)
	{
		if ($v === null) {
			$this->setIdAlpzaInformacion(NULL);
		} else {
			$this->setIdAlpzaInformacion($v->getIdAlpzaInformacion());
		}

		$this->aAlpzaInformacion = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the AlpzaInformacion object, it will not be re-added.
		if ($v !== null) {
			$v->addAlpzaContenido($this);
		}

		return $this;
	}


	/**
	 * Get the associated AlpzaInformacion object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     AlpzaInformacion The associated AlpzaInformacion object.
	 * @throws     PropelException
	 */
	public function getAlpzaInformacion(PropelPDO $con = null)
	{
		if ($this->aAlpzaInformacion === null && ($this->id_alpza_informacion !== null)) {
			$this->aAlpzaInformacion = AlpzaInformacionPeer::retrieveByPk($this->id_alpza_informacion);
			/* The following can be used additionally to
			 guarantee the related object contains a reference
			 to this object.  This level of coupling may, however, be
			 undesirable since it could result in an only partially populated collection
			 in the referenced object.
			 $this->aAlpzaInformacion->addAlpzaContenidos($this);
			 */
		}
		return $this->aAlpzaInformacion;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

		$this->aAlpzaMiembro = null;
		$this->aAlpzaNoticia = null;
		$this->aAlpzaEvento = null;
		$this->aAlpzaBeca = null;
		$this->aAlpzaPublicacion = null;
		$this->aAlpzaJunta = null;
		$this->aAlpzaComite = null;
		$this->aAlpzaCongreso = null;
		$this->aAlpzaInformacion = null;
	}

	// symfony_behaviors behavior

	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
		if (!$callable = sfMixer::getCallable('BaseAlpzaContenido:'.$method))
		{
			throw new sfException(sprintf('Call to undefined method BaseAlpzaContenido::%s', $method));
		}

		array_unshift($arguments, $this);

		return call_user_func_array($callable, $arguments);
	}

} // BaseAlpzaContenido
