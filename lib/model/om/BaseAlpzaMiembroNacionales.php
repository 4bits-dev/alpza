<?php

/**
 * Base class that represents a row from the 'alpza_miembro_nacionales' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Sat Nov 24 15:15:37 2012
 *
 * @package    lib.model.om
 */
abstract class BaseAlpzaMiembroNacionales extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        AlpzaMiembroNacionalesPeer
	 */
	protected static $peer;

	/**
	 * The value for the id_alpza_miembro_nacionales field.
	 * @var        int
	 */
	protected $id_alpza_miembro_nacionales;

	/**
	 * The value for the alpza_miembro_id_alpza_miembro field.
	 * @var        int
	 */
	protected $alpza_miembro_id_alpza_miembro;

	/**
	 * The value for the nombre_formal field.
	 * @var        string
	 */
	protected $nombre_formal;

	/**
	 * The value for the sigla field.
	 * @var        string
	 */
	protected $sigla;

	/**
	 * The value for the numero_identificacion field.
	 * @var        string
	 */
	protected $numero_identificacion;

	/**
	 * The value for the ano_fundacion field.
	 * @var        string
	 */
	protected $ano_fundacion;

	/**
	 * The value for the ano_ingreso_alpza field.
	 * @var        string
	 */
	protected $ano_ingreso_alpza;

	/**
	 * The value for the director_nombre field.
	 * @var        string
	 */
	protected $director_nombre;

	/**
	 * The value for the director_email field.
	 * @var        string
	 */
	protected $director_email;

	/**
	 * The value for the personal_permanente field.
	 * @var        string
	 */
	protected $personal_permanente;

	/**
	 * The value for the personal_temporal field.
	 * @var        string
	 */
	protected $personal_temporal;

	/**
	 * The value for the delegado_nombre field.
	 * @var        string
	 */
	protected $delegado_nombre;

	/**
	 * The value for the delegado_apellido field.
	 * @var        string
	 */
	protected $delegado_apellido;

	/**
	 * The value for the delegado_profesion field.
	 * @var        string
	 */
	protected $delegado_profesion;

	/**
	 * The value for the delegado_cargo field.
	 * @var        string
	 */
	protected $delegado_cargo;

	/**
	 * The value for the delegado_email field.
	 * @var        string
	 */
	protected $delegado_email;

	/**
	 * The value for the logo field.
	 * @var        string
	 */
	protected $logo;

	/**
	 * The value for the direccion field.
	 * @var        string
	 */
	protected $direccion;

	/**
	 * The value for the codigo_postal field.
	 * @var        string
	 */
	protected $codigo_postal;

	/**
	 * The value for the pais field.
	 * @var        string
	 */
	protected $pais;

	/**
	 * The value for the telefono_cod_ciudad field.
	 * @var        string
	 */
	protected $telefono_cod_ciudad;

	/**
	 * The value for the telefono_cod_pais field.
	 * @var        string
	 */
	protected $telefono_cod_pais;

	/**
	 * The value for the telefono field.
	 * @var        string
	 */
	protected $telefono;

	/**
	 * The value for the fax field.
	 * @var        string
	 */
	protected $fax;

	/**
	 * The value for the celular field.
	 * @var        string
	 */
	protected $celular;

	/**
	 * The value for the email field.
	 * @var        string
	 */
	protected $email;

	/**
	 * The value for the sitio_web field.
	 * @var        string
	 */
	protected $sitio_web;

	/**
	 * The value for the naturaleza_juridica_publica field.
	 * @var        int
	 */
	protected $naturaleza_juridica_publica;

	/**
	 * The value for the naturaleza_juridica_privada field.
	 * @var        int
	 */
	protected $naturaleza_juridica_privada;

	/**
	 * The value for the naturaleza_juridica_mixta field.
	 * @var        int
	 */
	protected $naturaleza_juridica_mixta;

	/**
	 * The value for the propietario field.
	 * @var        string
	 */
	protected $propietario;

	/**
	 * The value for the lucro field.
	 * @var        int
	 */
	protected $lucro;

	/**
	 * The value for the numero_instituciones_miembro field.
	 * @var        string
	 */
	protected $numero_instituciones_miembro;

	/**
	 * The value for the porcentaje_covertura_nacional field.
	 * @var        string
	 */
	protected $porcentaje_covertura_nacional;

	/**
	 * The value for the lista_instituciones_miembro field.
	 * @var        string
	 */
	protected $lista_instituciones_miembro;

	/**
	 * The value for the estatutos field.
	 * @var        string
	 */
	protected $estatutos;

	/**
	 * The value for the organigrama field.
	 * @var        string
	 */
	protected $organigrama;

	/**
	 * The value for the otra_asociacion field.
	 * @var        string
	 */
	protected $otra_asociacion;

	/**
	 * The value for the descripcion field.
	 * @var        string
	 */
	protected $descripcion;

	/**
	 * The value for the mision field.
	 * @var        string
	 */
	protected $mision;

	/**
	 * The value for the vision field.
	 * @var        string
	 */
	protected $vision;

	/**
	 * The value for the objetivo field.
	 * @var        string
	 */
	protected $objetivo;

	/**
	 * The value for the panorama_general field.
	 * @var        string
	 */
	protected $panorama_general;

	/**
	 * The value for the proyectos field.
	 * @var        string
	 */
	protected $proyectos;

	/**
	 * The value for the area_trabajo field.
	 * @var        string
	 */
	protected $area_trabajo;

	/**
	 * The value for the considera_apoyo_alpza field.
	 * @var        string
	 */
	protected $considera_apoyo_alpza;

	/**
	 * @var        AlpzaMiembro
	 */
	protected $aAlpzaMiembro;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior

	const PEER = 'AlpzaMiembroNacionalesPeer';

	/**
	 * Get the [id_alpza_miembro_nacionales] column value.
	 *
	 * @return     int
	 */
	public function getIdAlpzaMiembroNacionales()
	{
		return $this->id_alpza_miembro_nacionales;
	}

	/**
	 * Get the [alpza_miembro_id_alpza_miembro] column value.
	 *
	 * @return     int
	 */
	public function getAlpzaMiembroIdAlpzaMiembro()
	{
		return $this->alpza_miembro_id_alpza_miembro;
	}

	/**
	 * Get the [nombre_formal] column value.
	 *
	 * @return     string
	 */
	public function getNombreFormal()
	{
		return $this->nombre_formal;
	}

	/**
	 * Get the [sigla] column value.
	 *
	 * @return     string
	 */
	public function getSigla()
	{
		return $this->sigla;
	}

	/**
	 * Get the [numero_identificacion] column value.
	 *
	 * @return     string
	 */
	public function getNumeroIdentificacion()
	{
		return $this->numero_identificacion;
	}

	/**
	 * Get the [optionally formatted] temporal [ano_fundacion] column value.
	 *
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getAnoFundacion($format = 'Y-m-d')
	{
		if ($this->ano_fundacion === null) {
			return null;
		}


		if ($this->ano_fundacion === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->ano_fundacion);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->ano_fundacion, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [ano_ingreso_alpza] column value.
	 *
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getAnoIngresoAlpza($format = 'Y-m-d')
	{
		if ($this->ano_ingreso_alpza === null) {
			return null;
		}


		if ($this->ano_ingreso_alpza === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->ano_ingreso_alpza);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->ano_ingreso_alpza, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [director_nombre] column value.
	 *
	 * @return     string
	 */
	public function getDirectorNombre()
	{
		return $this->director_nombre;
	}

	/**
	 * Get the [director_email] column value.
	 *
	 * @return     string
	 */
	public function getDirectorEmail()
	{
		return $this->director_email;
	}

	/**
	 * Get the [personal_permanente] column value.
	 *
	 * @return     string
	 */
	public function getPersonalPermanente()
	{
		return $this->personal_permanente;
	}

	/**
	 * Get the [personal_temporal] column value.
	 *
	 * @return     string
	 */
	public function getPersonalTemporal()
	{
		return $this->personal_temporal;
	}

	/**
	 * Get the [delegado_nombre] column value.
	 *
	 * @return     string
	 */
	public function getDelegadoNombre()
	{
		return $this->delegado_nombre;
	}

	/**
	 * Get the [delegado_apellido] column value.
	 *
	 * @return     string
	 */
	public function getDelegadoApellido()
	{
		return $this->delegado_apellido;
	}

	/**
	 * Get the [delegado_profesion] column value.
	 *
	 * @return     string
	 */
	public function getDelegadoProfesion()
	{
		return $this->delegado_profesion;
	}

	/**
	 * Get the [delegado_cargo] column value.
	 *
	 * @return     string
	 */
	public function getDelegadoCargo()
	{
		return $this->delegado_cargo;
	}

	/**
	 * Get the [delegado_email] column value.
	 *
	 * @return     string
	 */
	public function getDelegadoEmail()
	{
		return $this->delegado_email;
	}

	/**
	 * Get the [logo] column value.
	 *
	 * @return     string
	 */
	public function getLogo()
	{
		return $this->logo;
	}

	/**
	 * Get the [direccion] column value.
	 *
	 * @return     string
	 */
	public function getDireccion()
	{
		return $this->direccion;
	}

	/**
	 * Get the [codigo_postal] column value.
	 *
	 * @return     string
	 */
	public function getCodigoPostal()
	{
		return $this->codigo_postal;
	}

	/**
	 * Get the [pais] column value.
	 *
	 * @return     string
	 */
	public function getPais()
	{
		return $this->pais;
	}

	/**
	 * Get the [telefono_cod_ciudad] column value.
	 *
	 * @return     string
	 */
	public function getTelefonoCodCiudad()
	{
		return $this->telefono_cod_ciudad;
	}

	/**
	 * Get the [telefono_cod_pais] column value.
	 *
	 * @return     string
	 */
	public function getTelefonoCodPais()
	{
		return $this->telefono_cod_pais;
	}

	/**
	 * Get the [telefono] column value.
	 *
	 * @return     string
	 */
	public function getTelefono()
	{
		return $this->telefono;
	}

	/**
	 * Get the [fax] column value.
	 *
	 * @return     string
	 */
	public function getFax()
	{
		return $this->fax;
	}

	/**
	 * Get the [celular] column value.
	 *
	 * @return     string
	 */
	public function getCelular()
	{
		return $this->celular;
	}

	/**
	 * Get the [email] column value.
	 *
	 * @return     string
	 */
	public function getEmail()
	{
		return $this->email;
	}

	/**
	 * Get the [sitio_web] column value.
	 *
	 * @return     string
	 */
	public function getSitioWeb()
	{
		return $this->sitio_web;
	}

	/**
	 * Get the [naturaleza_juridica_publica] column value.
	 *
	 * @return     int
	 */
	public function getNaturalezaJuridicaPublica()
	{
		return $this->naturaleza_juridica_publica;
	}

	/**
	 * Get the [naturaleza_juridica_privada] column value.
	 *
	 * @return     int
	 */
	public function getNaturalezaJuridicaPrivada()
	{
		return $this->naturaleza_juridica_privada;
	}

	/**
	 * Get the [naturaleza_juridica_mixta] column value.
	 *
	 * @return     int
	 */
	public function getNaturalezaJuridicaMixta()
	{
		return $this->naturaleza_juridica_mixta;
	}

	/**
	 * Get the [propietario] column value.
	 *
	 * @return     string
	 */
	public function getPropietario()
	{
		return $this->propietario;
	}

	/**
	 * Get the [lucro] column value.
	 *
	 * @return     int
	 */
	public function getLucro()
	{
		return $this->lucro;
	}

	/**
	 * Get the [numero_instituciones_miembro] column value.
	 *
	 * @return     string
	 */
	public function getNumeroInstitucionesMiembro()
	{
		return $this->numero_instituciones_miembro;
	}

	/**
	 * Get the [porcentaje_covertura_nacional] column value.
	 *
	 * @return     string
	 */
	public function getPorcentajeCoverturaNacional()
	{
		return $this->porcentaje_covertura_nacional;
	}

	/**
	 * Get the [lista_instituciones_miembro] column value.
	 *
	 * @return     string
	 */
	public function getListaInstitucionesMiembro()
	{
		return $this->lista_instituciones_miembro;
	}

	/**
	 * Get the [estatutos] column value.
	 *
	 * @return     string
	 */
	public function getEstatutos()
	{
		return $this->estatutos;
	}

	/**
	 * Get the [organigrama] column value.
	 *
	 * @return     string
	 */
	public function getOrganigrama()
	{
		return $this->organigrama;
	}

	/**
	 * Get the [otra_asociacion] column value.
	 *
	 * @return     string
	 */
	public function getOtraAsociacion()
	{
		return $this->otra_asociacion;
	}

	/**
	 * Get the [descripcion] column value.
	 *
	 * @return     string
	 */
	public function getDescripcion()
	{
		return $this->descripcion;
	}

	/**
	 * Get the [mision] column value.
	 *
	 * @return     string
	 */
	public function getMision()
	{
		return $this->mision;
	}

	/**
	 * Get the [vision] column value.
	 *
	 * @return     string
	 */
	public function getVision()
	{
		return $this->vision;
	}

	/**
	 * Get the [objetivo] column value.
	 *
	 * @return     string
	 */
	public function getObjetivo()
	{
		return $this->objetivo;
	}

	/**
	 * Get the [panorama_general] column value.
	 *
	 * @return     string
	 */
	public function getPanoramaGeneral()
	{
		return $this->panorama_general;
	}

	/**
	 * Get the [proyectos] column value.
	 *
	 * @return     string
	 */
	public function getProyectos()
	{
		return $this->proyectos;
	}

	/**
	 * Get the [area_trabajo] column value.
	 *
	 * @return     string
	 */
	public function getAreaTrabajo()
	{
		return $this->area_trabajo;
	}

	/**
	 * Get the [considera_apoyo_alpza] column value.
	 *
	 * @return     string
	 */
	public function getConsideraApoyoAlpza()
	{
		return $this->considera_apoyo_alpza;
	}

	/**
	 * Set the value of [id_alpza_miembro_nacionales] column.
	 *
	 * @param      int $v new value
	 * @return     AlpzaMiembroNacionales The current object (for fluent API support)
	 */
	public function setIdAlpzaMiembroNacionales($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_alpza_miembro_nacionales !== $v) {
			$this->id_alpza_miembro_nacionales = $v;
			$this->modifiedColumns[] = AlpzaMiembroNacionalesPeer::ID_ALPZA_MIEMBRO_NACIONALES;
		}

		return $this;
	} // setIdAlpzaMiembroNacionales()

	/**
	 * Set the value of [alpza_miembro_id_alpza_miembro] column.
	 *
	 * @param      int $v new value
	 * @return     AlpzaMiembroNacionales The current object (for fluent API support)
	 */
	public function setAlpzaMiembroIdAlpzaMiembro($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->alpza_miembro_id_alpza_miembro !== $v) {
			$this->alpza_miembro_id_alpza_miembro = $v;
			$this->modifiedColumns[] = AlpzaMiembroNacionalesPeer::ALPZA_MIEMBRO_ID_ALPZA_MIEMBRO;
		}

		if ($this->aAlpzaMiembro !== null && $this->aAlpzaMiembro->getIdAlpzaMiembro() !== $v) {
			$this->aAlpzaMiembro = null;
		}

		return $this;
	} // setAlpzaMiembroIdAlpzaMiembro()

	/**
	 * Set the value of [nombre_formal] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroNacionales The current object (for fluent API support)
	 */
	public function setNombreFormal($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nombre_formal !== $v) {
			$this->nombre_formal = $v;
			$this->modifiedColumns[] = AlpzaMiembroNacionalesPeer::NOMBRE_FORMAL;
		}

		return $this;
	} // setNombreFormal()

	/**
	 * Set the value of [sigla] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroNacionales The current object (for fluent API support)
	 */
	public function setSigla($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->sigla !== $v) {
			$this->sigla = $v;
			$this->modifiedColumns[] = AlpzaMiembroNacionalesPeer::SIGLA;
		}

		return $this;
	} // setSigla()

	/**
	 * Set the value of [numero_identificacion] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroNacionales The current object (for fluent API support)
	 */
	public function setNumeroIdentificacion($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->numero_identificacion !== $v) {
			$this->numero_identificacion = $v;
			$this->modifiedColumns[] = AlpzaMiembroNacionalesPeer::NUMERO_IDENTIFICACION;
		}

		return $this;
	} // setNumeroIdentificacion()

	/**
	 * Sets the value of [ano_fundacion] column to a normalized version of the date/time value specified.
	 *
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     AlpzaMiembroNacionales The current object (for fluent API support)
	 */
	public function setAnoFundacion($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->ano_fundacion !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->ano_fundacion !== null && $tmpDt = new DateTime($this->ano_fundacion)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match
			)
			{
				$this->ano_fundacion = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = AlpzaMiembroNacionalesPeer::ANO_FUNDACION;
			}
		} // if either are not null

		return $this;
	} // setAnoFundacion()

	/**
	 * Sets the value of [ano_ingreso_alpza] column to a normalized version of the date/time value specified.
	 *
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     AlpzaMiembroNacionales The current object (for fluent API support)
	 */
	public function setAnoIngresoAlpza($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->ano_ingreso_alpza !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->ano_ingreso_alpza !== null && $tmpDt = new DateTime($this->ano_ingreso_alpza)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match
			)
			{
				$this->ano_ingreso_alpza = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = AlpzaMiembroNacionalesPeer::ANO_INGRESO_ALPZA;
			}
		} // if either are not null

		return $this;
	} // setAnoIngresoAlpza()

	/**
	 * Set the value of [director_nombre] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroNacionales The current object (for fluent API support)
	 */
	public function setDirectorNombre($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->director_nombre !== $v) {
			$this->director_nombre = $v;
			$this->modifiedColumns[] = AlpzaMiembroNacionalesPeer::DIRECTOR_NOMBRE;
		}

		return $this;
	} // setDirectorNombre()

	/**
	 * Set the value of [director_email] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroNacionales The current object (for fluent API support)
	 */
	public function setDirectorEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->director_email !== $v) {
			$this->director_email = $v;
			$this->modifiedColumns[] = AlpzaMiembroNacionalesPeer::DIRECTOR_EMAIL;
		}

		return $this;
	} // setDirectorEmail()

	/**
	 * Set the value of [personal_permanente] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroNacionales The current object (for fluent API support)
	 */
	public function setPersonalPermanente($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->personal_permanente !== $v) {
			$this->personal_permanente = $v;
			$this->modifiedColumns[] = AlpzaMiembroNacionalesPeer::PERSONAL_PERMANENTE;
		}

		return $this;
	} // setPersonalPermanente()

	/**
	 * Set the value of [personal_temporal] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroNacionales The current object (for fluent API support)
	 */
	public function setPersonalTemporal($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->personal_temporal !== $v) {
			$this->personal_temporal = $v;
			$this->modifiedColumns[] = AlpzaMiembroNacionalesPeer::PERSONAL_TEMPORAL;
		}

		return $this;
	} // setPersonalTemporal()

	/**
	 * Set the value of [delegado_nombre] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroNacionales The current object (for fluent API support)
	 */
	public function setDelegadoNombre($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->delegado_nombre !== $v) {
			$this->delegado_nombre = $v;
			$this->modifiedColumns[] = AlpzaMiembroNacionalesPeer::DELEGADO_NOMBRE;
		}

		return $this;
	} // setDelegadoNombre()

	/**
	 * Set the value of [delegado_apellido] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroNacionales The current object (for fluent API support)
	 */
	public function setDelegadoApellido($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->delegado_apellido !== $v) {
			$this->delegado_apellido = $v;
			$this->modifiedColumns[] = AlpzaMiembroNacionalesPeer::DELEGADO_APELLIDO;
		}

		return $this;
	} // setDelegadoApellido()

	/**
	 * Set the value of [delegado_profesion] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroNacionales The current object (for fluent API support)
	 */
	public function setDelegadoProfesion($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->delegado_profesion !== $v) {
			$this->delegado_profesion = $v;
			$this->modifiedColumns[] = AlpzaMiembroNacionalesPeer::DELEGADO_PROFESION;
		}

		return $this;
	} // setDelegadoProfesion()

	/**
	 * Set the value of [delegado_cargo] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroNacionales The current object (for fluent API support)
	 */
	public function setDelegadoCargo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->delegado_cargo !== $v) {
			$this->delegado_cargo = $v;
			$this->modifiedColumns[] = AlpzaMiembroNacionalesPeer::DELEGADO_CARGO;
		}

		return $this;
	} // setDelegadoCargo()

	/**
	 * Set the value of [delegado_email] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroNacionales The current object (for fluent API support)
	 */
	public function setDelegadoEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->delegado_email !== $v) {
			$this->delegado_email = $v;
			$this->modifiedColumns[] = AlpzaMiembroNacionalesPeer::DELEGADO_EMAIL;
		}

		return $this;
	} // setDelegadoEmail()

	/**
	 * Set the value of [logo] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroNacionales The current object (for fluent API support)
	 */
	public function setLogo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->logo !== $v) {
			$this->logo = $v;
			$this->modifiedColumns[] = AlpzaMiembroNacionalesPeer::LOGO;
		}

		return $this;
	} // setLogo()

	/**
	 * Set the value of [direccion] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroNacionales The current object (for fluent API support)
	 */
	public function setDireccion($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->direccion !== $v) {
			$this->direccion = $v;
			$this->modifiedColumns[] = AlpzaMiembroNacionalesPeer::DIRECCION;
		}

		return $this;
	} // setDireccion()

	/**
	 * Set the value of [codigo_postal] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroNacionales The current object (for fluent API support)
	 */
	public function setCodigoPostal($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->codigo_postal !== $v) {
			$this->codigo_postal = $v;
			$this->modifiedColumns[] = AlpzaMiembroNacionalesPeer::CODIGO_POSTAL;
		}

		return $this;
	} // setCodigoPostal()

	/**
	 * Set the value of [pais] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroNacionales The current object (for fluent API support)
	 */
	public function setPais($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pais !== $v) {
			$this->pais = $v;
			$this->modifiedColumns[] = AlpzaMiembroNacionalesPeer::PAIS;
		}

		return $this;
	} // setPais()

	/**
	 * Set the value of [telefono_cod_ciudad] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroNacionales The current object (for fluent API support)
	 */
	public function setTelefonoCodCiudad($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->telefono_cod_ciudad !== $v) {
			$this->telefono_cod_ciudad = $v;
			$this->modifiedColumns[] = AlpzaMiembroNacionalesPeer::TELEFONO_COD_CIUDAD;
		}

		return $this;
	} // setTelefonoCodCiudad()

	/**
	 * Set the value of [telefono_cod_pais] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroNacionales The current object (for fluent API support)
	 */
	public function setTelefonoCodPais($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->telefono_cod_pais !== $v) {
			$this->telefono_cod_pais = $v;
			$this->modifiedColumns[] = AlpzaMiembroNacionalesPeer::TELEFONO_COD_PAIS;
		}

		return $this;
	} // setTelefonoCodPais()

	/**
	 * Set the value of [telefono] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroNacionales The current object (for fluent API support)
	 */
	public function setTelefono($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->telefono !== $v) {
			$this->telefono = $v;
			$this->modifiedColumns[] = AlpzaMiembroNacionalesPeer::TELEFONO;
		}

		return $this;
	} // setTelefono()

	/**
	 * Set the value of [fax] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroNacionales The current object (for fluent API support)
	 */
	public function setFax($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fax !== $v) {
			$this->fax = $v;
			$this->modifiedColumns[] = AlpzaMiembroNacionalesPeer::FAX;
		}

		return $this;
	} // setFax()

	/**
	 * Set the value of [celular] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroNacionales The current object (for fluent API support)
	 */
	public function setCelular($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->celular !== $v) {
			$this->celular = $v;
			$this->modifiedColumns[] = AlpzaMiembroNacionalesPeer::CELULAR;
		}

		return $this;
	} // setCelular()

	/**
	 * Set the value of [email] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroNacionales The current object (for fluent API support)
	 */
	public function setEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->email !== $v) {
			$this->email = $v;
			$this->modifiedColumns[] = AlpzaMiembroNacionalesPeer::EMAIL;
		}

		return $this;
	} // setEmail()

	/**
	 * Set the value of [sitio_web] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroNacionales The current object (for fluent API support)
	 */
	public function setSitioWeb($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->sitio_web !== $v) {
			$this->sitio_web = $v;
			$this->modifiedColumns[] = AlpzaMiembroNacionalesPeer::SITIO_WEB;
		}

		return $this;
	} // setSitioWeb()

	/**
	 * Set the value of [naturaleza_juridica_publica] column.
	 *
	 * @param      int $v new value
	 * @return     AlpzaMiembroNacionales The current object (for fluent API support)
	 */
	public function setNaturalezaJuridicaPublica($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->naturaleza_juridica_publica !== $v) {
			$this->naturaleza_juridica_publica = $v;
			$this->modifiedColumns[] = AlpzaMiembroNacionalesPeer::NATURALEZA_JURIDICA_PUBLICA;
		}

		return $this;
	} // setNaturalezaJuridicaPublica()

	/**
	 * Set the value of [naturaleza_juridica_privada] column.
	 *
	 * @param      int $v new value
	 * @return     AlpzaMiembroNacionales The current object (for fluent API support)
	 */
	public function setNaturalezaJuridicaPrivada($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->naturaleza_juridica_privada !== $v) {
			$this->naturaleza_juridica_privada = $v;
			$this->modifiedColumns[] = AlpzaMiembroNacionalesPeer::NATURALEZA_JURIDICA_PRIVADA;
		}

		return $this;
	} // setNaturalezaJuridicaPrivada()

	/**
	 * Set the value of [naturaleza_juridica_mixta] column.
	 *
	 * @param      int $v new value
	 * @return     AlpzaMiembroNacionales The current object (for fluent API support)
	 */
	public function setNaturalezaJuridicaMixta($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->naturaleza_juridica_mixta !== $v) {
			$this->naturaleza_juridica_mixta = $v;
			$this->modifiedColumns[] = AlpzaMiembroNacionalesPeer::NATURALEZA_JURIDICA_MIXTA;
		}

		return $this;
	} // setNaturalezaJuridicaMixta()

	/**
	 * Set the value of [propietario] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroNacionales The current object (for fluent API support)
	 */
	public function setPropietario($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->propietario !== $v) {
			$this->propietario = $v;
			$this->modifiedColumns[] = AlpzaMiembroNacionalesPeer::PROPIETARIO;
		}

		return $this;
	} // setPropietario()

	/**
	 * Set the value of [lucro] column.
	 *
	 * @param      int $v new value
	 * @return     AlpzaMiembroNacionales The current object (for fluent API support)
	 */
	public function setLucro($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->lucro !== $v) {
			$this->lucro = $v;
			$this->modifiedColumns[] = AlpzaMiembroNacionalesPeer::LUCRO;
		}

		return $this;
	} // setLucro()

	/**
	 * Set the value of [numero_instituciones_miembro] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroNacionales The current object (for fluent API support)
	 */
	public function setNumeroInstitucionesMiembro($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->numero_instituciones_miembro !== $v) {
			$this->numero_instituciones_miembro = $v;
			$this->modifiedColumns[] = AlpzaMiembroNacionalesPeer::NUMERO_INSTITUCIONES_MIEMBRO;
		}

		return $this;
	} // setNumeroInstitucionesMiembro()

	/**
	 * Set the value of [porcentaje_covertura_nacional] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroNacionales The current object (for fluent API support)
	 */
	public function setPorcentajeCoverturaNacional($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->porcentaje_covertura_nacional !== $v) {
			$this->porcentaje_covertura_nacional = $v;
			$this->modifiedColumns[] = AlpzaMiembroNacionalesPeer::PORCENTAJE_COVERTURA_NACIONAL;
		}

		return $this;
	} // setPorcentajeCoverturaNacional()

	/**
	 * Set the value of [lista_instituciones_miembro] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroNacionales The current object (for fluent API support)
	 */
	public function setListaInstitucionesMiembro($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->lista_instituciones_miembro !== $v) {
			$this->lista_instituciones_miembro = $v;
			$this->modifiedColumns[] = AlpzaMiembroNacionalesPeer::LISTA_INSTITUCIONES_MIEMBRO;
		}

		return $this;
	} // setListaInstitucionesMiembro()

	/**
	 * Set the value of [estatutos] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroNacionales The current object (for fluent API support)
	 */
	public function setEstatutos($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->estatutos !== $v) {
			$this->estatutos = $v;
			$this->modifiedColumns[] = AlpzaMiembroNacionalesPeer::ESTATUTOS;
		}

		return $this;
	} // setEstatutos()

	/**
	 * Set the value of [organigrama] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroNacionales The current object (for fluent API support)
	 */
	public function setOrganigrama($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->organigrama !== $v) {
			$this->organigrama = $v;
			$this->modifiedColumns[] = AlpzaMiembroNacionalesPeer::ORGANIGRAMA;
		}

		return $this;
	} // setOrganigrama()

	/**
	 * Set the value of [otra_asociacion] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroNacionales The current object (for fluent API support)
	 */
	public function setOtraAsociacion($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->otra_asociacion !== $v) {
			$this->otra_asociacion = $v;
			$this->modifiedColumns[] = AlpzaMiembroNacionalesPeer::OTRA_ASOCIACION;
		}

		return $this;
	} // setOtraAsociacion()

	/**
	 * Set the value of [descripcion] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroNacionales The current object (for fluent API support)
	 */
	public function setDescripcion($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->descripcion !== $v) {
			$this->descripcion = $v;
			$this->modifiedColumns[] = AlpzaMiembroNacionalesPeer::DESCRIPCION;
		}

		return $this;
	} // setDescripcion()

	/**
	 * Set the value of [mision] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroNacionales The current object (for fluent API support)
	 */
	public function setMision($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->mision !== $v) {
			$this->mision = $v;
			$this->modifiedColumns[] = AlpzaMiembroNacionalesPeer::MISION;
		}

		return $this;
	} // setMision()

	/**
	 * Set the value of [vision] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroNacionales The current object (for fluent API support)
	 */
	public function setVision($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->vision !== $v) {
			$this->vision = $v;
			$this->modifiedColumns[] = AlpzaMiembroNacionalesPeer::VISION;
		}

		return $this;
	} // setVision()

	/**
	 * Set the value of [objetivo] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroNacionales The current object (for fluent API support)
	 */
	public function setObjetivo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->objetivo !== $v) {
			$this->objetivo = $v;
			$this->modifiedColumns[] = AlpzaMiembroNacionalesPeer::OBJETIVO;
		}

		return $this;
	} // setObjetivo()

	/**
	 * Set the value of [panorama_general] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroNacionales The current object (for fluent API support)
	 */
	public function setPanoramaGeneral($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->panorama_general !== $v) {
			$this->panorama_general = $v;
			$this->modifiedColumns[] = AlpzaMiembroNacionalesPeer::PANORAMA_GENERAL;
		}

		return $this;
	} // setPanoramaGeneral()

	/**
	 * Set the value of [proyectos] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroNacionales The current object (for fluent API support)
	 */
	public function setProyectos($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->proyectos !== $v) {
			$this->proyectos = $v;
			$this->modifiedColumns[] = AlpzaMiembroNacionalesPeer::PROYECTOS;
		}

		return $this;
	} // setProyectos()

	/**
	 * Set the value of [area_trabajo] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroNacionales The current object (for fluent API support)
	 */
	public function setAreaTrabajo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->area_trabajo !== $v) {
			$this->area_trabajo = $v;
			$this->modifiedColumns[] = AlpzaMiembroNacionalesPeer::AREA_TRABAJO;
		}

		return $this;
	} // setAreaTrabajo()

	/**
	 * Set the value of [considera_apoyo_alpza] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroNacionales The current object (for fluent API support)
	 */
	public function setConsideraApoyoAlpza($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->considera_apoyo_alpza !== $v) {
			$this->considera_apoyo_alpza = $v;
			$this->modifiedColumns[] = AlpzaMiembroNacionalesPeer::CONSIDERA_APOYO_ALPZA;
		}

		return $this;
	} // setConsideraApoyoAlpza()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id_alpza_miembro_nacionales = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->alpza_miembro_id_alpza_miembro = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->nombre_formal = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->sigla = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->numero_identificacion = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->ano_fundacion = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->ano_ingreso_alpza = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->director_nombre = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->director_email = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->personal_permanente = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->personal_temporal = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->delegado_nombre = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->delegado_apellido = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->delegado_profesion = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->delegado_cargo = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->delegado_email = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->logo = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->direccion = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->codigo_postal = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->pais = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->telefono_cod_ciudad = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->telefono_cod_pais = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->telefono = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->fax = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->celular = ($row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
			$this->email = ($row[$startcol + 25] !== null) ? (string) $row[$startcol + 25] : null;
			$this->sitio_web = ($row[$startcol + 26] !== null) ? (string) $row[$startcol + 26] : null;
			$this->naturaleza_juridica_publica = ($row[$startcol + 27] !== null) ? (int) $row[$startcol + 27] : null;
			$this->naturaleza_juridica_privada = ($row[$startcol + 28] !== null) ? (int) $row[$startcol + 28] : null;
			$this->naturaleza_juridica_mixta = ($row[$startcol + 29] !== null) ? (int) $row[$startcol + 29] : null;
			$this->propietario = ($row[$startcol + 30] !== null) ? (string) $row[$startcol + 30] : null;
			$this->lucro = ($row[$startcol + 31] !== null) ? (int) $row[$startcol + 31] : null;
			$this->numero_instituciones_miembro = ($row[$startcol + 32] !== null) ? (string) $row[$startcol + 32] : null;
			$this->porcentaje_covertura_nacional = ($row[$startcol + 33] !== null) ? (string) $row[$startcol + 33] : null;
			$this->lista_instituciones_miembro = ($row[$startcol + 34] !== null) ? (string) $row[$startcol + 34] : null;
			$this->estatutos = ($row[$startcol + 35] !== null) ? (string) $row[$startcol + 35] : null;
			$this->organigrama = ($row[$startcol + 36] !== null) ? (string) $row[$startcol + 36] : null;
			$this->otra_asociacion = ($row[$startcol + 37] !== null) ? (string) $row[$startcol + 37] : null;
			$this->descripcion = ($row[$startcol + 38] !== null) ? (string) $row[$startcol + 38] : null;
			$this->mision = ($row[$startcol + 39] !== null) ? (string) $row[$startcol + 39] : null;
			$this->vision = ($row[$startcol + 40] !== null) ? (string) $row[$startcol + 40] : null;
			$this->objetivo = ($row[$startcol + 41] !== null) ? (string) $row[$startcol + 41] : null;
			$this->panorama_general = ($row[$startcol + 42] !== null) ? (string) $row[$startcol + 42] : null;
			$this->proyectos = ($row[$startcol + 43] !== null) ? (string) $row[$startcol + 43] : null;
			$this->area_trabajo = ($row[$startcol + 44] !== null) ? (string) $row[$startcol + 44] : null;
			$this->considera_apoyo_alpza = ($row[$startcol + 45] !== null) ? (string) $row[$startcol + 45] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 46; // 46 = AlpzaMiembroNacionalesPeer::NUM_COLUMNS - AlpzaMiembroNacionalesPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating AlpzaMiembroNacionales object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aAlpzaMiembro !== null && $this->alpza_miembro_id_alpza_miembro !== $this->aAlpzaMiembro->getIdAlpzaMiembro()) {
			$this->aAlpzaMiembro = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(AlpzaMiembroNacionalesPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = AlpzaMiembroNacionalesPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aAlpzaMiembro = null;
		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(AlpzaMiembroNacionalesPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseAlpzaMiembroNacionales:delete:pre') as $callable)
			{
				if (call_user_func($callable, $this, $con))
				{
					$con->commit();
						
					return;
				}
			}

			if ($ret) {
				AlpzaMiembroNacionalesPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseAlpzaMiembroNacionales:delete:post') as $callable)
				{
					call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(AlpzaMiembroNacionalesPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseAlpzaMiembroNacionales:save:pre') as $callable)
			{
				if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
				{
					$con->commit();
						
					return $affectedRows;
				}
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseAlpzaMiembroNacionales:save:post') as $callable)
				{
					call_user_func($callable, $this, $con, $affectedRows);
				}

				AlpzaMiembroNacionalesPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aAlpzaMiembro !== null) {
				if ($this->aAlpzaMiembro->isModified() || $this->aAlpzaMiembro->isNew()) {
					$affectedRows += $this->aAlpzaMiembro->save($con);
				}
				$this->setAlpzaMiembro($this->aAlpzaMiembro);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = AlpzaMiembroNacionalesPeer::ID_ALPZA_MIEMBRO_NACIONALES;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = AlpzaMiembroNacionalesPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
					// should always be true here (even though technically
					// BasePeer::doInsert() can insert multiple rows).

					$this->setIdAlpzaMiembroNacionales($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += AlpzaMiembroNacionalesPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aAlpzaMiembro !== null) {
				if (!$this->aAlpzaMiembro->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aAlpzaMiembro->getValidationFailures());
				}
			}


			if (($retval = AlpzaMiembroNacionalesPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = AlpzaMiembroNacionalesPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getIdAlpzaMiembroNacionales();
				break;
			case 1:
				return $this->getAlpzaMiembroIdAlpzaMiembro();
				break;
			case 2:
				return $this->getNombreFormal();
				break;
			case 3:
				return $this->getSigla();
				break;
			case 4:
				return $this->getNumeroIdentificacion();
				break;
			case 5:
				return $this->getAnoFundacion();
				break;
			case 6:
				return $this->getAnoIngresoAlpza();
				break;
			case 7:
				return $this->getDirectorNombre();
				break;
			case 8:
				return $this->getDirectorEmail();
				break;
			case 9:
				return $this->getPersonalPermanente();
				break;
			case 10:
				return $this->getPersonalTemporal();
				break;
			case 11:
				return $this->getDelegadoNombre();
				break;
			case 12:
				return $this->getDelegadoApellido();
				break;
			case 13:
				return $this->getDelegadoProfesion();
				break;
			case 14:
				return $this->getDelegadoCargo();
				break;
			case 15:
				return $this->getDelegadoEmail();
				break;
			case 16:
				return $this->getLogo();
				break;
			case 17:
				return $this->getDireccion();
				break;
			case 18:
				return $this->getCodigoPostal();
				break;
			case 19:
				return $this->getPais();
				break;
			case 20:
				return $this->getTelefonoCodCiudad();
				break;
			case 21:
				return $this->getTelefonoCodPais();
				break;
			case 22:
				return $this->getTelefono();
				break;
			case 23:
				return $this->getFax();
				break;
			case 24:
				return $this->getCelular();
				break;
			case 25:
				return $this->getEmail();
				break;
			case 26:
				return $this->getSitioWeb();
				break;
			case 27:
				return $this->getNaturalezaJuridicaPublica();
				break;
			case 28:
				return $this->getNaturalezaJuridicaPrivada();
				break;
			case 29:
				return $this->getNaturalezaJuridicaMixta();
				break;
			case 30:
				return $this->getPropietario();
				break;
			case 31:
				return $this->getLucro();
				break;
			case 32:
				return $this->getNumeroInstitucionesMiembro();
				break;
			case 33:
				return $this->getPorcentajeCoverturaNacional();
				break;
			case 34:
				return $this->getListaInstitucionesMiembro();
				break;
			case 35:
				return $this->getEstatutos();
				break;
			case 36:
				return $this->getOrganigrama();
				break;
			case 37:
				return $this->getOtraAsociacion();
				break;
			case 38:
				return $this->getDescripcion();
				break;
			case 39:
				return $this->getMision();
				break;
			case 40:
				return $this->getVision();
				break;
			case 41:
				return $this->getObjetivo();
				break;
			case 42:
				return $this->getPanoramaGeneral();
				break;
			case 43:
				return $this->getProyectos();
				break;
			case 44:
				return $this->getAreaTrabajo();
				break;
			case 45:
				return $this->getConsideraApoyoAlpza();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = AlpzaMiembroNacionalesPeer::getFieldNames($keyType);
		$result = array(
		$keys[0] => $this->getIdAlpzaMiembroNacionales(),
		$keys[1] => $this->getAlpzaMiembroIdAlpzaMiembro(),
		$keys[2] => $this->getNombreFormal(),
		$keys[3] => $this->getSigla(),
		$keys[4] => $this->getNumeroIdentificacion(),
		$keys[5] => $this->getAnoFundacion(),
		$keys[6] => $this->getAnoIngresoAlpza(),
		$keys[7] => $this->getDirectorNombre(),
		$keys[8] => $this->getDirectorEmail(),
		$keys[9] => $this->getPersonalPermanente(),
		$keys[10] => $this->getPersonalTemporal(),
		$keys[11] => $this->getDelegadoNombre(),
		$keys[12] => $this->getDelegadoApellido(),
		$keys[13] => $this->getDelegadoProfesion(),
		$keys[14] => $this->getDelegadoCargo(),
		$keys[15] => $this->getDelegadoEmail(),
		$keys[16] => $this->getLogo(),
		$keys[17] => $this->getDireccion(),
		$keys[18] => $this->getCodigoPostal(),
		$keys[19] => $this->getPais(),
		$keys[20] => $this->getTelefonoCodCiudad(),
		$keys[21] => $this->getTelefonoCodPais(),
		$keys[22] => $this->getTelefono(),
		$keys[23] => $this->getFax(),
		$keys[24] => $this->getCelular(),
		$keys[25] => $this->getEmail(),
		$keys[26] => $this->getSitioWeb(),
		$keys[27] => $this->getNaturalezaJuridicaPublica(),
		$keys[28] => $this->getNaturalezaJuridicaPrivada(),
		$keys[29] => $this->getNaturalezaJuridicaMixta(),
		$keys[30] => $this->getPropietario(),
		$keys[31] => $this->getLucro(),
		$keys[32] => $this->getNumeroInstitucionesMiembro(),
		$keys[33] => $this->getPorcentajeCoverturaNacional(),
		$keys[34] => $this->getListaInstitucionesMiembro(),
		$keys[35] => $this->getEstatutos(),
		$keys[36] => $this->getOrganigrama(),
		$keys[37] => $this->getOtraAsociacion(),
		$keys[38] => $this->getDescripcion(),
		$keys[39] => $this->getMision(),
		$keys[40] => $this->getVision(),
		$keys[41] => $this->getObjetivo(),
		$keys[42] => $this->getPanoramaGeneral(),
		$keys[43] => $this->getProyectos(),
		$keys[44] => $this->getAreaTrabajo(),
		$keys[45] => $this->getConsideraApoyoAlpza(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = AlpzaMiembroNacionalesPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setIdAlpzaMiembroNacionales($value);
				break;
			case 1:
				$this->setAlpzaMiembroIdAlpzaMiembro($value);
				break;
			case 2:
				$this->setNombreFormal($value);
				break;
			case 3:
				$this->setSigla($value);
				break;
			case 4:
				$this->setNumeroIdentificacion($value);
				break;
			case 5:
				$this->setAnoFundacion($value);
				break;
			case 6:
				$this->setAnoIngresoAlpza($value);
				break;
			case 7:
				$this->setDirectorNombre($value);
				break;
			case 8:
				$this->setDirectorEmail($value);
				break;
			case 9:
				$this->setPersonalPermanente($value);
				break;
			case 10:
				$this->setPersonalTemporal($value);
				break;
			case 11:
				$this->setDelegadoNombre($value);
				break;
			case 12:
				$this->setDelegadoApellido($value);
				break;
			case 13:
				$this->setDelegadoProfesion($value);
				break;
			case 14:
				$this->setDelegadoCargo($value);
				break;
			case 15:
				$this->setDelegadoEmail($value);
				break;
			case 16:
				$this->setLogo($value);
				break;
			case 17:
				$this->setDireccion($value);
				break;
			case 18:
				$this->setCodigoPostal($value);
				break;
			case 19:
				$this->setPais($value);
				break;
			case 20:
				$this->setTelefonoCodCiudad($value);
				break;
			case 21:
				$this->setTelefonoCodPais($value);
				break;
			case 22:
				$this->setTelefono($value);
				break;
			case 23:
				$this->setFax($value);
				break;
			case 24:
				$this->setCelular($value);
				break;
			case 25:
				$this->setEmail($value);
				break;
			case 26:
				$this->setSitioWeb($value);
				break;
			case 27:
				$this->setNaturalezaJuridicaPublica($value);
				break;
			case 28:
				$this->setNaturalezaJuridicaPrivada($value);
				break;
			case 29:
				$this->setNaturalezaJuridicaMixta($value);
				break;
			case 30:
				$this->setPropietario($value);
				break;
			case 31:
				$this->setLucro($value);
				break;
			case 32:
				$this->setNumeroInstitucionesMiembro($value);
				break;
			case 33:
				$this->setPorcentajeCoverturaNacional($value);
				break;
			case 34:
				$this->setListaInstitucionesMiembro($value);
				break;
			case 35:
				$this->setEstatutos($value);
				break;
			case 36:
				$this->setOrganigrama($value);
				break;
			case 37:
				$this->setOtraAsociacion($value);
				break;
			case 38:
				$this->setDescripcion($value);
				break;
			case 39:
				$this->setMision($value);
				break;
			case 40:
				$this->setVision($value);
				break;
			case 41:
				$this->setObjetivo($value);
				break;
			case 42:
				$this->setPanoramaGeneral($value);
				break;
			case 43:
				$this->setProyectos($value);
				break;
			case 44:
				$this->setAreaTrabajo($value);
				break;
			case 45:
				$this->setConsideraApoyoAlpza($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = AlpzaMiembroNacionalesPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setIdAlpzaMiembroNacionales($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setAlpzaMiembroIdAlpzaMiembro($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setNombreFormal($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setSigla($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setNumeroIdentificacion($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setAnoFundacion($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setAnoIngresoAlpza($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setDirectorNombre($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setDirectorEmail($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setPersonalPermanente($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setPersonalTemporal($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setDelegadoNombre($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setDelegadoApellido($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setDelegadoProfesion($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setDelegadoCargo($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setDelegadoEmail($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setLogo($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setDireccion($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setCodigoPostal($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setPais($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setTelefonoCodCiudad($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setTelefonoCodPais($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setTelefono($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setFax($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setCelular($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setEmail($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setSitioWeb($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setNaturalezaJuridicaPublica($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setNaturalezaJuridicaPrivada($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setNaturalezaJuridicaMixta($arr[$keys[29]]);
		if (array_key_exists($keys[30], $arr)) $this->setPropietario($arr[$keys[30]]);
		if (array_key_exists($keys[31], $arr)) $this->setLucro($arr[$keys[31]]);
		if (array_key_exists($keys[32], $arr)) $this->setNumeroInstitucionesMiembro($arr[$keys[32]]);
		if (array_key_exists($keys[33], $arr)) $this->setPorcentajeCoverturaNacional($arr[$keys[33]]);
		if (array_key_exists($keys[34], $arr)) $this->setListaInstitucionesMiembro($arr[$keys[34]]);
		if (array_key_exists($keys[35], $arr)) $this->setEstatutos($arr[$keys[35]]);
		if (array_key_exists($keys[36], $arr)) $this->setOrganigrama($arr[$keys[36]]);
		if (array_key_exists($keys[37], $arr)) $this->setOtraAsociacion($arr[$keys[37]]);
		if (array_key_exists($keys[38], $arr)) $this->setDescripcion($arr[$keys[38]]);
		if (array_key_exists($keys[39], $arr)) $this->setMision($arr[$keys[39]]);
		if (array_key_exists($keys[40], $arr)) $this->setVision($arr[$keys[40]]);
		if (array_key_exists($keys[41], $arr)) $this->setObjetivo($arr[$keys[41]]);
		if (array_key_exists($keys[42], $arr)) $this->setPanoramaGeneral($arr[$keys[42]]);
		if (array_key_exists($keys[43], $arr)) $this->setProyectos($arr[$keys[43]]);
		if (array_key_exists($keys[44], $arr)) $this->setAreaTrabajo($arr[$keys[44]]);
		if (array_key_exists($keys[45], $arr)) $this->setConsideraApoyoAlpza($arr[$keys[45]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(AlpzaMiembroNacionalesPeer::DATABASE_NAME);

		if ($this->isColumnModified(AlpzaMiembroNacionalesPeer::ID_ALPZA_MIEMBRO_NACIONALES)) $criteria->add(AlpzaMiembroNacionalesPeer::ID_ALPZA_MIEMBRO_NACIONALES, $this->id_alpza_miembro_nacionales);
		if ($this->isColumnModified(AlpzaMiembroNacionalesPeer::ALPZA_MIEMBRO_ID_ALPZA_MIEMBRO)) $criteria->add(AlpzaMiembroNacionalesPeer::ALPZA_MIEMBRO_ID_ALPZA_MIEMBRO, $this->alpza_miembro_id_alpza_miembro);
		if ($this->isColumnModified(AlpzaMiembroNacionalesPeer::NOMBRE_FORMAL)) $criteria->add(AlpzaMiembroNacionalesPeer::NOMBRE_FORMAL, $this->nombre_formal);
		if ($this->isColumnModified(AlpzaMiembroNacionalesPeer::SIGLA)) $criteria->add(AlpzaMiembroNacionalesPeer::SIGLA, $this->sigla);
		if ($this->isColumnModified(AlpzaMiembroNacionalesPeer::NUMERO_IDENTIFICACION)) $criteria->add(AlpzaMiembroNacionalesPeer::NUMERO_IDENTIFICACION, $this->numero_identificacion);
		if ($this->isColumnModified(AlpzaMiembroNacionalesPeer::ANO_FUNDACION)) $criteria->add(AlpzaMiembroNacionalesPeer::ANO_FUNDACION, $this->ano_fundacion);
		if ($this->isColumnModified(AlpzaMiembroNacionalesPeer::ANO_INGRESO_ALPZA)) $criteria->add(AlpzaMiembroNacionalesPeer::ANO_INGRESO_ALPZA, $this->ano_ingreso_alpza);
		if ($this->isColumnModified(AlpzaMiembroNacionalesPeer::DIRECTOR_NOMBRE)) $criteria->add(AlpzaMiembroNacionalesPeer::DIRECTOR_NOMBRE, $this->director_nombre);
		if ($this->isColumnModified(AlpzaMiembroNacionalesPeer::DIRECTOR_EMAIL)) $criteria->add(AlpzaMiembroNacionalesPeer::DIRECTOR_EMAIL, $this->director_email);
		if ($this->isColumnModified(AlpzaMiembroNacionalesPeer::PERSONAL_PERMANENTE)) $criteria->add(AlpzaMiembroNacionalesPeer::PERSONAL_PERMANENTE, $this->personal_permanente);
		if ($this->isColumnModified(AlpzaMiembroNacionalesPeer::PERSONAL_TEMPORAL)) $criteria->add(AlpzaMiembroNacionalesPeer::PERSONAL_TEMPORAL, $this->personal_temporal);
		if ($this->isColumnModified(AlpzaMiembroNacionalesPeer::DELEGADO_NOMBRE)) $criteria->add(AlpzaMiembroNacionalesPeer::DELEGADO_NOMBRE, $this->delegado_nombre);
		if ($this->isColumnModified(AlpzaMiembroNacionalesPeer::DELEGADO_APELLIDO)) $criteria->add(AlpzaMiembroNacionalesPeer::DELEGADO_APELLIDO, $this->delegado_apellido);
		if ($this->isColumnModified(AlpzaMiembroNacionalesPeer::DELEGADO_PROFESION)) $criteria->add(AlpzaMiembroNacionalesPeer::DELEGADO_PROFESION, $this->delegado_profesion);
		if ($this->isColumnModified(AlpzaMiembroNacionalesPeer::DELEGADO_CARGO)) $criteria->add(AlpzaMiembroNacionalesPeer::DELEGADO_CARGO, $this->delegado_cargo);
		if ($this->isColumnModified(AlpzaMiembroNacionalesPeer::DELEGADO_EMAIL)) $criteria->add(AlpzaMiembroNacionalesPeer::DELEGADO_EMAIL, $this->delegado_email);
		if ($this->isColumnModified(AlpzaMiembroNacionalesPeer::LOGO)) $criteria->add(AlpzaMiembroNacionalesPeer::LOGO, $this->logo);
		if ($this->isColumnModified(AlpzaMiembroNacionalesPeer::DIRECCION)) $criteria->add(AlpzaMiembroNacionalesPeer::DIRECCION, $this->direccion);
		if ($this->isColumnModified(AlpzaMiembroNacionalesPeer::CODIGO_POSTAL)) $criteria->add(AlpzaMiembroNacionalesPeer::CODIGO_POSTAL, $this->codigo_postal);
		if ($this->isColumnModified(AlpzaMiembroNacionalesPeer::PAIS)) $criteria->add(AlpzaMiembroNacionalesPeer::PAIS, $this->pais);
		if ($this->isColumnModified(AlpzaMiembroNacionalesPeer::TELEFONO_COD_CIUDAD)) $criteria->add(AlpzaMiembroNacionalesPeer::TELEFONO_COD_CIUDAD, $this->telefono_cod_ciudad);
		if ($this->isColumnModified(AlpzaMiembroNacionalesPeer::TELEFONO_COD_PAIS)) $criteria->add(AlpzaMiembroNacionalesPeer::TELEFONO_COD_PAIS, $this->telefono_cod_pais);
		if ($this->isColumnModified(AlpzaMiembroNacionalesPeer::TELEFONO)) $criteria->add(AlpzaMiembroNacionalesPeer::TELEFONO, $this->telefono);
		if ($this->isColumnModified(AlpzaMiembroNacionalesPeer::FAX)) $criteria->add(AlpzaMiembroNacionalesPeer::FAX, $this->fax);
		if ($this->isColumnModified(AlpzaMiembroNacionalesPeer::CELULAR)) $criteria->add(AlpzaMiembroNacionalesPeer::CELULAR, $this->celular);
		if ($this->isColumnModified(AlpzaMiembroNacionalesPeer::EMAIL)) $criteria->add(AlpzaMiembroNacionalesPeer::EMAIL, $this->email);
		if ($this->isColumnModified(AlpzaMiembroNacionalesPeer::SITIO_WEB)) $criteria->add(AlpzaMiembroNacionalesPeer::SITIO_WEB, $this->sitio_web);
		if ($this->isColumnModified(AlpzaMiembroNacionalesPeer::NATURALEZA_JURIDICA_PUBLICA)) $criteria->add(AlpzaMiembroNacionalesPeer::NATURALEZA_JURIDICA_PUBLICA, $this->naturaleza_juridica_publica);
		if ($this->isColumnModified(AlpzaMiembroNacionalesPeer::NATURALEZA_JURIDICA_PRIVADA)) $criteria->add(AlpzaMiembroNacionalesPeer::NATURALEZA_JURIDICA_PRIVADA, $this->naturaleza_juridica_privada);
		if ($this->isColumnModified(AlpzaMiembroNacionalesPeer::NATURALEZA_JURIDICA_MIXTA)) $criteria->add(AlpzaMiembroNacionalesPeer::NATURALEZA_JURIDICA_MIXTA, $this->naturaleza_juridica_mixta);
		if ($this->isColumnModified(AlpzaMiembroNacionalesPeer::PROPIETARIO)) $criteria->add(AlpzaMiembroNacionalesPeer::PROPIETARIO, $this->propietario);
		if ($this->isColumnModified(AlpzaMiembroNacionalesPeer::LUCRO)) $criteria->add(AlpzaMiembroNacionalesPeer::LUCRO, $this->lucro);
		if ($this->isColumnModified(AlpzaMiembroNacionalesPeer::NUMERO_INSTITUCIONES_MIEMBRO)) $criteria->add(AlpzaMiembroNacionalesPeer::NUMERO_INSTITUCIONES_MIEMBRO, $this->numero_instituciones_miembro);
		if ($this->isColumnModified(AlpzaMiembroNacionalesPeer::PORCENTAJE_COVERTURA_NACIONAL)) $criteria->add(AlpzaMiembroNacionalesPeer::PORCENTAJE_COVERTURA_NACIONAL, $this->porcentaje_covertura_nacional);
		if ($this->isColumnModified(AlpzaMiembroNacionalesPeer::LISTA_INSTITUCIONES_MIEMBRO)) $criteria->add(AlpzaMiembroNacionalesPeer::LISTA_INSTITUCIONES_MIEMBRO, $this->lista_instituciones_miembro);
		if ($this->isColumnModified(AlpzaMiembroNacionalesPeer::ESTATUTOS)) $criteria->add(AlpzaMiembroNacionalesPeer::ESTATUTOS, $this->estatutos);
		if ($this->isColumnModified(AlpzaMiembroNacionalesPeer::ORGANIGRAMA)) $criteria->add(AlpzaMiembroNacionalesPeer::ORGANIGRAMA, $this->organigrama);
		if ($this->isColumnModified(AlpzaMiembroNacionalesPeer::OTRA_ASOCIACION)) $criteria->add(AlpzaMiembroNacionalesPeer::OTRA_ASOCIACION, $this->otra_asociacion);
		if ($this->isColumnModified(AlpzaMiembroNacionalesPeer::DESCRIPCION)) $criteria->add(AlpzaMiembroNacionalesPeer::DESCRIPCION, $this->descripcion);
		if ($this->isColumnModified(AlpzaMiembroNacionalesPeer::MISION)) $criteria->add(AlpzaMiembroNacionalesPeer::MISION, $this->mision);
		if ($this->isColumnModified(AlpzaMiembroNacionalesPeer::VISION)) $criteria->add(AlpzaMiembroNacionalesPeer::VISION, $this->vision);
		if ($this->isColumnModified(AlpzaMiembroNacionalesPeer::OBJETIVO)) $criteria->add(AlpzaMiembroNacionalesPeer::OBJETIVO, $this->objetivo);
		if ($this->isColumnModified(AlpzaMiembroNacionalesPeer::PANORAMA_GENERAL)) $criteria->add(AlpzaMiembroNacionalesPeer::PANORAMA_GENERAL, $this->panorama_general);
		if ($this->isColumnModified(AlpzaMiembroNacionalesPeer::PROYECTOS)) $criteria->add(AlpzaMiembroNacionalesPeer::PROYECTOS, $this->proyectos);
		if ($this->isColumnModified(AlpzaMiembroNacionalesPeer::AREA_TRABAJO)) $criteria->add(AlpzaMiembroNacionalesPeer::AREA_TRABAJO, $this->area_trabajo);
		if ($this->isColumnModified(AlpzaMiembroNacionalesPeer::CONSIDERA_APOYO_ALPZA)) $criteria->add(AlpzaMiembroNacionalesPeer::CONSIDERA_APOYO_ALPZA, $this->considera_apoyo_alpza);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(AlpzaMiembroNacionalesPeer::DATABASE_NAME);

		$criteria->add(AlpzaMiembroNacionalesPeer::ID_ALPZA_MIEMBRO_NACIONALES, $this->id_alpza_miembro_nacionales);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getIdAlpzaMiembroNacionales();
	}

	/**
	 * Generic method to set the primary key (id_alpza_miembro_nacionales column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setIdAlpzaMiembroNacionales($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of AlpzaMiembroNacionales (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setAlpzaMiembroIdAlpzaMiembro($this->alpza_miembro_id_alpza_miembro);

		$copyObj->setNombreFormal($this->nombre_formal);

		$copyObj->setSigla($this->sigla);

		$copyObj->setNumeroIdentificacion($this->numero_identificacion);

		$copyObj->setAnoFundacion($this->ano_fundacion);

		$copyObj->setAnoIngresoAlpza($this->ano_ingreso_alpza);

		$copyObj->setDirectorNombre($this->director_nombre);

		$copyObj->setDirectorEmail($this->director_email);

		$copyObj->setPersonalPermanente($this->personal_permanente);

		$copyObj->setPersonalTemporal($this->personal_temporal);

		$copyObj->setDelegadoNombre($this->delegado_nombre);

		$copyObj->setDelegadoApellido($this->delegado_apellido);

		$copyObj->setDelegadoProfesion($this->delegado_profesion);

		$copyObj->setDelegadoCargo($this->delegado_cargo);

		$copyObj->setDelegadoEmail($this->delegado_email);

		$copyObj->setLogo($this->logo);

		$copyObj->setDireccion($this->direccion);

		$copyObj->setCodigoPostal($this->codigo_postal);

		$copyObj->setPais($this->pais);

		$copyObj->setTelefonoCodCiudad($this->telefono_cod_ciudad);

		$copyObj->setTelefonoCodPais($this->telefono_cod_pais);

		$copyObj->setTelefono($this->telefono);

		$copyObj->setFax($this->fax);

		$copyObj->setCelular($this->celular);

		$copyObj->setEmail($this->email);

		$copyObj->setSitioWeb($this->sitio_web);

		$copyObj->setNaturalezaJuridicaPublica($this->naturaleza_juridica_publica);

		$copyObj->setNaturalezaJuridicaPrivada($this->naturaleza_juridica_privada);

		$copyObj->setNaturalezaJuridicaMixta($this->naturaleza_juridica_mixta);

		$copyObj->setPropietario($this->propietario);

		$copyObj->setLucro($this->lucro);

		$copyObj->setNumeroInstitucionesMiembro($this->numero_instituciones_miembro);

		$copyObj->setPorcentajeCoverturaNacional($this->porcentaje_covertura_nacional);

		$copyObj->setListaInstitucionesMiembro($this->lista_instituciones_miembro);

		$copyObj->setEstatutos($this->estatutos);

		$copyObj->setOrganigrama($this->organigrama);

		$copyObj->setOtraAsociacion($this->otra_asociacion);

		$copyObj->setDescripcion($this->descripcion);

		$copyObj->setMision($this->mision);

		$copyObj->setVision($this->vision);

		$copyObj->setObjetivo($this->objetivo);

		$copyObj->setPanoramaGeneral($this->panorama_general);

		$copyObj->setProyectos($this->proyectos);

		$copyObj->setAreaTrabajo($this->area_trabajo);

		$copyObj->setConsideraApoyoAlpza($this->considera_apoyo_alpza);


		$copyObj->setNew(true);

		$copyObj->setIdAlpzaMiembroNacionales(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     AlpzaMiembroNacionales Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     AlpzaMiembroNacionalesPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new AlpzaMiembroNacionalesPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a AlpzaMiembro object.
	 *
	 * @param      AlpzaMiembro $v
	 * @return     AlpzaMiembroNacionales The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setAlpzaMiembro(AlpzaMiembro $v = null)
	{
		if ($v === null) {
			$this->setAlpzaMiembroIdAlpzaMiembro(NULL);
		} else {
			$this->setAlpzaMiembroIdAlpzaMiembro($v->getIdAlpzaMiembro());
		}

		$this->aAlpzaMiembro = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the AlpzaMiembro object, it will not be re-added.
		if ($v !== null) {
			$v->addAlpzaMiembroNacionales($this);
		}

		return $this;
	}


	/**
	 * Get the associated AlpzaMiembro object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     AlpzaMiembro The associated AlpzaMiembro object.
	 * @throws     PropelException
	 */
	public function getAlpzaMiembro(PropelPDO $con = null)
	{
		if ($this->aAlpzaMiembro === null && ($this->alpza_miembro_id_alpza_miembro !== null)) {
			$this->aAlpzaMiembro = AlpzaMiembroPeer::retrieveByPk($this->alpza_miembro_id_alpza_miembro);
			/* The following can be used additionally to
			 guarantee the related object contains a reference
			 to this object.  This level of coupling may, however, be
			 undesirable since it could result in an only partially populated collection
			 in the referenced object.
			 $this->aAlpzaMiembro->addAlpzaMiembroNacionaless($this);
			 */
		}
		return $this->aAlpzaMiembro;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

		$this->aAlpzaMiembro = null;
	}

	// symfony_behaviors behavior

	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
		if (!$callable = sfMixer::getCallable('BaseAlpzaMiembroNacionales:'.$method))
		{
			throw new sfException(sprintf('Call to undefined method BaseAlpzaMiembroNacionales::%s', $method));
		}

		array_unshift($arguments, $this);

		return call_user_func_array($callable, $arguments);
	}

} // BaseAlpzaMiembroNacionales
