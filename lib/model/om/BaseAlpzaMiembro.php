<?php

/**
 * Base class that represents a row from the 'alpza_miembro' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Sat Nov 24 15:15:35 2012
 *
 * @package    lib.model.om
 */
abstract class BaseAlpzaMiembro extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        AlpzaMiembroPeer
	 */
	protected static $peer;

	/**
	 * The value for the id_alpza_miembro field.
	 * @var        int
	 */
	protected $id_alpza_miembro;

	/**
	 * The value for the id_alpza_miembro_tipo field.
	 * @var        int
	 */
	protected $id_alpza_miembro_tipo;

	/**
	 * The value for the nombre field.
	 * @var        string
	 */
	protected $nombre;

	/**
	 * The value for the estado field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $estado;

	/**
	 * The value for the fecha_ingreso field.
	 * @var        string
	 */
	protected $fecha_ingreso;

	/**
	 * The value for the fecha_edicion field.
	 * @var        string
	 */
	protected $fecha_edicion;

	/**
	 * The value for the fecha_publicacion field.
	 * @var        string
	 */
	protected $fecha_publicacion;

	/**
	 * @var        array AlpzaJunta[] Collection to store aggregation of AlpzaJunta objects.
	 */
	protected $collAlpzaJuntas;

	/**
	 * @var        Criteria The criteria used to select the current contents of collAlpzaJuntas.
	 */
	private $lastAlpzaJuntaCriteria = null;

	/**
	 * @var        array AlpzaComite[] Collection to store aggregation of AlpzaComite objects.
	 */
	protected $collAlpzaComites;

	/**
	 * @var        Criteria The criteria used to select the current contents of collAlpzaComites.
	 */
	private $lastAlpzaComiteCriteria = null;

	/**
	 * @var        array AlpzaEvento[] Collection to store aggregation of AlpzaEvento objects.
	 */
	protected $collAlpzaEventos;

	/**
	 * @var        Criteria The criteria used to select the current contents of collAlpzaEventos.
	 */
	private $lastAlpzaEventoCriteria = null;

	/**
	 * @var        array AlpzaNoticia[] Collection to store aggregation of AlpzaNoticia objects.
	 */
	protected $collAlpzaNoticias;

	/**
	 * @var        Criteria The criteria used to select the current contents of collAlpzaNoticias.
	 */
	private $lastAlpzaNoticiaCriteria = null;

	/**
	 * @var        array AlpzaPublicacion[] Collection to store aggregation of AlpzaPublicacion objects.
	 */
	protected $collAlpzaPublicacions;

	/**
	 * @var        Criteria The criteria used to select the current contents of collAlpzaPublicacions.
	 */
	private $lastAlpzaPublicacionCriteria = null;

	/**
	 * @var        array AlpzaCongreso[] Collection to store aggregation of AlpzaCongreso objects.
	 */
	protected $collAlpzaCongresos;

	/**
	 * @var        Criteria The criteria used to select the current contents of collAlpzaCongresos.
	 */
	private $lastAlpzaCongresoCriteria = null;

	/**
	 * @var        array AlpzaBeca[] Collection to store aggregation of AlpzaBeca objects.
	 */
	protected $collAlpzaBecas;

	/**
	 * @var        Criteria The criteria used to select the current contents of collAlpzaBecas.
	 */
	private $lastAlpzaBecaCriteria = null;

	/**
	 * @var        array AlpzaInformacion[] Collection to store aggregation of AlpzaInformacion objects.
	 */
	protected $collAlpzaInformacions;

	/**
	 * @var        Criteria The criteria used to select the current contents of collAlpzaInformacions.
	 */
	private $lastAlpzaInformacionCriteria = null;

	/**
	 * @var        array AlpzaMiembroAsignado[] Collection to store aggregation of AlpzaMiembroAsignado objects.
	 */
	protected $collAlpzaMiembroAsignados;

	/**
	 * @var        Criteria The criteria used to select the current contents of collAlpzaMiembroAsignados.
	 */
	private $lastAlpzaMiembroAsignadoCriteria = null;

	/**
	 * @var        array AlpzaMiembroFinanzas[] Collection to store aggregation of AlpzaMiembroFinanzas objects.
	 */
	protected $collAlpzaMiembroFinanzass;

	/**
	 * @var        Criteria The criteria used to select the current contents of collAlpzaMiembroFinanzass.
	 */
	private $lastAlpzaMiembroFinanzasCriteria = null;

	/**
	 * @var        array AlpzaMiembroColeccion[] Collection to store aggregation of AlpzaMiembroColeccion objects.
	 */
	protected $collAlpzaMiembroColeccions;

	/**
	 * @var        Criteria The criteria used to select the current contents of collAlpzaMiembroColeccions.
	 */
	private $lastAlpzaMiembroColeccionCriteria = null;

	/**
	 * @var        array AlpzaMiembroProfesional[] Collection to store aggregation of AlpzaMiembroProfesional objects.
	 */
	protected $collAlpzaMiembroProfesionals;

	/**
	 * @var        Criteria The criteria used to select the current contents of collAlpzaMiembroProfesionals.
	 */
	private $lastAlpzaMiembroProfesionalCriteria = null;

	/**
	 * @var        array AlpzaMiembroAsociados[] Collection to store aggregation of AlpzaMiembroAsociados objects.
	 */
	protected $collAlpzaMiembroAsociadoss;

	/**
	 * @var        Criteria The criteria used to select the current contents of collAlpzaMiembroAsociadoss.
	 */
	private $lastAlpzaMiembroAsociadosCriteria = null;

	/**
	 * @var        array AlpzaMiembroRegional[] Collection to store aggregation of AlpzaMiembroRegional objects.
	 */
	protected $collAlpzaMiembroRegionals;

	/**
	 * @var        Criteria The criteria used to select the current contents of collAlpzaMiembroRegionals.
	 */
	private $lastAlpzaMiembroRegionalCriteria = null;

	/**
	 * @var        array AlpzaMiembroNacionales[] Collection to store aggregation of AlpzaMiembroNacionales objects.
	 */
	protected $collAlpzaMiembroNacionaless;

	/**
	 * @var        Criteria The criteria used to select the current contents of collAlpzaMiembroNacionaless.
	 */
	private $lastAlpzaMiembroNacionalesCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior

	const PEER = 'AlpzaMiembroPeer';

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->estado = 1;
	}

	/**
	 * Initializes internal state of BaseAlpzaMiembro object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Get the [id_alpza_miembro] column value.
	 *
	 * @return     int
	 */
	public function getIdAlpzaMiembro()
	{
		return $this->id_alpza_miembro;
	}

	/**
	 * Get the [id_alpza_miembro_tipo] column value.
	 *
	 * @return     int
	 */
	public function getIdAlpzaMiembroTipo()
	{
		return $this->id_alpza_miembro_tipo;
	}

	/**
	 * Get the [nombre] column value.
	 *
	 * @return     string
	 */
	public function getNombre()
	{
		return $this->nombre;
	}

	/**
	 * Get the [estado] column value.
	 *
	 * @return     int
	 */
	public function getEstado()
	{
		return $this->estado;
	}

	/**
	 * Get the [optionally formatted] temporal [fecha_ingreso] column value.
	 *
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getFechaIngreso($format = 'Y-m-d')
	{
		if ($this->fecha_ingreso === null) {
			return null;
		}


		if ($this->fecha_ingreso === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->fecha_ingreso);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->fecha_ingreso, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [fecha_edicion] column value.
	 *
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getFechaEdicion($format = 'Y-m-d')
	{
		if ($this->fecha_edicion === null) {
			return null;
		}


		if ($this->fecha_edicion === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->fecha_edicion);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->fecha_edicion, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [fecha_publicacion] column value.
	 *
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getFechaPublicacion($format = 'Y-m-d')
	{
		if ($this->fecha_publicacion === null) {
			return null;
		}


		if ($this->fecha_publicacion === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->fecha_publicacion);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->fecha_publicacion, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Set the value of [id_alpza_miembro] column.
	 *
	 * @param      int $v new value
	 * @return     AlpzaMiembro The current object (for fluent API support)
	 */
	public function setIdAlpzaMiembro($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_alpza_miembro !== $v) {
			$this->id_alpza_miembro = $v;
			$this->modifiedColumns[] = AlpzaMiembroPeer::ID_ALPZA_MIEMBRO;
		}

		return $this;
	} // setIdAlpzaMiembro()

	/**
	 * Set the value of [id_alpza_miembro_tipo] column.
	 *
	 * @param      int $v new value
	 * @return     AlpzaMiembro The current object (for fluent API support)
	 */
	public function setIdAlpzaMiembroTipo($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_alpza_miembro_tipo !== $v) {
			$this->id_alpza_miembro_tipo = $v;
			$this->modifiedColumns[] = AlpzaMiembroPeer::ID_ALPZA_MIEMBRO_TIPO;
		}

		return $this;
	} // setIdAlpzaMiembroTipo()

	/**
	 * Set the value of [nombre] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembro The current object (for fluent API support)
	 */
	public function setNombre($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nombre !== $v) {
			$this->nombre = $v;
			$this->modifiedColumns[] = AlpzaMiembroPeer::NOMBRE;
		}

		return $this;
	} // setNombre()

	/**
	 * Set the value of [estado] column.
	 *
	 * @param      int $v new value
	 * @return     AlpzaMiembro The current object (for fluent API support)
	 */
	public function setEstado($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->estado !== $v || $this->isNew()) {
			$this->estado = $v;
			$this->modifiedColumns[] = AlpzaMiembroPeer::ESTADO;
		}

		return $this;
	} // setEstado()

	/**
	 * Sets the value of [fecha_ingreso] column to a normalized version of the date/time value specified.
	 *
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     AlpzaMiembro The current object (for fluent API support)
	 */
	public function setFechaIngreso($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->fecha_ingreso !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->fecha_ingreso !== null && $tmpDt = new DateTime($this->fecha_ingreso)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match
			)
			{
				$this->fecha_ingreso = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = AlpzaMiembroPeer::FECHA_INGRESO;
			}
		} // if either are not null

		return $this;
	} // setFechaIngreso()

	/**
	 * Sets the value of [fecha_edicion] column to a normalized version of the date/time value specified.
	 *
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     AlpzaMiembro The current object (for fluent API support)
	 */
	public function setFechaEdicion($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->fecha_edicion !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->fecha_edicion !== null && $tmpDt = new DateTime($this->fecha_edicion)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match
			)
			{
				$this->fecha_edicion = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = AlpzaMiembroPeer::FECHA_EDICION;
			}
		} // if either are not null

		return $this;
	} // setFechaEdicion()

	/**
	 * Sets the value of [fecha_publicacion] column to a normalized version of the date/time value specified.
	 *
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     AlpzaMiembro The current object (for fluent API support)
	 */
	public function setFechaPublicacion($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->fecha_publicacion !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->fecha_publicacion !== null && $tmpDt = new DateTime($this->fecha_publicacion)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match
			)
			{
				$this->fecha_publicacion = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = AlpzaMiembroPeer::FECHA_PUBLICACION;
			}
		} // if either are not null

		return $this;
	} // setFechaPublicacion()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
		if ($this->estado !== 1) {
			return false;
		}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id_alpza_miembro = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->id_alpza_miembro_tipo = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->nombre = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->estado = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
			$this->fecha_ingreso = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->fecha_edicion = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->fecha_publicacion = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 7; // 7 = AlpzaMiembroPeer::NUM_COLUMNS - AlpzaMiembroPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating AlpzaMiembro object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(AlpzaMiembroPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = AlpzaMiembroPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->collAlpzaJuntas = null;
			$this->lastAlpzaJuntaCriteria = null;

			$this->collAlpzaComites = null;
			$this->lastAlpzaComiteCriteria = null;

			$this->collAlpzaEventos = null;
			$this->lastAlpzaEventoCriteria = null;

			$this->collAlpzaNoticias = null;
			$this->lastAlpzaNoticiaCriteria = null;

			$this->collAlpzaPublicacions = null;
			$this->lastAlpzaPublicacionCriteria = null;

			$this->collAlpzaCongresos = null;
			$this->lastAlpzaCongresoCriteria = null;

			$this->collAlpzaBecas = null;
			$this->lastAlpzaBecaCriteria = null;

			$this->collAlpzaInformacions = null;
			$this->lastAlpzaInformacionCriteria = null;

			$this->collAlpzaMiembroAsignados = null;
			$this->lastAlpzaMiembroAsignadoCriteria = null;

			$this->collAlpzaMiembroFinanzass = null;
			$this->lastAlpzaMiembroFinanzasCriteria = null;

			$this->collAlpzaMiembroColeccions = null;
			$this->lastAlpzaMiembroColeccionCriteria = null;

			$this->collAlpzaMiembroProfesionals = null;
			$this->lastAlpzaMiembroProfesionalCriteria = null;

			$this->collAlpzaMiembroAsociadoss = null;
			$this->lastAlpzaMiembroAsociadosCriteria = null;

			$this->collAlpzaMiembroRegionals = null;
			$this->lastAlpzaMiembroRegionalCriteria = null;

			$this->collAlpzaMiembroNacionaless = null;
			$this->lastAlpzaMiembroNacionalesCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(AlpzaMiembroPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseAlpzaMiembro:delete:pre') as $callable)
			{
				if (call_user_func($callable, $this, $con))
				{
					$con->commit();
						
					return;
				}
			}

			if ($ret) {
				AlpzaMiembroPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseAlpzaMiembro:delete:post') as $callable)
				{
					call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(AlpzaMiembroPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseAlpzaMiembro:save:pre') as $callable)
			{
				if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
				{
					$con->commit();
						
					return $affectedRows;
				}
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseAlpzaMiembro:save:post') as $callable)
				{
					call_user_func($callable, $this, $con, $affectedRows);
				}

				AlpzaMiembroPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = AlpzaMiembroPeer::ID_ALPZA_MIEMBRO;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = AlpzaMiembroPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
					// should always be true here (even though technically
					// BasePeer::doInsert() can insert multiple rows).

					$this->setIdAlpzaMiembro($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += AlpzaMiembroPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collAlpzaJuntas !== null) {
				foreach ($this->collAlpzaJuntas as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collAlpzaComites !== null) {
				foreach ($this->collAlpzaComites as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collAlpzaEventos !== null) {
				foreach ($this->collAlpzaEventos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collAlpzaNoticias !== null) {
				foreach ($this->collAlpzaNoticias as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collAlpzaPublicacions !== null) {
				foreach ($this->collAlpzaPublicacions as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collAlpzaCongresos !== null) {
				foreach ($this->collAlpzaCongresos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collAlpzaBecas !== null) {
				foreach ($this->collAlpzaBecas as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collAlpzaInformacions !== null) {
				foreach ($this->collAlpzaInformacions as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collAlpzaMiembroAsignados !== null) {
				foreach ($this->collAlpzaMiembroAsignados as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collAlpzaMiembroFinanzass !== null) {
				foreach ($this->collAlpzaMiembroFinanzass as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collAlpzaMiembroColeccions !== null) {
				foreach ($this->collAlpzaMiembroColeccions as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collAlpzaMiembroProfesionals !== null) {
				foreach ($this->collAlpzaMiembroProfesionals as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collAlpzaMiembroAsociadoss !== null) {
				foreach ($this->collAlpzaMiembroAsociadoss as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collAlpzaMiembroRegionals !== null) {
				foreach ($this->collAlpzaMiembroRegionals as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collAlpzaMiembroNacionaless !== null) {
				foreach ($this->collAlpzaMiembroNacionaless as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = AlpzaMiembroPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


			if ($this->collAlpzaJuntas !== null) {
				foreach ($this->collAlpzaJuntas as $referrerFK) {
					if (!$referrerFK->validate($columns)) {
						$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
					}
				}
			}

			if ($this->collAlpzaComites !== null) {
				foreach ($this->collAlpzaComites as $referrerFK) {
					if (!$referrerFK->validate($columns)) {
						$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
					}
				}
			}

			if ($this->collAlpzaEventos !== null) {
				foreach ($this->collAlpzaEventos as $referrerFK) {
					if (!$referrerFK->validate($columns)) {
						$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
					}
				}
			}

			if ($this->collAlpzaNoticias !== null) {
				foreach ($this->collAlpzaNoticias as $referrerFK) {
					if (!$referrerFK->validate($columns)) {
						$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
					}
				}
			}

			if ($this->collAlpzaPublicacions !== null) {
				foreach ($this->collAlpzaPublicacions as $referrerFK) {
					if (!$referrerFK->validate($columns)) {
						$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
					}
				}
			}

			if ($this->collAlpzaCongresos !== null) {
				foreach ($this->collAlpzaCongresos as $referrerFK) {
					if (!$referrerFK->validate($columns)) {
						$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
					}
				}
			}

			if ($this->collAlpzaBecas !== null) {
				foreach ($this->collAlpzaBecas as $referrerFK) {
					if (!$referrerFK->validate($columns)) {
						$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
					}
				}
			}

			if ($this->collAlpzaInformacions !== null) {
				foreach ($this->collAlpzaInformacions as $referrerFK) {
					if (!$referrerFK->validate($columns)) {
						$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
					}
				}
			}

			if ($this->collAlpzaMiembroAsignados !== null) {
				foreach ($this->collAlpzaMiembroAsignados as $referrerFK) {
					if (!$referrerFK->validate($columns)) {
						$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
					}
				}
			}

			if ($this->collAlpzaMiembroFinanzass !== null) {
				foreach ($this->collAlpzaMiembroFinanzass as $referrerFK) {
					if (!$referrerFK->validate($columns)) {
						$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
					}
				}
			}

			if ($this->collAlpzaMiembroColeccions !== null) {
				foreach ($this->collAlpzaMiembroColeccions as $referrerFK) {
					if (!$referrerFK->validate($columns)) {
						$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
					}
				}
			}

			if ($this->collAlpzaMiembroProfesionals !== null) {
				foreach ($this->collAlpzaMiembroProfesionals as $referrerFK) {
					if (!$referrerFK->validate($columns)) {
						$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
					}
				}
			}

			if ($this->collAlpzaMiembroAsociadoss !== null) {
				foreach ($this->collAlpzaMiembroAsociadoss as $referrerFK) {
					if (!$referrerFK->validate($columns)) {
						$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
					}
				}
			}

			if ($this->collAlpzaMiembroRegionals !== null) {
				foreach ($this->collAlpzaMiembroRegionals as $referrerFK) {
					if (!$referrerFK->validate($columns)) {
						$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
					}
				}
			}

			if ($this->collAlpzaMiembroNacionaless !== null) {
				foreach ($this->collAlpzaMiembroNacionaless as $referrerFK) {
					if (!$referrerFK->validate($columns)) {
						$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
					}
				}
			}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = AlpzaMiembroPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getIdAlpzaMiembro();
				break;
			case 1:
				return $this->getIdAlpzaMiembroTipo();
				break;
			case 2:
				return $this->getNombre();
				break;
			case 3:
				return $this->getEstado();
				break;
			case 4:
				return $this->getFechaIngreso();
				break;
			case 5:
				return $this->getFechaEdicion();
				break;
			case 6:
				return $this->getFechaPublicacion();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = AlpzaMiembroPeer::getFieldNames($keyType);
		$result = array(
		$keys[0] => $this->getIdAlpzaMiembro(),
		$keys[1] => $this->getIdAlpzaMiembroTipo(),
		$keys[2] => $this->getNombre(),
		$keys[3] => $this->getEstado(),
		$keys[4] => $this->getFechaIngreso(),
		$keys[5] => $this->getFechaEdicion(),
		$keys[6] => $this->getFechaPublicacion(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = AlpzaMiembroPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setIdAlpzaMiembro($value);
				break;
			case 1:
				$this->setIdAlpzaMiembroTipo($value);
				break;
			case 2:
				$this->setNombre($value);
				break;
			case 3:
				$this->setEstado($value);
				break;
			case 4:
				$this->setFechaIngreso($value);
				break;
			case 5:
				$this->setFechaEdicion($value);
				break;
			case 6:
				$this->setFechaPublicacion($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = AlpzaMiembroPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setIdAlpzaMiembro($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setIdAlpzaMiembroTipo($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setNombre($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setEstado($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setFechaIngreso($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setFechaEdicion($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setFechaPublicacion($arr[$keys[6]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(AlpzaMiembroPeer::DATABASE_NAME);

		if ($this->isColumnModified(AlpzaMiembroPeer::ID_ALPZA_MIEMBRO)) $criteria->add(AlpzaMiembroPeer::ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);
		if ($this->isColumnModified(AlpzaMiembroPeer::ID_ALPZA_MIEMBRO_TIPO)) $criteria->add(AlpzaMiembroPeer::ID_ALPZA_MIEMBRO_TIPO, $this->id_alpza_miembro_tipo);
		if ($this->isColumnModified(AlpzaMiembroPeer::NOMBRE)) $criteria->add(AlpzaMiembroPeer::NOMBRE, $this->nombre);
		if ($this->isColumnModified(AlpzaMiembroPeer::ESTADO)) $criteria->add(AlpzaMiembroPeer::ESTADO, $this->estado);
		if ($this->isColumnModified(AlpzaMiembroPeer::FECHA_INGRESO)) $criteria->add(AlpzaMiembroPeer::FECHA_INGRESO, $this->fecha_ingreso);
		if ($this->isColumnModified(AlpzaMiembroPeer::FECHA_EDICION)) $criteria->add(AlpzaMiembroPeer::FECHA_EDICION, $this->fecha_edicion);
		if ($this->isColumnModified(AlpzaMiembroPeer::FECHA_PUBLICACION)) $criteria->add(AlpzaMiembroPeer::FECHA_PUBLICACION, $this->fecha_publicacion);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(AlpzaMiembroPeer::DATABASE_NAME);

		$criteria->add(AlpzaMiembroPeer::ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getIdAlpzaMiembro();
	}

	/**
	 * Generic method to set the primary key (id_alpza_miembro column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setIdAlpzaMiembro($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of AlpzaMiembro (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setIdAlpzaMiembroTipo($this->id_alpza_miembro_tipo);

		$copyObj->setNombre($this->nombre);

		$copyObj->setEstado($this->estado);

		$copyObj->setFechaIngreso($this->fecha_ingreso);

		$copyObj->setFechaEdicion($this->fecha_edicion);

		$copyObj->setFechaPublicacion($this->fecha_publicacion);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getAlpzaJuntas() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addAlpzaJunta($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getAlpzaComites() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addAlpzaComite($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getAlpzaEventos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addAlpzaEvento($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getAlpzaNoticias() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addAlpzaNoticia($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getAlpzaPublicacions() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addAlpzaPublicacion($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getAlpzaCongresos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addAlpzaCongreso($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getAlpzaBecas() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addAlpzaBeca($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getAlpzaInformacions() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addAlpzaInformacion($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getAlpzaMiembroAsignados() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addAlpzaMiembroAsignado($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getAlpzaMiembroFinanzass() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addAlpzaMiembroFinanzas($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getAlpzaMiembroColeccions() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addAlpzaMiembroColeccion($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getAlpzaMiembroProfesionals() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addAlpzaMiembroProfesional($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getAlpzaMiembroAsociadoss() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addAlpzaMiembroAsociados($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getAlpzaMiembroRegionals() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addAlpzaMiembroRegional($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getAlpzaMiembroNacionaless() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addAlpzaMiembroNacionales($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setIdAlpzaMiembro(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     AlpzaMiembro Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     AlpzaMiembroPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new AlpzaMiembroPeer();
		}
		return self::$peer;
	}

	/**
	 * Clears out the collAlpzaJuntas collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addAlpzaJuntas()
	 */
	public function clearAlpzaJuntas()
	{
		$this->collAlpzaJuntas = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collAlpzaJuntas collection (array).
	 *
	 * By default this just sets the collAlpzaJuntas collection to an empty array (like clearcollAlpzaJuntas());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initAlpzaJuntas()
	{
		$this->collAlpzaJuntas = array();
	}

	/**
	 * Gets an array of AlpzaJunta objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this AlpzaMiembro has previously been saved, it will retrieve
	 * related AlpzaJuntas from storage. If this AlpzaMiembro is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array AlpzaJunta[]
	 * @throws     PropelException
	 */
	public function getAlpzaJuntas($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AlpzaMiembroPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAlpzaJuntas === null) {
			if ($this->isNew()) {
				$this->collAlpzaJuntas = array();
			} else {

				$criteria->add(AlpzaJuntaPeer::ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				AlpzaJuntaPeer::addSelectColumns($criteria);
				$this->collAlpzaJuntas = AlpzaJuntaPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(AlpzaJuntaPeer::ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				AlpzaJuntaPeer::addSelectColumns($criteria);
				if (!isset($this->lastAlpzaJuntaCriteria) || !$this->lastAlpzaJuntaCriteria->equals($criteria)) {
					$this->collAlpzaJuntas = AlpzaJuntaPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastAlpzaJuntaCriteria = $criteria;
		return $this->collAlpzaJuntas;
	}

	/**
	 * Returns the number of related AlpzaJunta objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related AlpzaJunta objects.
	 * @throws     PropelException
	 */
	public function countAlpzaJuntas(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AlpzaMiembroPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collAlpzaJuntas === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(AlpzaJuntaPeer::ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				$count = AlpzaJuntaPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(AlpzaJuntaPeer::ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				if (!isset($this->lastAlpzaJuntaCriteria) || !$this->lastAlpzaJuntaCriteria->equals($criteria)) {
					$count = AlpzaJuntaPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collAlpzaJuntas);
				}
			} else {
				$count = count($this->collAlpzaJuntas);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a AlpzaJunta object to this object
	 * through the AlpzaJunta foreign key attribute.
	 *
	 * @param      AlpzaJunta $l AlpzaJunta
	 * @return     void
	 * @throws     PropelException
	 */
	public function addAlpzaJunta(AlpzaJunta $l)
	{
		if ($this->collAlpzaJuntas === null) {
			$this->initAlpzaJuntas();
		}
		if (!in_array($l, $this->collAlpzaJuntas, true)) { // only add it if the **same** object is not already associated
			array_push($this->collAlpzaJuntas, $l);
			$l->setAlpzaMiembro($this);
		}
	}

	/**
	 * Clears out the collAlpzaComites collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addAlpzaComites()
	 */
	public function clearAlpzaComites()
	{
		$this->collAlpzaComites = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collAlpzaComites collection (array).
	 *
	 * By default this just sets the collAlpzaComites collection to an empty array (like clearcollAlpzaComites());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initAlpzaComites()
	{
		$this->collAlpzaComites = array();
	}

	/**
	 * Gets an array of AlpzaComite objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this AlpzaMiembro has previously been saved, it will retrieve
	 * related AlpzaComites from storage. If this AlpzaMiembro is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array AlpzaComite[]
	 * @throws     PropelException
	 */
	public function getAlpzaComites($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AlpzaMiembroPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAlpzaComites === null) {
			if ($this->isNew()) {
				$this->collAlpzaComites = array();
			} else {

				$criteria->add(AlpzaComitePeer::ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				AlpzaComitePeer::addSelectColumns($criteria);
				$this->collAlpzaComites = AlpzaComitePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(AlpzaComitePeer::ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				AlpzaComitePeer::addSelectColumns($criteria);
				if (!isset($this->lastAlpzaComiteCriteria) || !$this->lastAlpzaComiteCriteria->equals($criteria)) {
					$this->collAlpzaComites = AlpzaComitePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastAlpzaComiteCriteria = $criteria;
		return $this->collAlpzaComites;
	}

	/**
	 * Returns the number of related AlpzaComite objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related AlpzaComite objects.
	 * @throws     PropelException
	 */
	public function countAlpzaComites(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AlpzaMiembroPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collAlpzaComites === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(AlpzaComitePeer::ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				$count = AlpzaComitePeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(AlpzaComitePeer::ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				if (!isset($this->lastAlpzaComiteCriteria) || !$this->lastAlpzaComiteCriteria->equals($criteria)) {
					$count = AlpzaComitePeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collAlpzaComites);
				}
			} else {
				$count = count($this->collAlpzaComites);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a AlpzaComite object to this object
	 * through the AlpzaComite foreign key attribute.
	 *
	 * @param      AlpzaComite $l AlpzaComite
	 * @return     void
	 * @throws     PropelException
	 */
	public function addAlpzaComite(AlpzaComite $l)
	{
		if ($this->collAlpzaComites === null) {
			$this->initAlpzaComites();
		}
		if (!in_array($l, $this->collAlpzaComites, true)) { // only add it if the **same** object is not already associated
			array_push($this->collAlpzaComites, $l);
			$l->setAlpzaMiembro($this);
		}
	}

	/**
	 * Clears out the collAlpzaEventos collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addAlpzaEventos()
	 */
	public function clearAlpzaEventos()
	{
		$this->collAlpzaEventos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collAlpzaEventos collection (array).
	 *
	 * By default this just sets the collAlpzaEventos collection to an empty array (like clearcollAlpzaEventos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initAlpzaEventos()
	{
		$this->collAlpzaEventos = array();
	}

	/**
	 * Gets an array of AlpzaEvento objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this AlpzaMiembro has previously been saved, it will retrieve
	 * related AlpzaEventos from storage. If this AlpzaMiembro is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array AlpzaEvento[]
	 * @throws     PropelException
	 */
	public function getAlpzaEventos($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AlpzaMiembroPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAlpzaEventos === null) {
			if ($this->isNew()) {
				$this->collAlpzaEventos = array();
			} else {

				$criteria->add(AlpzaEventoPeer::ALPZA_MIEMBRO_ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				AlpzaEventoPeer::addSelectColumns($criteria);
				$this->collAlpzaEventos = AlpzaEventoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(AlpzaEventoPeer::ALPZA_MIEMBRO_ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				AlpzaEventoPeer::addSelectColumns($criteria);
				if (!isset($this->lastAlpzaEventoCriteria) || !$this->lastAlpzaEventoCriteria->equals($criteria)) {
					$this->collAlpzaEventos = AlpzaEventoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastAlpzaEventoCriteria = $criteria;
		return $this->collAlpzaEventos;
	}

	/**
	 * Returns the number of related AlpzaEvento objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related AlpzaEvento objects.
	 * @throws     PropelException
	 */
	public function countAlpzaEventos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AlpzaMiembroPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collAlpzaEventos === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(AlpzaEventoPeer::ALPZA_MIEMBRO_ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				$count = AlpzaEventoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(AlpzaEventoPeer::ALPZA_MIEMBRO_ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				if (!isset($this->lastAlpzaEventoCriteria) || !$this->lastAlpzaEventoCriteria->equals($criteria)) {
					$count = AlpzaEventoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collAlpzaEventos);
				}
			} else {
				$count = count($this->collAlpzaEventos);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a AlpzaEvento object to this object
	 * through the AlpzaEvento foreign key attribute.
	 *
	 * @param      AlpzaEvento $l AlpzaEvento
	 * @return     void
	 * @throws     PropelException
	 */
	public function addAlpzaEvento(AlpzaEvento $l)
	{
		if ($this->collAlpzaEventos === null) {
			$this->initAlpzaEventos();
		}
		if (!in_array($l, $this->collAlpzaEventos, true)) { // only add it if the **same** object is not already associated
			array_push($this->collAlpzaEventos, $l);
			$l->setAlpzaMiembro($this);
		}
	}

	/**
	 * Clears out the collAlpzaNoticias collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addAlpzaNoticias()
	 */
	public function clearAlpzaNoticias()
	{
		$this->collAlpzaNoticias = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collAlpzaNoticias collection (array).
	 *
	 * By default this just sets the collAlpzaNoticias collection to an empty array (like clearcollAlpzaNoticias());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initAlpzaNoticias()
	{
		$this->collAlpzaNoticias = array();
	}

	/**
	 * Gets an array of AlpzaNoticia objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this AlpzaMiembro has previously been saved, it will retrieve
	 * related AlpzaNoticias from storage. If this AlpzaMiembro is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array AlpzaNoticia[]
	 * @throws     PropelException
	 */
	public function getAlpzaNoticias($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AlpzaMiembroPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAlpzaNoticias === null) {
			if ($this->isNew()) {
				$this->collAlpzaNoticias = array();
			} else {

				$criteria->add(AlpzaNoticiaPeer::ALPZA_MIEMBRO_ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				AlpzaNoticiaPeer::addSelectColumns($criteria);
				$this->collAlpzaNoticias = AlpzaNoticiaPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(AlpzaNoticiaPeer::ALPZA_MIEMBRO_ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				AlpzaNoticiaPeer::addSelectColumns($criteria);
				if (!isset($this->lastAlpzaNoticiaCriteria) || !$this->lastAlpzaNoticiaCriteria->equals($criteria)) {
					$this->collAlpzaNoticias = AlpzaNoticiaPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastAlpzaNoticiaCriteria = $criteria;
		return $this->collAlpzaNoticias;
	}

	/**
	 * Returns the number of related AlpzaNoticia objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related AlpzaNoticia objects.
	 * @throws     PropelException
	 */
	public function countAlpzaNoticias(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AlpzaMiembroPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collAlpzaNoticias === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(AlpzaNoticiaPeer::ALPZA_MIEMBRO_ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				$count = AlpzaNoticiaPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(AlpzaNoticiaPeer::ALPZA_MIEMBRO_ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				if (!isset($this->lastAlpzaNoticiaCriteria) || !$this->lastAlpzaNoticiaCriteria->equals($criteria)) {
					$count = AlpzaNoticiaPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collAlpzaNoticias);
				}
			} else {
				$count = count($this->collAlpzaNoticias);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a AlpzaNoticia object to this object
	 * through the AlpzaNoticia foreign key attribute.
	 *
	 * @param      AlpzaNoticia $l AlpzaNoticia
	 * @return     void
	 * @throws     PropelException
	 */
	public function addAlpzaNoticia(AlpzaNoticia $l)
	{
		if ($this->collAlpzaNoticias === null) {
			$this->initAlpzaNoticias();
		}
		if (!in_array($l, $this->collAlpzaNoticias, true)) { // only add it if the **same** object is not already associated
			array_push($this->collAlpzaNoticias, $l);
			$l->setAlpzaMiembro($this);
		}
	}

	/**
	 * Clears out the collAlpzaPublicacions collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addAlpzaPublicacions()
	 */
	public function clearAlpzaPublicacions()
	{
		$this->collAlpzaPublicacions = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collAlpzaPublicacions collection (array).
	 *
	 * By default this just sets the collAlpzaPublicacions collection to an empty array (like clearcollAlpzaPublicacions());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initAlpzaPublicacions()
	{
		$this->collAlpzaPublicacions = array();
	}

	/**
	 * Gets an array of AlpzaPublicacion objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this AlpzaMiembro has previously been saved, it will retrieve
	 * related AlpzaPublicacions from storage. If this AlpzaMiembro is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array AlpzaPublicacion[]
	 * @throws     PropelException
	 */
	public function getAlpzaPublicacions($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AlpzaMiembroPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAlpzaPublicacions === null) {
			if ($this->isNew()) {
				$this->collAlpzaPublicacions = array();
			} else {

				$criteria->add(AlpzaPublicacionPeer::ALPZA_MIEMBRO_ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				AlpzaPublicacionPeer::addSelectColumns($criteria);
				$this->collAlpzaPublicacions = AlpzaPublicacionPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(AlpzaPublicacionPeer::ALPZA_MIEMBRO_ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				AlpzaPublicacionPeer::addSelectColumns($criteria);
				if (!isset($this->lastAlpzaPublicacionCriteria) || !$this->lastAlpzaPublicacionCriteria->equals($criteria)) {
					$this->collAlpzaPublicacions = AlpzaPublicacionPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastAlpzaPublicacionCriteria = $criteria;
		return $this->collAlpzaPublicacions;
	}

	/**
	 * Returns the number of related AlpzaPublicacion objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related AlpzaPublicacion objects.
	 * @throws     PropelException
	 */
	public function countAlpzaPublicacions(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AlpzaMiembroPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collAlpzaPublicacions === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(AlpzaPublicacionPeer::ALPZA_MIEMBRO_ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				$count = AlpzaPublicacionPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(AlpzaPublicacionPeer::ALPZA_MIEMBRO_ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				if (!isset($this->lastAlpzaPublicacionCriteria) || !$this->lastAlpzaPublicacionCriteria->equals($criteria)) {
					$count = AlpzaPublicacionPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collAlpzaPublicacions);
				}
			} else {
				$count = count($this->collAlpzaPublicacions);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a AlpzaPublicacion object to this object
	 * through the AlpzaPublicacion foreign key attribute.
	 *
	 * @param      AlpzaPublicacion $l AlpzaPublicacion
	 * @return     void
	 * @throws     PropelException
	 */
	public function addAlpzaPublicacion(AlpzaPublicacion $l)
	{
		if ($this->collAlpzaPublicacions === null) {
			$this->initAlpzaPublicacions();
		}
		if (!in_array($l, $this->collAlpzaPublicacions, true)) { // only add it if the **same** object is not already associated
			array_push($this->collAlpzaPublicacions, $l);
			$l->setAlpzaMiembro($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this AlpzaMiembro is new, it will return
	 * an empty collection; or if this AlpzaMiembro has previously
	 * been saved, it will retrieve related AlpzaPublicacions from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in AlpzaMiembro.
	 */
	public function getAlpzaPublicacionsJoinAlpzaPublicacionTipo($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AlpzaMiembroPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAlpzaPublicacions === null) {
			if ($this->isNew()) {
				$this->collAlpzaPublicacions = array();
			} else {

				$criteria->add(AlpzaPublicacionPeer::ALPZA_MIEMBRO_ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				$this->collAlpzaPublicacions = AlpzaPublicacionPeer::doSelectJoinAlpzaPublicacionTipo($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(AlpzaPublicacionPeer::ALPZA_MIEMBRO_ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

			if (!isset($this->lastAlpzaPublicacionCriteria) || !$this->lastAlpzaPublicacionCriteria->equals($criteria)) {
				$this->collAlpzaPublicacions = AlpzaPublicacionPeer::doSelectJoinAlpzaPublicacionTipo($criteria, $con, $join_behavior);
			}
		}
		$this->lastAlpzaPublicacionCriteria = $criteria;

		return $this->collAlpzaPublicacions;
	}

	/**
	 * Clears out the collAlpzaCongresos collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addAlpzaCongresos()
	 */
	public function clearAlpzaCongresos()
	{
		$this->collAlpzaCongresos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collAlpzaCongresos collection (array).
	 *
	 * By default this just sets the collAlpzaCongresos collection to an empty array (like clearcollAlpzaCongresos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initAlpzaCongresos()
	{
		$this->collAlpzaCongresos = array();
	}

	/**
	 * Gets an array of AlpzaCongreso objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this AlpzaMiembro has previously been saved, it will retrieve
	 * related AlpzaCongresos from storage. If this AlpzaMiembro is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array AlpzaCongreso[]
	 * @throws     PropelException
	 */
	public function getAlpzaCongresos($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AlpzaMiembroPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAlpzaCongresos === null) {
			if ($this->isNew()) {
				$this->collAlpzaCongresos = array();
			} else {

				$criteria->add(AlpzaCongresoPeer::ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				AlpzaCongresoPeer::addSelectColumns($criteria);
				$this->collAlpzaCongresos = AlpzaCongresoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(AlpzaCongresoPeer::ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				AlpzaCongresoPeer::addSelectColumns($criteria);
				if (!isset($this->lastAlpzaCongresoCriteria) || !$this->lastAlpzaCongresoCriteria->equals($criteria)) {
					$this->collAlpzaCongresos = AlpzaCongresoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastAlpzaCongresoCriteria = $criteria;
		return $this->collAlpzaCongresos;
	}

	/**
	 * Returns the number of related AlpzaCongreso objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related AlpzaCongreso objects.
	 * @throws     PropelException
	 */
	public function countAlpzaCongresos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AlpzaMiembroPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collAlpzaCongresos === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(AlpzaCongresoPeer::ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				$count = AlpzaCongresoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(AlpzaCongresoPeer::ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				if (!isset($this->lastAlpzaCongresoCriteria) || !$this->lastAlpzaCongresoCriteria->equals($criteria)) {
					$count = AlpzaCongresoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collAlpzaCongresos);
				}
			} else {
				$count = count($this->collAlpzaCongresos);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a AlpzaCongreso object to this object
	 * through the AlpzaCongreso foreign key attribute.
	 *
	 * @param      AlpzaCongreso $l AlpzaCongreso
	 * @return     void
	 * @throws     PropelException
	 */
	public function addAlpzaCongreso(AlpzaCongreso $l)
	{
		if ($this->collAlpzaCongresos === null) {
			$this->initAlpzaCongresos();
		}
		if (!in_array($l, $this->collAlpzaCongresos, true)) { // only add it if the **same** object is not already associated
			array_push($this->collAlpzaCongresos, $l);
			$l->setAlpzaMiembro($this);
		}
	}

	/**
	 * Clears out the collAlpzaBecas collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addAlpzaBecas()
	 */
	public function clearAlpzaBecas()
	{
		$this->collAlpzaBecas = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collAlpzaBecas collection (array).
	 *
	 * By default this just sets the collAlpzaBecas collection to an empty array (like clearcollAlpzaBecas());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initAlpzaBecas()
	{
		$this->collAlpzaBecas = array();
	}

	/**
	 * Gets an array of AlpzaBeca objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this AlpzaMiembro has previously been saved, it will retrieve
	 * related AlpzaBecas from storage. If this AlpzaMiembro is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array AlpzaBeca[]
	 * @throws     PropelException
	 */
	public function getAlpzaBecas($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AlpzaMiembroPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAlpzaBecas === null) {
			if ($this->isNew()) {
				$this->collAlpzaBecas = array();
			} else {

				$criteria->add(AlpzaBecaPeer::ALPZA_MIEMBRO_ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				AlpzaBecaPeer::addSelectColumns($criteria);
				$this->collAlpzaBecas = AlpzaBecaPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(AlpzaBecaPeer::ALPZA_MIEMBRO_ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				AlpzaBecaPeer::addSelectColumns($criteria);
				if (!isset($this->lastAlpzaBecaCriteria) || !$this->lastAlpzaBecaCriteria->equals($criteria)) {
					$this->collAlpzaBecas = AlpzaBecaPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastAlpzaBecaCriteria = $criteria;
		return $this->collAlpzaBecas;
	}

	/**
	 * Returns the number of related AlpzaBeca objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related AlpzaBeca objects.
	 * @throws     PropelException
	 */
	public function countAlpzaBecas(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AlpzaMiembroPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collAlpzaBecas === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(AlpzaBecaPeer::ALPZA_MIEMBRO_ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				$count = AlpzaBecaPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(AlpzaBecaPeer::ALPZA_MIEMBRO_ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				if (!isset($this->lastAlpzaBecaCriteria) || !$this->lastAlpzaBecaCriteria->equals($criteria)) {
					$count = AlpzaBecaPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collAlpzaBecas);
				}
			} else {
				$count = count($this->collAlpzaBecas);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a AlpzaBeca object to this object
	 * through the AlpzaBeca foreign key attribute.
	 *
	 * @param      AlpzaBeca $l AlpzaBeca
	 * @return     void
	 * @throws     PropelException
	 */
	public function addAlpzaBeca(AlpzaBeca $l)
	{
		if ($this->collAlpzaBecas === null) {
			$this->initAlpzaBecas();
		}
		if (!in_array($l, $this->collAlpzaBecas, true)) { // only add it if the **same** object is not already associated
			array_push($this->collAlpzaBecas, $l);
			$l->setAlpzaMiembro($this);
		}
	}

	/**
	 * Clears out the collAlpzaInformacions collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addAlpzaInformacions()
	 */
	public function clearAlpzaInformacions()
	{
		$this->collAlpzaInformacions = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collAlpzaInformacions collection (array).
	 *
	 * By default this just sets the collAlpzaInformacions collection to an empty array (like clearcollAlpzaInformacions());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initAlpzaInformacions()
	{
		$this->collAlpzaInformacions = array();
	}

	/**
	 * Gets an array of AlpzaInformacion objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this AlpzaMiembro has previously been saved, it will retrieve
	 * related AlpzaInformacions from storage. If this AlpzaMiembro is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array AlpzaInformacion[]
	 * @throws     PropelException
	 */
	public function getAlpzaInformacions($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AlpzaMiembroPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAlpzaInformacions === null) {
			if ($this->isNew()) {
				$this->collAlpzaInformacions = array();
			} else {

				$criteria->add(AlpzaInformacionPeer::ALPZA_MIEMBRO_ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				AlpzaInformacionPeer::addSelectColumns($criteria);
				$this->collAlpzaInformacions = AlpzaInformacionPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(AlpzaInformacionPeer::ALPZA_MIEMBRO_ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				AlpzaInformacionPeer::addSelectColumns($criteria);
				if (!isset($this->lastAlpzaInformacionCriteria) || !$this->lastAlpzaInformacionCriteria->equals($criteria)) {
					$this->collAlpzaInformacions = AlpzaInformacionPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastAlpzaInformacionCriteria = $criteria;
		return $this->collAlpzaInformacions;
	}

	/**
	 * Returns the number of related AlpzaInformacion objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related AlpzaInformacion objects.
	 * @throws     PropelException
	 */
	public function countAlpzaInformacions(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AlpzaMiembroPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collAlpzaInformacions === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(AlpzaInformacionPeer::ALPZA_MIEMBRO_ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				$count = AlpzaInformacionPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(AlpzaInformacionPeer::ALPZA_MIEMBRO_ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				if (!isset($this->lastAlpzaInformacionCriteria) || !$this->lastAlpzaInformacionCriteria->equals($criteria)) {
					$count = AlpzaInformacionPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collAlpzaInformacions);
				}
			} else {
				$count = count($this->collAlpzaInformacions);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a AlpzaInformacion object to this object
	 * through the AlpzaInformacion foreign key attribute.
	 *
	 * @param      AlpzaInformacion $l AlpzaInformacion
	 * @return     void
	 * @throws     PropelException
	 */
	public function addAlpzaInformacion(AlpzaInformacion $l)
	{
		if ($this->collAlpzaInformacions === null) {
			$this->initAlpzaInformacions();
		}
		if (!in_array($l, $this->collAlpzaInformacions, true)) { // only add it if the **same** object is not already associated
			array_push($this->collAlpzaInformacions, $l);
			$l->setAlpzaMiembro($this);
		}
	}

	/**
	 * Clears out the collAlpzaMiembroAsignados collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addAlpzaMiembroAsignados()
	 */
	public function clearAlpzaMiembroAsignados()
	{
		$this->collAlpzaMiembroAsignados = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collAlpzaMiembroAsignados collection (array).
	 *
	 * By default this just sets the collAlpzaMiembroAsignados collection to an empty array (like clearcollAlpzaMiembroAsignados());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initAlpzaMiembroAsignados()
	{
		$this->collAlpzaMiembroAsignados = array();
	}

	/**
	 * Gets an array of AlpzaMiembroAsignado objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this AlpzaMiembro has previously been saved, it will retrieve
	 * related AlpzaMiembroAsignados from storage. If this AlpzaMiembro is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array AlpzaMiembroAsignado[]
	 * @throws     PropelException
	 */
	public function getAlpzaMiembroAsignados($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AlpzaMiembroPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAlpzaMiembroAsignados === null) {
			if ($this->isNew()) {
				$this->collAlpzaMiembroAsignados = array();
			} else {

				$criteria->add(AlpzaMiembroAsignadoPeer::ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				AlpzaMiembroAsignadoPeer::addSelectColumns($criteria);
				$this->collAlpzaMiembroAsignados = AlpzaMiembroAsignadoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(AlpzaMiembroAsignadoPeer::ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				AlpzaMiembroAsignadoPeer::addSelectColumns($criteria);
				if (!isset($this->lastAlpzaMiembroAsignadoCriteria) || !$this->lastAlpzaMiembroAsignadoCriteria->equals($criteria)) {
					$this->collAlpzaMiembroAsignados = AlpzaMiembroAsignadoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastAlpzaMiembroAsignadoCriteria = $criteria;
		return $this->collAlpzaMiembroAsignados;
	}

	/**
	 * Returns the number of related AlpzaMiembroAsignado objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related AlpzaMiembroAsignado objects.
	 * @throws     PropelException
	 */
	public function countAlpzaMiembroAsignados(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AlpzaMiembroPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collAlpzaMiembroAsignados === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(AlpzaMiembroAsignadoPeer::ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				$count = AlpzaMiembroAsignadoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(AlpzaMiembroAsignadoPeer::ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				if (!isset($this->lastAlpzaMiembroAsignadoCriteria) || !$this->lastAlpzaMiembroAsignadoCriteria->equals($criteria)) {
					$count = AlpzaMiembroAsignadoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collAlpzaMiembroAsignados);
				}
			} else {
				$count = count($this->collAlpzaMiembroAsignados);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a AlpzaMiembroAsignado object to this object
	 * through the AlpzaMiembroAsignado foreign key attribute.
	 *
	 * @param      AlpzaMiembroAsignado $l AlpzaMiembroAsignado
	 * @return     void
	 * @throws     PropelException
	 */
	public function addAlpzaMiembroAsignado(AlpzaMiembroAsignado $l)
	{
		if ($this->collAlpzaMiembroAsignados === null) {
			$this->initAlpzaMiembroAsignados();
		}
		if (!in_array($l, $this->collAlpzaMiembroAsignados, true)) { // only add it if the **same** object is not already associated
			array_push($this->collAlpzaMiembroAsignados, $l);
			$l->setAlpzaMiembro($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this AlpzaMiembro is new, it will return
	 * an empty collection; or if this AlpzaMiembro has previously
	 * been saved, it will retrieve related AlpzaMiembroAsignados from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in AlpzaMiembro.
	 */
	public function getAlpzaMiembroAsignadosJoinsfGuardUser($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AlpzaMiembroPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAlpzaMiembroAsignados === null) {
			if ($this->isNew()) {
				$this->collAlpzaMiembroAsignados = array();
			} else {

				$criteria->add(AlpzaMiembroAsignadoPeer::ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				$this->collAlpzaMiembroAsignados = AlpzaMiembroAsignadoPeer::doSelectJoinsfGuardUser($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(AlpzaMiembroAsignadoPeer::ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

			if (!isset($this->lastAlpzaMiembroAsignadoCriteria) || !$this->lastAlpzaMiembroAsignadoCriteria->equals($criteria)) {
				$this->collAlpzaMiembroAsignados = AlpzaMiembroAsignadoPeer::doSelectJoinsfGuardUser($criteria, $con, $join_behavior);
			}
		}
		$this->lastAlpzaMiembroAsignadoCriteria = $criteria;

		return $this->collAlpzaMiembroAsignados;
	}

	/**
	 * Clears out the collAlpzaMiembroFinanzass collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addAlpzaMiembroFinanzass()
	 */
	public function clearAlpzaMiembroFinanzass()
	{
		$this->collAlpzaMiembroFinanzass = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collAlpzaMiembroFinanzass collection (array).
	 *
	 * By default this just sets the collAlpzaMiembroFinanzass collection to an empty array (like clearcollAlpzaMiembroFinanzass());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initAlpzaMiembroFinanzass()
	{
		$this->collAlpzaMiembroFinanzass = array();
	}

	/**
	 * Gets an array of AlpzaMiembroFinanzas objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this AlpzaMiembro has previously been saved, it will retrieve
	 * related AlpzaMiembroFinanzass from storage. If this AlpzaMiembro is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array AlpzaMiembroFinanzas[]
	 * @throws     PropelException
	 */
	public function getAlpzaMiembroFinanzass($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AlpzaMiembroPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAlpzaMiembroFinanzass === null) {
			if ($this->isNew()) {
				$this->collAlpzaMiembroFinanzass = array();
			} else {

				$criteria->add(AlpzaMiembroFinanzasPeer::ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				AlpzaMiembroFinanzasPeer::addSelectColumns($criteria);
				$this->collAlpzaMiembroFinanzass = AlpzaMiembroFinanzasPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(AlpzaMiembroFinanzasPeer::ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				AlpzaMiembroFinanzasPeer::addSelectColumns($criteria);
				if (!isset($this->lastAlpzaMiembroFinanzasCriteria) || !$this->lastAlpzaMiembroFinanzasCriteria->equals($criteria)) {
					$this->collAlpzaMiembroFinanzass = AlpzaMiembroFinanzasPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastAlpzaMiembroFinanzasCriteria = $criteria;
		return $this->collAlpzaMiembroFinanzass;
	}

	/**
	 * Returns the number of related AlpzaMiembroFinanzas objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related AlpzaMiembroFinanzas objects.
	 * @throws     PropelException
	 */
	public function countAlpzaMiembroFinanzass(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AlpzaMiembroPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collAlpzaMiembroFinanzass === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(AlpzaMiembroFinanzasPeer::ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				$count = AlpzaMiembroFinanzasPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(AlpzaMiembroFinanzasPeer::ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				if (!isset($this->lastAlpzaMiembroFinanzasCriteria) || !$this->lastAlpzaMiembroFinanzasCriteria->equals($criteria)) {
					$count = AlpzaMiembroFinanzasPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collAlpzaMiembroFinanzass);
				}
			} else {
				$count = count($this->collAlpzaMiembroFinanzass);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a AlpzaMiembroFinanzas object to this object
	 * through the AlpzaMiembroFinanzas foreign key attribute.
	 *
	 * @param      AlpzaMiembroFinanzas $l AlpzaMiembroFinanzas
	 * @return     void
	 * @throws     PropelException
	 */
	public function addAlpzaMiembroFinanzas(AlpzaMiembroFinanzas $l)
	{
		if ($this->collAlpzaMiembroFinanzass === null) {
			$this->initAlpzaMiembroFinanzass();
		}
		if (!in_array($l, $this->collAlpzaMiembroFinanzass, true)) { // only add it if the **same** object is not already associated
			array_push($this->collAlpzaMiembroFinanzass, $l);
			$l->setAlpzaMiembro($this);
		}
	}

	/**
	 * Clears out the collAlpzaMiembroColeccions collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addAlpzaMiembroColeccions()
	 */
	public function clearAlpzaMiembroColeccions()
	{
		$this->collAlpzaMiembroColeccions = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collAlpzaMiembroColeccions collection (array).
	 *
	 * By default this just sets the collAlpzaMiembroColeccions collection to an empty array (like clearcollAlpzaMiembroColeccions());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initAlpzaMiembroColeccions()
	{
		$this->collAlpzaMiembroColeccions = array();
	}

	/**
	 * Gets an array of AlpzaMiembroColeccion objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this AlpzaMiembro has previously been saved, it will retrieve
	 * related AlpzaMiembroColeccions from storage. If this AlpzaMiembro is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array AlpzaMiembroColeccion[]
	 * @throws     PropelException
	 */
	public function getAlpzaMiembroColeccions($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AlpzaMiembroPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAlpzaMiembroColeccions === null) {
			if ($this->isNew()) {
				$this->collAlpzaMiembroColeccions = array();
			} else {

				$criteria->add(AlpzaMiembroColeccionPeer::ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				AlpzaMiembroColeccionPeer::addSelectColumns($criteria);
				$this->collAlpzaMiembroColeccions = AlpzaMiembroColeccionPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(AlpzaMiembroColeccionPeer::ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				AlpzaMiembroColeccionPeer::addSelectColumns($criteria);
				if (!isset($this->lastAlpzaMiembroColeccionCriteria) || !$this->lastAlpzaMiembroColeccionCriteria->equals($criteria)) {
					$this->collAlpzaMiembroColeccions = AlpzaMiembroColeccionPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastAlpzaMiembroColeccionCriteria = $criteria;
		return $this->collAlpzaMiembroColeccions;
	}

	/**
	 * Returns the number of related AlpzaMiembroColeccion objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related AlpzaMiembroColeccion objects.
	 * @throws     PropelException
	 */
	public function countAlpzaMiembroColeccions(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AlpzaMiembroPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collAlpzaMiembroColeccions === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(AlpzaMiembroColeccionPeer::ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				$count = AlpzaMiembroColeccionPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(AlpzaMiembroColeccionPeer::ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				if (!isset($this->lastAlpzaMiembroColeccionCriteria) || !$this->lastAlpzaMiembroColeccionCriteria->equals($criteria)) {
					$count = AlpzaMiembroColeccionPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collAlpzaMiembroColeccions);
				}
			} else {
				$count = count($this->collAlpzaMiembroColeccions);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a AlpzaMiembroColeccion object to this object
	 * through the AlpzaMiembroColeccion foreign key attribute.
	 *
	 * @param      AlpzaMiembroColeccion $l AlpzaMiembroColeccion
	 * @return     void
	 * @throws     PropelException
	 */
	public function addAlpzaMiembroColeccion(AlpzaMiembroColeccion $l)
	{
		if ($this->collAlpzaMiembroColeccions === null) {
			$this->initAlpzaMiembroColeccions();
		}
		if (!in_array($l, $this->collAlpzaMiembroColeccions, true)) { // only add it if the **same** object is not already associated
			array_push($this->collAlpzaMiembroColeccions, $l);
			$l->setAlpzaMiembro($this);
		}
	}

	/**
	 * Clears out the collAlpzaMiembroProfesionals collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addAlpzaMiembroProfesionals()
	 */
	public function clearAlpzaMiembroProfesionals()
	{
		$this->collAlpzaMiembroProfesionals = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collAlpzaMiembroProfesionals collection (array).
	 *
	 * By default this just sets the collAlpzaMiembroProfesionals collection to an empty array (like clearcollAlpzaMiembroProfesionals());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initAlpzaMiembroProfesionals()
	{
		$this->collAlpzaMiembroProfesionals = array();
	}

	/**
	 * Gets an array of AlpzaMiembroProfesional objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this AlpzaMiembro has previously been saved, it will retrieve
	 * related AlpzaMiembroProfesionals from storage. If this AlpzaMiembro is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array AlpzaMiembroProfesional[]
	 * @throws     PropelException
	 */
	public function getAlpzaMiembroProfesionals($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AlpzaMiembroPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAlpzaMiembroProfesionals === null) {
			if ($this->isNew()) {
				$this->collAlpzaMiembroProfesionals = array();
			} else {

				$criteria->add(AlpzaMiembroProfesionalPeer::ALPZA_MIEMBRO_ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				AlpzaMiembroProfesionalPeer::addSelectColumns($criteria);
				$this->collAlpzaMiembroProfesionals = AlpzaMiembroProfesionalPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(AlpzaMiembroProfesionalPeer::ALPZA_MIEMBRO_ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				AlpzaMiembroProfesionalPeer::addSelectColumns($criteria);
				if (!isset($this->lastAlpzaMiembroProfesionalCriteria) || !$this->lastAlpzaMiembroProfesionalCriteria->equals($criteria)) {
					$this->collAlpzaMiembroProfesionals = AlpzaMiembroProfesionalPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastAlpzaMiembroProfesionalCriteria = $criteria;
		return $this->collAlpzaMiembroProfesionals;
	}

	/**
	 * Returns the number of related AlpzaMiembroProfesional objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related AlpzaMiembroProfesional objects.
	 * @throws     PropelException
	 */
	public function countAlpzaMiembroProfesionals(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AlpzaMiembroPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collAlpzaMiembroProfesionals === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(AlpzaMiembroProfesionalPeer::ALPZA_MIEMBRO_ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				$count = AlpzaMiembroProfesionalPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(AlpzaMiembroProfesionalPeer::ALPZA_MIEMBRO_ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				if (!isset($this->lastAlpzaMiembroProfesionalCriteria) || !$this->lastAlpzaMiembroProfesionalCriteria->equals($criteria)) {
					$count = AlpzaMiembroProfesionalPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collAlpzaMiembroProfesionals);
				}
			} else {
				$count = count($this->collAlpzaMiembroProfesionals);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a AlpzaMiembroProfesional object to this object
	 * through the AlpzaMiembroProfesional foreign key attribute.
	 *
	 * @param      AlpzaMiembroProfesional $l AlpzaMiembroProfesional
	 * @return     void
	 * @throws     PropelException
	 */
	public function addAlpzaMiembroProfesional(AlpzaMiembroProfesional $l)
	{
		if ($this->collAlpzaMiembroProfesionals === null) {
			$this->initAlpzaMiembroProfesionals();
		}
		if (!in_array($l, $this->collAlpzaMiembroProfesionals, true)) { // only add it if the **same** object is not already associated
			array_push($this->collAlpzaMiembroProfesionals, $l);
			$l->setAlpzaMiembro($this);
		}
	}

	/**
	 * Clears out the collAlpzaMiembroAsociadoss collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addAlpzaMiembroAsociadoss()
	 */
	public function clearAlpzaMiembroAsociadoss()
	{
		$this->collAlpzaMiembroAsociadoss = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collAlpzaMiembroAsociadoss collection (array).
	 *
	 * By default this just sets the collAlpzaMiembroAsociadoss collection to an empty array (like clearcollAlpzaMiembroAsociadoss());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initAlpzaMiembroAsociadoss()
	{
		$this->collAlpzaMiembroAsociadoss = array();
	}

	/**
	 * Gets an array of AlpzaMiembroAsociados objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this AlpzaMiembro has previously been saved, it will retrieve
	 * related AlpzaMiembroAsociadoss from storage. If this AlpzaMiembro is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array AlpzaMiembroAsociados[]
	 * @throws     PropelException
	 */
	public function getAlpzaMiembroAsociadoss($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AlpzaMiembroPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAlpzaMiembroAsociadoss === null) {
			if ($this->isNew()) {
				$this->collAlpzaMiembroAsociadoss = array();
			} else {

				$criteria->add(AlpzaMiembroAsociadosPeer::ALPZA_MIEMBRO_ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				AlpzaMiembroAsociadosPeer::addSelectColumns($criteria);
				$this->collAlpzaMiembroAsociadoss = AlpzaMiembroAsociadosPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(AlpzaMiembroAsociadosPeer::ALPZA_MIEMBRO_ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				AlpzaMiembroAsociadosPeer::addSelectColumns($criteria);
				if (!isset($this->lastAlpzaMiembroAsociadosCriteria) || !$this->lastAlpzaMiembroAsociadosCriteria->equals($criteria)) {
					$this->collAlpzaMiembroAsociadoss = AlpzaMiembroAsociadosPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastAlpzaMiembroAsociadosCriteria = $criteria;
		return $this->collAlpzaMiembroAsociadoss;
	}

	/**
	 * Returns the number of related AlpzaMiembroAsociados objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related AlpzaMiembroAsociados objects.
	 * @throws     PropelException
	 */
	public function countAlpzaMiembroAsociadoss(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AlpzaMiembroPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collAlpzaMiembroAsociadoss === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(AlpzaMiembroAsociadosPeer::ALPZA_MIEMBRO_ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				$count = AlpzaMiembroAsociadosPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(AlpzaMiembroAsociadosPeer::ALPZA_MIEMBRO_ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				if (!isset($this->lastAlpzaMiembroAsociadosCriteria) || !$this->lastAlpzaMiembroAsociadosCriteria->equals($criteria)) {
					$count = AlpzaMiembroAsociadosPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collAlpzaMiembroAsociadoss);
				}
			} else {
				$count = count($this->collAlpzaMiembroAsociadoss);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a AlpzaMiembroAsociados object to this object
	 * through the AlpzaMiembroAsociados foreign key attribute.
	 *
	 * @param      AlpzaMiembroAsociados $l AlpzaMiembroAsociados
	 * @return     void
	 * @throws     PropelException
	 */
	public function addAlpzaMiembroAsociados(AlpzaMiembroAsociados $l)
	{
		if ($this->collAlpzaMiembroAsociadoss === null) {
			$this->initAlpzaMiembroAsociadoss();
		}
		if (!in_array($l, $this->collAlpzaMiembroAsociadoss, true)) { // only add it if the **same** object is not already associated
			array_push($this->collAlpzaMiembroAsociadoss, $l);
			$l->setAlpzaMiembro($this);
		}
	}

	/**
	 * Clears out the collAlpzaMiembroRegionals collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addAlpzaMiembroRegionals()
	 */
	public function clearAlpzaMiembroRegionals()
	{
		$this->collAlpzaMiembroRegionals = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collAlpzaMiembroRegionals collection (array).
	 *
	 * By default this just sets the collAlpzaMiembroRegionals collection to an empty array (like clearcollAlpzaMiembroRegionals());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initAlpzaMiembroRegionals()
	{
		$this->collAlpzaMiembroRegionals = array();
	}

	/**
	 * Gets an array of AlpzaMiembroRegional objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this AlpzaMiembro has previously been saved, it will retrieve
	 * related AlpzaMiembroRegionals from storage. If this AlpzaMiembro is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array AlpzaMiembroRegional[]
	 * @throws     PropelException
	 */
	public function getAlpzaMiembroRegionals($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AlpzaMiembroPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAlpzaMiembroRegionals === null) {
			if ($this->isNew()) {
				$this->collAlpzaMiembroRegionals = array();
			} else {

				$criteria->add(AlpzaMiembroRegionalPeer::ALPZA_MIEMBRO_ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				AlpzaMiembroRegionalPeer::addSelectColumns($criteria);
				$this->collAlpzaMiembroRegionals = AlpzaMiembroRegionalPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(AlpzaMiembroRegionalPeer::ALPZA_MIEMBRO_ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				AlpzaMiembroRegionalPeer::addSelectColumns($criteria);
				if (!isset($this->lastAlpzaMiembroRegionalCriteria) || !$this->lastAlpzaMiembroRegionalCriteria->equals($criteria)) {
					$this->collAlpzaMiembroRegionals = AlpzaMiembroRegionalPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastAlpzaMiembroRegionalCriteria = $criteria;
		return $this->collAlpzaMiembroRegionals;
	}

	/**
	 * Returns the number of related AlpzaMiembroRegional objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related AlpzaMiembroRegional objects.
	 * @throws     PropelException
	 */
	public function countAlpzaMiembroRegionals(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AlpzaMiembroPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collAlpzaMiembroRegionals === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(AlpzaMiembroRegionalPeer::ALPZA_MIEMBRO_ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				$count = AlpzaMiembroRegionalPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(AlpzaMiembroRegionalPeer::ALPZA_MIEMBRO_ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				if (!isset($this->lastAlpzaMiembroRegionalCriteria) || !$this->lastAlpzaMiembroRegionalCriteria->equals($criteria)) {
					$count = AlpzaMiembroRegionalPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collAlpzaMiembroRegionals);
				}
			} else {
				$count = count($this->collAlpzaMiembroRegionals);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a AlpzaMiembroRegional object to this object
	 * through the AlpzaMiembroRegional foreign key attribute.
	 *
	 * @param      AlpzaMiembroRegional $l AlpzaMiembroRegional
	 * @return     void
	 * @throws     PropelException
	 */
	public function addAlpzaMiembroRegional(AlpzaMiembroRegional $l)
	{
		if ($this->collAlpzaMiembroRegionals === null) {
			$this->initAlpzaMiembroRegionals();
		}
		if (!in_array($l, $this->collAlpzaMiembroRegionals, true)) { // only add it if the **same** object is not already associated
			array_push($this->collAlpzaMiembroRegionals, $l);
			$l->setAlpzaMiembro($this);
		}
	}

	/**
	 * Clears out the collAlpzaMiembroNacionaless collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addAlpzaMiembroNacionaless()
	 */
	public function clearAlpzaMiembroNacionaless()
	{
		$this->collAlpzaMiembroNacionaless = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collAlpzaMiembroNacionaless collection (array).
	 *
	 * By default this just sets the collAlpzaMiembroNacionaless collection to an empty array (like clearcollAlpzaMiembroNacionaless());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initAlpzaMiembroNacionaless()
	{
		$this->collAlpzaMiembroNacionaless = array();
	}

	/**
	 * Gets an array of AlpzaMiembroNacionales objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this AlpzaMiembro has previously been saved, it will retrieve
	 * related AlpzaMiembroNacionaless from storage. If this AlpzaMiembro is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array AlpzaMiembroNacionales[]
	 * @throws     PropelException
	 */
	public function getAlpzaMiembroNacionaless($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AlpzaMiembroPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAlpzaMiembroNacionaless === null) {
			if ($this->isNew()) {
				$this->collAlpzaMiembroNacionaless = array();
			} else {

				$criteria->add(AlpzaMiembroNacionalesPeer::ALPZA_MIEMBRO_ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				AlpzaMiembroNacionalesPeer::addSelectColumns($criteria);
				$this->collAlpzaMiembroNacionaless = AlpzaMiembroNacionalesPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(AlpzaMiembroNacionalesPeer::ALPZA_MIEMBRO_ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				AlpzaMiembroNacionalesPeer::addSelectColumns($criteria);
				if (!isset($this->lastAlpzaMiembroNacionalesCriteria) || !$this->lastAlpzaMiembroNacionalesCriteria->equals($criteria)) {
					$this->collAlpzaMiembroNacionaless = AlpzaMiembroNacionalesPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastAlpzaMiembroNacionalesCriteria = $criteria;
		return $this->collAlpzaMiembroNacionaless;
	}

	/**
	 * Returns the number of related AlpzaMiembroNacionales objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related AlpzaMiembroNacionales objects.
	 * @throws     PropelException
	 */
	public function countAlpzaMiembroNacionaless(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AlpzaMiembroPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collAlpzaMiembroNacionaless === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(AlpzaMiembroNacionalesPeer::ALPZA_MIEMBRO_ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				$count = AlpzaMiembroNacionalesPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(AlpzaMiembroNacionalesPeer::ALPZA_MIEMBRO_ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);

				if (!isset($this->lastAlpzaMiembroNacionalesCriteria) || !$this->lastAlpzaMiembroNacionalesCriteria->equals($criteria)) {
					$count = AlpzaMiembroNacionalesPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collAlpzaMiembroNacionaless);
				}
			} else {
				$count = count($this->collAlpzaMiembroNacionaless);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a AlpzaMiembroNacionales object to this object
	 * through the AlpzaMiembroNacionales foreign key attribute.
	 *
	 * @param      AlpzaMiembroNacionales $l AlpzaMiembroNacionales
	 * @return     void
	 * @throws     PropelException
	 */
	public function addAlpzaMiembroNacionales(AlpzaMiembroNacionales $l)
	{
		if ($this->collAlpzaMiembroNacionaless === null) {
			$this->initAlpzaMiembroNacionaless();
		}
		if (!in_array($l, $this->collAlpzaMiembroNacionaless, true)) { // only add it if the **same** object is not already associated
			array_push($this->collAlpzaMiembroNacionaless, $l);
			$l->setAlpzaMiembro($this);
		}
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collAlpzaJuntas) {
				foreach ((array) $this->collAlpzaJuntas as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collAlpzaComites) {
				foreach ((array) $this->collAlpzaComites as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collAlpzaEventos) {
				foreach ((array) $this->collAlpzaEventos as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collAlpzaNoticias) {
				foreach ((array) $this->collAlpzaNoticias as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collAlpzaPublicacions) {
				foreach ((array) $this->collAlpzaPublicacions as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collAlpzaCongresos) {
				foreach ((array) $this->collAlpzaCongresos as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collAlpzaBecas) {
				foreach ((array) $this->collAlpzaBecas as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collAlpzaInformacions) {
				foreach ((array) $this->collAlpzaInformacions as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collAlpzaMiembroAsignados) {
				foreach ((array) $this->collAlpzaMiembroAsignados as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collAlpzaMiembroFinanzass) {
				foreach ((array) $this->collAlpzaMiembroFinanzass as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collAlpzaMiembroColeccions) {
				foreach ((array) $this->collAlpzaMiembroColeccions as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collAlpzaMiembroProfesionals) {
				foreach ((array) $this->collAlpzaMiembroProfesionals as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collAlpzaMiembroAsociadoss) {
				foreach ((array) $this->collAlpzaMiembroAsociadoss as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collAlpzaMiembroRegionals) {
				foreach ((array) $this->collAlpzaMiembroRegionals as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collAlpzaMiembroNacionaless) {
				foreach ((array) $this->collAlpzaMiembroNacionaless as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collAlpzaJuntas = null;
		$this->collAlpzaComites = null;
		$this->collAlpzaEventos = null;
		$this->collAlpzaNoticias = null;
		$this->collAlpzaPublicacions = null;
		$this->collAlpzaCongresos = null;
		$this->collAlpzaBecas = null;
		$this->collAlpzaInformacions = null;
		$this->collAlpzaMiembroAsignados = null;
		$this->collAlpzaMiembroFinanzass = null;
		$this->collAlpzaMiembroColeccions = null;
		$this->collAlpzaMiembroProfesionals = null;
		$this->collAlpzaMiembroAsociadoss = null;
		$this->collAlpzaMiembroRegionals = null;
		$this->collAlpzaMiembroNacionaless = null;
	}

	// symfony_behaviors behavior

	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
		if (!$callable = sfMixer::getCallable('BaseAlpzaMiembro:'.$method))
		{
			throw new sfException(sprintf('Call to undefined method BaseAlpzaMiembro::%s', $method));
		}

		array_unshift($arguments, $this);

		return call_user_func_array($callable, $arguments);
	}

} // BaseAlpzaMiembro
