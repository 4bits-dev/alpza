<?php

/**
 * Base class that represents a row from the 'alpza_miembro_anexo' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Sat Nov 24 15:06:50 2012
 *
 * @package    lib.model.om
 */
abstract class BaseAlpzaMiembroAnexo extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        AlpzaMiembroAnexoPeer
	 */
	protected static $peer;

	/**
	 * The value for the id_alpza_miembro_anexo field.
	 * @var        int
	 */
	protected $id_alpza_miembro_anexo;

	/**
	 * The value for the id_alpza_miembro field.
	 * @var        int
	 */
	protected $id_alpza_miembro;

	/**
	 * The value for the acreditacion_aza field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $acreditacion_aza;

	/**
	 * The value for the acreditacion_iso9001 field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $acreditacion_iso9001;

	/**
	 * The value for the acreditacion_iso14001 field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $acreditacion_iso14001;

	/**
	 * The value for the acreditacion_otra field.
	 * @var        string
	 */
	protected $acreditacion_otra;

	/**
	 * The value for the asociacion_waza field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $asociacion_waza;

	/**
	 * The value for the asociacion_aza field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $asociacion_aza;

	/**
	 * The value for the asociacion_eaza field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $asociacion_eaza;

	/**
	 * The value for the asociacion_ize field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $asociacion_ize;

	/**
	 * The value for the asociacion_amaczoa field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $asociacion_amaczoa;

	/**
	 * The value for the asociacion_isis field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $asociacion_isis;

	/**
	 * The value for the asociacion_otra field.
	 * @var        string
	 */
	protected $asociacion_otra;

	/**
	 * The value for the coleccion_isis field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $coleccion_isis;

	/**
	 * The value for the coleccion_arks field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $coleccion_arks;

	/**
	 * The value for the coleccion_medarks field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $coleccion_medarks;

	/**
	 * The value for the coleccion_sparks field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $coleccion_sparks;

	/**
	 * The value for the coleccion_zims field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $coleccion_zims;

	/**
	 * The value for the coleccion_excel field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $coleccion_excel;

	/**
	 * The value for the coleccion_propio field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $coleccion_propio;

	/**
	 * The value for the coleccion_otro field.
	 * @var        string
	 */
	protected $coleccion_otro;

	/**
	 * The value for the coleccion_marca_porcentaje field.
	 * @var        string
	 */
	protected $coleccion_marca_porcentaje;

	/**
	 * The value for the marca_microchip field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $marca_microchip;

	/**
	 * The value for the marca_anillo field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $marca_anillo;

	/**
	 * The value for the marca_banda field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $marca_banda;

	/**
	 * The value for the marca_tatuaje field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $marca_tatuaje;

	/**
	 * The value for the marca_fria field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $marca_fria;

	/**
	 * The value for the marca_caliente field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $marca_caliente;

	/**
	 * The value for the marca_piquete field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $marca_piquete;

	/**
	 * The value for the marca_raya field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $marca_raya;

	/**
	 * The value for the marca_natura field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $marca_natura;

	/**
	 * The value for the marca_otra field.
	 * @var        string
	 */
	protected $marca_otra;

	/**
	 * @var        AlpzaMiembro
	 */
	protected $aAlpzaMiembro;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior

	const PEER = 'AlpzaMiembroAnexoPeer';

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->acreditacion_aza = 1;
		$this->acreditacion_iso9001 = 1;
		$this->acreditacion_iso14001 = 1;
		$this->asociacion_waza = 1;
		$this->asociacion_aza = 1;
		$this->asociacion_eaza = 1;
		$this->asociacion_ize = 1;
		$this->asociacion_amaczoa = 1;
		$this->asociacion_isis = 1;
		$this->coleccion_isis = 1;
		$this->coleccion_arks = 1;
		$this->coleccion_medarks = 1;
		$this->coleccion_sparks = 1;
		$this->coleccion_zims = 1;
		$this->coleccion_excel = 1;
		$this->coleccion_propio = 1;
		$this->marca_microchip = 1;
		$this->marca_anillo = 1;
		$this->marca_banda = 1;
		$this->marca_tatuaje = 1;
		$this->marca_fria = 1;
		$this->marca_caliente = 1;
		$this->marca_piquete = 1;
		$this->marca_raya = 1;
		$this->marca_natura = 1;
	}

	/**
	 * Initializes internal state of BaseAlpzaMiembroAnexo object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Get the [id_alpza_miembro_anexo] column value.
	 *
	 * @return     int
	 */
	public function getIdAlpzaMiembroAnexo()
	{
		return $this->id_alpza_miembro_anexo;
	}

	/**
	 * Get the [id_alpza_miembro] column value.
	 *
	 * @return     int
	 */
	public function getIdAlpzaMiembro()
	{
		return $this->id_alpza_miembro;
	}

	/**
	 * Get the [acreditacion_aza] column value.
	 *
	 * @return     int
	 */
	public function getAcreditacionAza()
	{
		return $this->acreditacion_aza;
	}

	/**
	 * Get the [acreditacion_iso9001] column value.
	 *
	 * @return     int
	 */
	public function getAcreditacionIso9001()
	{
		return $this->acreditacion_iso9001;
	}

	/**
	 * Get the [acreditacion_iso14001] column value.
	 *
	 * @return     int
	 */
	public function getAcreditacionIso14001()
	{
		return $this->acreditacion_iso14001;
	}

	/**
	 * Get the [acreditacion_otra] column value.
	 *
	 * @return     string
	 */
	public function getAcreditacionOtra()
	{
		return $this->acreditacion_otra;
	}

	/**
	 * Get the [asociacion_waza] column value.
	 *
	 * @return     int
	 */
	public function getAsociacionWaza()
	{
		return $this->asociacion_waza;
	}

	/**
	 * Get the [asociacion_aza] column value.
	 *
	 * @return     int
	 */
	public function getAsociacionAza()
	{
		return $this->asociacion_aza;
	}

	/**
	 * Get the [asociacion_eaza] column value.
	 *
	 * @return     int
	 */
	public function getAsociacionEaza()
	{
		return $this->asociacion_eaza;
	}

	/**
	 * Get the [asociacion_ize] column value.
	 *
	 * @return     int
	 */
	public function getAsociacionIze()
	{
		return $this->asociacion_ize;
	}

	/**
	 * Get the [asociacion_amaczoa] column value.
	 *
	 * @return     int
	 */
	public function getAsociacionAmaczoa()
	{
		return $this->asociacion_amaczoa;
	}

	/**
	 * Get the [asociacion_isis] column value.
	 *
	 * @return     int
	 */
	public function getAsociacionIsis()
	{
		return $this->asociacion_isis;
	}

	/**
	 * Get the [asociacion_otra] column value.
	 *
	 * @return     string
	 */
	public function getAsociacionOtra()
	{
		return $this->asociacion_otra;
	}

	/**
	 * Get the [coleccion_isis] column value.
	 *
	 * @return     int
	 */
	public function getColeccionIsis()
	{
		return $this->coleccion_isis;
	}

	/**
	 * Get the [coleccion_arks] column value.
	 *
	 * @return     int
	 */
	public function getColeccionArks()
	{
		return $this->coleccion_arks;
	}

	/**
	 * Get the [coleccion_medarks] column value.
	 *
	 * @return     int
	 */
	public function getColeccionMedarks()
	{
		return $this->coleccion_medarks;
	}

	/**
	 * Get the [coleccion_sparks] column value.
	 *
	 * @return     int
	 */
	public function getColeccionSparks()
	{
		return $this->coleccion_sparks;
	}

	/**
	 * Get the [coleccion_zims] column value.
	 *
	 * @return     int
	 */
	public function getColeccionZims()
	{
		return $this->coleccion_zims;
	}

	/**
	 * Get the [coleccion_excel] column value.
	 *
	 * @return     int
	 */
	public function getColeccionExcel()
	{
		return $this->coleccion_excel;
	}

	/**
	 * Get the [coleccion_propio] column value.
	 *
	 * @return     int
	 */
	public function getColeccionPropio()
	{
		return $this->coleccion_propio;
	}

	/**
	 * Get the [coleccion_otro] column value.
	 *
	 * @return     string
	 */
	public function getColeccionOtro()
	{
		return $this->coleccion_otro;
	}

	/**
	 * Get the [coleccion_marca_porcentaje] column value.
	 *
	 * @return     string
	 */
	public function getColeccionMarcaPorcentaje()
	{
		return $this->coleccion_marca_porcentaje;
	}

	/**
	 * Get the [marca_microchip] column value.
	 *
	 * @return     int
	 */
	public function getMarcaMicrochip()
	{
		return $this->marca_microchip;
	}

	/**
	 * Get the [marca_anillo] column value.
	 *
	 * @return     int
	 */
	public function getMarcaAnillo()
	{
		return $this->marca_anillo;
	}

	/**
	 * Get the [marca_banda] column value.
	 *
	 * @return     int
	 */
	public function getMarcaBanda()
	{
		return $this->marca_banda;
	}

	/**
	 * Get the [marca_tatuaje] column value.
	 *
	 * @return     int
	 */
	public function getMarcaTatuaje()
	{
		return $this->marca_tatuaje;
	}

	/**
	 * Get the [marca_fria] column value.
	 *
	 * @return     int
	 */
	public function getMarcaFria()
	{
		return $this->marca_fria;
	}

	/**
	 * Get the [marca_caliente] column value.
	 *
	 * @return     int
	 */
	public function getMarcaCaliente()
	{
		return $this->marca_caliente;
	}

	/**
	 * Get the [marca_piquete] column value.
	 *
	 * @return     int
	 */
	public function getMarcaPiquete()
	{
		return $this->marca_piquete;
	}

	/**
	 * Get the [marca_raya] column value.
	 *
	 * @return     int
	 */
	public function getMarcaRaya()
	{
		return $this->marca_raya;
	}

	/**
	 * Get the [marca_natura] column value.
	 *
	 * @return     int
	 */
	public function getMarcaNatura()
	{
		return $this->marca_natura;
	}

	/**
	 * Get the [marca_otra] column value.
	 *
	 * @return     string
	 */
	public function getMarcaOtra()
	{
		return $this->marca_otra;
	}

	/**
	 * Set the value of [id_alpza_miembro_anexo] column.
	 *
	 * @param      int $v new value
	 * @return     AlpzaMiembroAnexo The current object (for fluent API support)
	 */
	public function setIdAlpzaMiembroAnexo($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_alpza_miembro_anexo !== $v) {
			$this->id_alpza_miembro_anexo = $v;
			$this->modifiedColumns[] = AlpzaMiembroAnexoPeer::ID_ALPZA_MIEMBRO_ANEXO;
		}

		return $this;
	} // setIdAlpzaMiembroAnexo()

	/**
	 * Set the value of [id_alpza_miembro] column.
	 *
	 * @param      int $v new value
	 * @return     AlpzaMiembroAnexo The current object (for fluent API support)
	 */
	public function setIdAlpzaMiembro($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_alpza_miembro !== $v) {
			$this->id_alpza_miembro = $v;
			$this->modifiedColumns[] = AlpzaMiembroAnexoPeer::ID_ALPZA_MIEMBRO;
		}

		if ($this->aAlpzaMiembro !== null && $this->aAlpzaMiembro->getIdAlpzaMiembro() !== $v) {
			$this->aAlpzaMiembro = null;
		}

		return $this;
	} // setIdAlpzaMiembro()

	/**
	 * Set the value of [acreditacion_aza] column.
	 *
	 * @param      int $v new value
	 * @return     AlpzaMiembroAnexo The current object (for fluent API support)
	 */
	public function setAcreditacionAza($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->acreditacion_aza !== $v || $this->isNew()) {
			$this->acreditacion_aza = $v;
			$this->modifiedColumns[] = AlpzaMiembroAnexoPeer::ACREDITACION_AZA;
		}

		return $this;
	} // setAcreditacionAza()

	/**
	 * Set the value of [acreditacion_iso9001] column.
	 *
	 * @param      int $v new value
	 * @return     AlpzaMiembroAnexo The current object (for fluent API support)
	 */
	public function setAcreditacionIso9001($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->acreditacion_iso9001 !== $v || $this->isNew()) {
			$this->acreditacion_iso9001 = $v;
			$this->modifiedColumns[] = AlpzaMiembroAnexoPeer::ACREDITACION_ISO9001;
		}

		return $this;
	} // setAcreditacionIso9001()

	/**
	 * Set the value of [acreditacion_iso14001] column.
	 *
	 * @param      int $v new value
	 * @return     AlpzaMiembroAnexo The current object (for fluent API support)
	 */
	public function setAcreditacionIso14001($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->acreditacion_iso14001 !== $v || $this->isNew()) {
			$this->acreditacion_iso14001 = $v;
			$this->modifiedColumns[] = AlpzaMiembroAnexoPeer::ACREDITACION_ISO14001;
		}

		return $this;
	} // setAcreditacionIso14001()

	/**
	 * Set the value of [acreditacion_otra] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroAnexo The current object (for fluent API support)
	 */
	public function setAcreditacionOtra($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->acreditacion_otra !== $v) {
			$this->acreditacion_otra = $v;
			$this->modifiedColumns[] = AlpzaMiembroAnexoPeer::ACREDITACION_OTRA;
		}

		return $this;
	} // setAcreditacionOtra()

	/**
	 * Set the value of [asociacion_waza] column.
	 *
	 * @param      int $v new value
	 * @return     AlpzaMiembroAnexo The current object (for fluent API support)
	 */
	public function setAsociacionWaza($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->asociacion_waza !== $v || $this->isNew()) {
			$this->asociacion_waza = $v;
			$this->modifiedColumns[] = AlpzaMiembroAnexoPeer::ASOCIACION_WAZA;
		}

		return $this;
	} // setAsociacionWaza()

	/**
	 * Set the value of [asociacion_aza] column.
	 *
	 * @param      int $v new value
	 * @return     AlpzaMiembroAnexo The current object (for fluent API support)
	 */
	public function setAsociacionAza($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->asociacion_aza !== $v || $this->isNew()) {
			$this->asociacion_aza = $v;
			$this->modifiedColumns[] = AlpzaMiembroAnexoPeer::ASOCIACION_AZA;
		}

		return $this;
	} // setAsociacionAza()

	/**
	 * Set the value of [asociacion_eaza] column.
	 *
	 * @param      int $v new value
	 * @return     AlpzaMiembroAnexo The current object (for fluent API support)
	 */
	public function setAsociacionEaza($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->asociacion_eaza !== $v || $this->isNew()) {
			$this->asociacion_eaza = $v;
			$this->modifiedColumns[] = AlpzaMiembroAnexoPeer::ASOCIACION_EAZA;
		}

		return $this;
	} // setAsociacionEaza()

	/**
	 * Set the value of [asociacion_ize] column.
	 *
	 * @param      int $v new value
	 * @return     AlpzaMiembroAnexo The current object (for fluent API support)
	 */
	public function setAsociacionIze($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->asociacion_ize !== $v || $this->isNew()) {
			$this->asociacion_ize = $v;
			$this->modifiedColumns[] = AlpzaMiembroAnexoPeer::ASOCIACION_IZE;
		}

		return $this;
	} // setAsociacionIze()

	/**
	 * Set the value of [asociacion_amaczoa] column.
	 *
	 * @param      int $v new value
	 * @return     AlpzaMiembroAnexo The current object (for fluent API support)
	 */
	public function setAsociacionAmaczoa($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->asociacion_amaczoa !== $v || $this->isNew()) {
			$this->asociacion_amaczoa = $v;
			$this->modifiedColumns[] = AlpzaMiembroAnexoPeer::ASOCIACION_AMACZOA;
		}

		return $this;
	} // setAsociacionAmaczoa()

	/**
	 * Set the value of [asociacion_isis] column.
	 *
	 * @param      int $v new value
	 * @return     AlpzaMiembroAnexo The current object (for fluent API support)
	 */
	public function setAsociacionIsis($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->asociacion_isis !== $v || $this->isNew()) {
			$this->asociacion_isis = $v;
			$this->modifiedColumns[] = AlpzaMiembroAnexoPeer::ASOCIACION_ISIS;
		}

		return $this;
	} // setAsociacionIsis()

	/**
	 * Set the value of [asociacion_otra] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroAnexo The current object (for fluent API support)
	 */
	public function setAsociacionOtra($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->asociacion_otra !== $v) {
			$this->asociacion_otra = $v;
			$this->modifiedColumns[] = AlpzaMiembroAnexoPeer::ASOCIACION_OTRA;
		}

		return $this;
	} // setAsociacionOtra()

	/**
	 * Set the value of [coleccion_isis] column.
	 *
	 * @param      int $v new value
	 * @return     AlpzaMiembroAnexo The current object (for fluent API support)
	 */
	public function setColeccionIsis($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->coleccion_isis !== $v || $this->isNew()) {
			$this->coleccion_isis = $v;
			$this->modifiedColumns[] = AlpzaMiembroAnexoPeer::COLECCION_ISIS;
		}

		return $this;
	} // setColeccionIsis()

	/**
	 * Set the value of [coleccion_arks] column.
	 *
	 * @param      int $v new value
	 * @return     AlpzaMiembroAnexo The current object (for fluent API support)
	 */
	public function setColeccionArks($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->coleccion_arks !== $v || $this->isNew()) {
			$this->coleccion_arks = $v;
			$this->modifiedColumns[] = AlpzaMiembroAnexoPeer::COLECCION_ARKS;
		}

		return $this;
	} // setColeccionArks()

	/**
	 * Set the value of [coleccion_medarks] column.
	 *
	 * @param      int $v new value
	 * @return     AlpzaMiembroAnexo The current object (for fluent API support)
	 */
	public function setColeccionMedarks($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->coleccion_medarks !== $v || $this->isNew()) {
			$this->coleccion_medarks = $v;
			$this->modifiedColumns[] = AlpzaMiembroAnexoPeer::COLECCION_MEDARKS;
		}

		return $this;
	} // setColeccionMedarks()

	/**
	 * Set the value of [coleccion_sparks] column.
	 *
	 * @param      int $v new value
	 * @return     AlpzaMiembroAnexo The current object (for fluent API support)
	 */
	public function setColeccionSparks($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->coleccion_sparks !== $v || $this->isNew()) {
			$this->coleccion_sparks = $v;
			$this->modifiedColumns[] = AlpzaMiembroAnexoPeer::COLECCION_SPARKS;
		}

		return $this;
	} // setColeccionSparks()

	/**
	 * Set the value of [coleccion_zims] column.
	 *
	 * @param      int $v new value
	 * @return     AlpzaMiembroAnexo The current object (for fluent API support)
	 */
	public function setColeccionZims($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->coleccion_zims !== $v || $this->isNew()) {
			$this->coleccion_zims = $v;
			$this->modifiedColumns[] = AlpzaMiembroAnexoPeer::COLECCION_ZIMS;
		}

		return $this;
	} // setColeccionZims()

	/**
	 * Set the value of [coleccion_excel] column.
	 *
	 * @param      int $v new value
	 * @return     AlpzaMiembroAnexo The current object (for fluent API support)
	 */
	public function setColeccionExcel($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->coleccion_excel !== $v || $this->isNew()) {
			$this->coleccion_excel = $v;
			$this->modifiedColumns[] = AlpzaMiembroAnexoPeer::COLECCION_EXCEL;
		}

		return $this;
	} // setColeccionExcel()

	/**
	 * Set the value of [coleccion_propio] column.
	 *
	 * @param      int $v new value
	 * @return     AlpzaMiembroAnexo The current object (for fluent API support)
	 */
	public function setColeccionPropio($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->coleccion_propio !== $v || $this->isNew()) {
			$this->coleccion_propio = $v;
			$this->modifiedColumns[] = AlpzaMiembroAnexoPeer::COLECCION_PROPIO;
		}

		return $this;
	} // setColeccionPropio()

	/**
	 * Set the value of [coleccion_otro] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroAnexo The current object (for fluent API support)
	 */
	public function setColeccionOtro($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->coleccion_otro !== $v) {
			$this->coleccion_otro = $v;
			$this->modifiedColumns[] = AlpzaMiembroAnexoPeer::COLECCION_OTRO;
		}

		return $this;
	} // setColeccionOtro()

	/**
	 * Set the value of [coleccion_marca_porcentaje] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroAnexo The current object (for fluent API support)
	 */
	public function setColeccionMarcaPorcentaje($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->coleccion_marca_porcentaje !== $v) {
			$this->coleccion_marca_porcentaje = $v;
			$this->modifiedColumns[] = AlpzaMiembroAnexoPeer::COLECCION_MARCA_PORCENTAJE;
		}

		return $this;
	} // setColeccionMarcaPorcentaje()

	/**
	 * Set the value of [marca_microchip] column.
	 *
	 * @param      int $v new value
	 * @return     AlpzaMiembroAnexo The current object (for fluent API support)
	 */
	public function setMarcaMicrochip($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->marca_microchip !== $v || $this->isNew()) {
			$this->marca_microchip = $v;
			$this->modifiedColumns[] = AlpzaMiembroAnexoPeer::MARCA_MICROCHIP;
		}

		return $this;
	} // setMarcaMicrochip()

	/**
	 * Set the value of [marca_anillo] column.
	 *
	 * @param      int $v new value
	 * @return     AlpzaMiembroAnexo The current object (for fluent API support)
	 */
	public function setMarcaAnillo($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->marca_anillo !== $v || $this->isNew()) {
			$this->marca_anillo = $v;
			$this->modifiedColumns[] = AlpzaMiembroAnexoPeer::MARCA_ANILLO;
		}

		return $this;
	} // setMarcaAnillo()

	/**
	 * Set the value of [marca_banda] column.
	 *
	 * @param      int $v new value
	 * @return     AlpzaMiembroAnexo The current object (for fluent API support)
	 */
	public function setMarcaBanda($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->marca_banda !== $v || $this->isNew()) {
			$this->marca_banda = $v;
			$this->modifiedColumns[] = AlpzaMiembroAnexoPeer::MARCA_BANDA;
		}

		return $this;
	} // setMarcaBanda()

	/**
	 * Set the value of [marca_tatuaje] column.
	 *
	 * @param      int $v new value
	 * @return     AlpzaMiembroAnexo The current object (for fluent API support)
	 */
	public function setMarcaTatuaje($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->marca_tatuaje !== $v || $this->isNew()) {
			$this->marca_tatuaje = $v;
			$this->modifiedColumns[] = AlpzaMiembroAnexoPeer::MARCA_TATUAJE;
		}

		return $this;
	} // setMarcaTatuaje()

	/**
	 * Set the value of [marca_fria] column.
	 *
	 * @param      int $v new value
	 * @return     AlpzaMiembroAnexo The current object (for fluent API support)
	 */
	public function setMarcaFria($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->marca_fria !== $v || $this->isNew()) {
			$this->marca_fria = $v;
			$this->modifiedColumns[] = AlpzaMiembroAnexoPeer::MARCA_FRIA;
		}

		return $this;
	} // setMarcaFria()

	/**
	 * Set the value of [marca_caliente] column.
	 *
	 * @param      int $v new value
	 * @return     AlpzaMiembroAnexo The current object (for fluent API support)
	 */
	public function setMarcaCaliente($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->marca_caliente !== $v || $this->isNew()) {
			$this->marca_caliente = $v;
			$this->modifiedColumns[] = AlpzaMiembroAnexoPeer::MARCA_CALIENTE;
		}

		return $this;
	} // setMarcaCaliente()

	/**
	 * Set the value of [marca_piquete] column.
	 *
	 * @param      int $v new value
	 * @return     AlpzaMiembroAnexo The current object (for fluent API support)
	 */
	public function setMarcaPiquete($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->marca_piquete !== $v || $this->isNew()) {
			$this->marca_piquete = $v;
			$this->modifiedColumns[] = AlpzaMiembroAnexoPeer::MARCA_PIQUETE;
		}

		return $this;
	} // setMarcaPiquete()

	/**
	 * Set the value of [marca_raya] column.
	 *
	 * @param      int $v new value
	 * @return     AlpzaMiembroAnexo The current object (for fluent API support)
	 */
	public function setMarcaRaya($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->marca_raya !== $v || $this->isNew()) {
			$this->marca_raya = $v;
			$this->modifiedColumns[] = AlpzaMiembroAnexoPeer::MARCA_RAYA;
		}

		return $this;
	} // setMarcaRaya()

	/**
	 * Set the value of [marca_natura] column.
	 *
	 * @param      int $v new value
	 * @return     AlpzaMiembroAnexo The current object (for fluent API support)
	 */
	public function setMarcaNatura($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->marca_natura !== $v || $this->isNew()) {
			$this->marca_natura = $v;
			$this->modifiedColumns[] = AlpzaMiembroAnexoPeer::MARCA_NATURA;
		}

		return $this;
	} // setMarcaNatura()

	/**
	 * Set the value of [marca_otra] column.
	 *
	 * @param      string $v new value
	 * @return     AlpzaMiembroAnexo The current object (for fluent API support)
	 */
	public function setMarcaOtra($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->marca_otra !== $v) {
			$this->marca_otra = $v;
			$this->modifiedColumns[] = AlpzaMiembroAnexoPeer::MARCA_OTRA;
		}

		return $this;
	} // setMarcaOtra()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
		if ($this->acreditacion_aza !== 1) {
			return false;
		}

		if ($this->acreditacion_iso9001 !== 1) {
			return false;
		}

		if ($this->acreditacion_iso14001 !== 1) {
			return false;
		}

		if ($this->asociacion_waza !== 1) {
			return false;
		}

		if ($this->asociacion_aza !== 1) {
			return false;
		}

		if ($this->asociacion_eaza !== 1) {
			return false;
		}

		if ($this->asociacion_ize !== 1) {
			return false;
		}

		if ($this->asociacion_amaczoa !== 1) {
			return false;
		}

		if ($this->asociacion_isis !== 1) {
			return false;
		}

		if ($this->coleccion_isis !== 1) {
			return false;
		}

		if ($this->coleccion_arks !== 1) {
			return false;
		}

		if ($this->coleccion_medarks !== 1) {
			return false;
		}

		if ($this->coleccion_sparks !== 1) {
			return false;
		}

		if ($this->coleccion_zims !== 1) {
			return false;
		}

		if ($this->coleccion_excel !== 1) {
			return false;
		}

		if ($this->coleccion_propio !== 1) {
			return false;
		}

		if ($this->marca_microchip !== 1) {
			return false;
		}

		if ($this->marca_anillo !== 1) {
			return false;
		}

		if ($this->marca_banda !== 1) {
			return false;
		}

		if ($this->marca_tatuaje !== 1) {
			return false;
		}

		if ($this->marca_fria !== 1) {
			return false;
		}

		if ($this->marca_caliente !== 1) {
			return false;
		}

		if ($this->marca_piquete !== 1) {
			return false;
		}

		if ($this->marca_raya !== 1) {
			return false;
		}

		if ($this->marca_natura !== 1) {
			return false;
		}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id_alpza_miembro_anexo = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->id_alpza_miembro = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->acreditacion_aza = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->acreditacion_iso9001 = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
			$this->acreditacion_iso14001 = ($row[$startcol + 4] !== null) ? (int) $row[$startcol + 4] : null;
			$this->acreditacion_otra = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->asociacion_waza = ($row[$startcol + 6] !== null) ? (int) $row[$startcol + 6] : null;
			$this->asociacion_aza = ($row[$startcol + 7] !== null) ? (int) $row[$startcol + 7] : null;
			$this->asociacion_eaza = ($row[$startcol + 8] !== null) ? (int) $row[$startcol + 8] : null;
			$this->asociacion_ize = ($row[$startcol + 9] !== null) ? (int) $row[$startcol + 9] : null;
			$this->asociacion_amaczoa = ($row[$startcol + 10] !== null) ? (int) $row[$startcol + 10] : null;
			$this->asociacion_isis = ($row[$startcol + 11] !== null) ? (int) $row[$startcol + 11] : null;
			$this->asociacion_otra = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->coleccion_isis = ($row[$startcol + 13] !== null) ? (int) $row[$startcol + 13] : null;
			$this->coleccion_arks = ($row[$startcol + 14] !== null) ? (int) $row[$startcol + 14] : null;
			$this->coleccion_medarks = ($row[$startcol + 15] !== null) ? (int) $row[$startcol + 15] : null;
			$this->coleccion_sparks = ($row[$startcol + 16] !== null) ? (int) $row[$startcol + 16] : null;
			$this->coleccion_zims = ($row[$startcol + 17] !== null) ? (int) $row[$startcol + 17] : null;
			$this->coleccion_excel = ($row[$startcol + 18] !== null) ? (int) $row[$startcol + 18] : null;
			$this->coleccion_propio = ($row[$startcol + 19] !== null) ? (int) $row[$startcol + 19] : null;
			$this->coleccion_otro = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->coleccion_marca_porcentaje = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->marca_microchip = ($row[$startcol + 22] !== null) ? (int) $row[$startcol + 22] : null;
			$this->marca_anillo = ($row[$startcol + 23] !== null) ? (int) $row[$startcol + 23] : null;
			$this->marca_banda = ($row[$startcol + 24] !== null) ? (int) $row[$startcol + 24] : null;
			$this->marca_tatuaje = ($row[$startcol + 25] !== null) ? (int) $row[$startcol + 25] : null;
			$this->marca_fria = ($row[$startcol + 26] !== null) ? (int) $row[$startcol + 26] : null;
			$this->marca_caliente = ($row[$startcol + 27] !== null) ? (int) $row[$startcol + 27] : null;
			$this->marca_piquete = ($row[$startcol + 28] !== null) ? (int) $row[$startcol + 28] : null;
			$this->marca_raya = ($row[$startcol + 29] !== null) ? (int) $row[$startcol + 29] : null;
			$this->marca_natura = ($row[$startcol + 30] !== null) ? (int) $row[$startcol + 30] : null;
			$this->marca_otra = ($row[$startcol + 31] !== null) ? (string) $row[$startcol + 31] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 32; // 32 = AlpzaMiembroAnexoPeer::NUM_COLUMNS - AlpzaMiembroAnexoPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating AlpzaMiembroAnexo object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aAlpzaMiembro !== null && $this->id_alpza_miembro !== $this->aAlpzaMiembro->getIdAlpzaMiembro()) {
			$this->aAlpzaMiembro = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(AlpzaMiembroAnexoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = AlpzaMiembroAnexoPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aAlpzaMiembro = null;
		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(AlpzaMiembroAnexoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseAlpzaMiembroAnexo:delete:pre') as $callable)
			{
				if (call_user_func($callable, $this, $con))
				{
					$con->commit();
						
					return;
				}
			}

			if ($ret) {
				AlpzaMiembroAnexoPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseAlpzaMiembroAnexo:delete:post') as $callable)
				{
					call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(AlpzaMiembroAnexoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseAlpzaMiembroAnexo:save:pre') as $callable)
			{
				if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
				{
					$con->commit();
						
					return $affectedRows;
				}
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseAlpzaMiembroAnexo:save:post') as $callable)
				{
					call_user_func($callable, $this, $con, $affectedRows);
				}

				AlpzaMiembroAnexoPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aAlpzaMiembro !== null) {
				if ($this->aAlpzaMiembro->isModified() || $this->aAlpzaMiembro->isNew()) {
					$affectedRows += $this->aAlpzaMiembro->save($con);
				}
				$this->setAlpzaMiembro($this->aAlpzaMiembro);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = AlpzaMiembroAnexoPeer::ID_ALPZA_MIEMBRO_ANEXO;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = AlpzaMiembroAnexoPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
					// should always be true here (even though technically
					// BasePeer::doInsert() can insert multiple rows).

					$this->setIdAlpzaMiembroAnexo($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += AlpzaMiembroAnexoPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aAlpzaMiembro !== null) {
				if (!$this->aAlpzaMiembro->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aAlpzaMiembro->getValidationFailures());
				}
			}


			if (($retval = AlpzaMiembroAnexoPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = AlpzaMiembroAnexoPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getIdAlpzaMiembroAnexo();
				break;
			case 1:
				return $this->getIdAlpzaMiembro();
				break;
			case 2:
				return $this->getAcreditacionAza();
				break;
			case 3:
				return $this->getAcreditacionIso9001();
				break;
			case 4:
				return $this->getAcreditacionIso14001();
				break;
			case 5:
				return $this->getAcreditacionOtra();
				break;
			case 6:
				return $this->getAsociacionWaza();
				break;
			case 7:
				return $this->getAsociacionAza();
				break;
			case 8:
				return $this->getAsociacionEaza();
				break;
			case 9:
				return $this->getAsociacionIze();
				break;
			case 10:
				return $this->getAsociacionAmaczoa();
				break;
			case 11:
				return $this->getAsociacionIsis();
				break;
			case 12:
				return $this->getAsociacionOtra();
				break;
			case 13:
				return $this->getColeccionIsis();
				break;
			case 14:
				return $this->getColeccionArks();
				break;
			case 15:
				return $this->getColeccionMedarks();
				break;
			case 16:
				return $this->getColeccionSparks();
				break;
			case 17:
				return $this->getColeccionZims();
				break;
			case 18:
				return $this->getColeccionExcel();
				break;
			case 19:
				return $this->getColeccionPropio();
				break;
			case 20:
				return $this->getColeccionOtro();
				break;
			case 21:
				return $this->getColeccionMarcaPorcentaje();
				break;
			case 22:
				return $this->getMarcaMicrochip();
				break;
			case 23:
				return $this->getMarcaAnillo();
				break;
			case 24:
				return $this->getMarcaBanda();
				break;
			case 25:
				return $this->getMarcaTatuaje();
				break;
			case 26:
				return $this->getMarcaFria();
				break;
			case 27:
				return $this->getMarcaCaliente();
				break;
			case 28:
				return $this->getMarcaPiquete();
				break;
			case 29:
				return $this->getMarcaRaya();
				break;
			case 30:
				return $this->getMarcaNatura();
				break;
			case 31:
				return $this->getMarcaOtra();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = AlpzaMiembroAnexoPeer::getFieldNames($keyType);
		$result = array(
		$keys[0] => $this->getIdAlpzaMiembroAnexo(),
		$keys[1] => $this->getIdAlpzaMiembro(),
		$keys[2] => $this->getAcreditacionAza(),
		$keys[3] => $this->getAcreditacionIso9001(),
		$keys[4] => $this->getAcreditacionIso14001(),
		$keys[5] => $this->getAcreditacionOtra(),
		$keys[6] => $this->getAsociacionWaza(),
		$keys[7] => $this->getAsociacionAza(),
		$keys[8] => $this->getAsociacionEaza(),
		$keys[9] => $this->getAsociacionIze(),
		$keys[10] => $this->getAsociacionAmaczoa(),
		$keys[11] => $this->getAsociacionIsis(),
		$keys[12] => $this->getAsociacionOtra(),
		$keys[13] => $this->getColeccionIsis(),
		$keys[14] => $this->getColeccionArks(),
		$keys[15] => $this->getColeccionMedarks(),
		$keys[16] => $this->getColeccionSparks(),
		$keys[17] => $this->getColeccionZims(),
		$keys[18] => $this->getColeccionExcel(),
		$keys[19] => $this->getColeccionPropio(),
		$keys[20] => $this->getColeccionOtro(),
		$keys[21] => $this->getColeccionMarcaPorcentaje(),
		$keys[22] => $this->getMarcaMicrochip(),
		$keys[23] => $this->getMarcaAnillo(),
		$keys[24] => $this->getMarcaBanda(),
		$keys[25] => $this->getMarcaTatuaje(),
		$keys[26] => $this->getMarcaFria(),
		$keys[27] => $this->getMarcaCaliente(),
		$keys[28] => $this->getMarcaPiquete(),
		$keys[29] => $this->getMarcaRaya(),
		$keys[30] => $this->getMarcaNatura(),
		$keys[31] => $this->getMarcaOtra(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = AlpzaMiembroAnexoPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setIdAlpzaMiembroAnexo($value);
				break;
			case 1:
				$this->setIdAlpzaMiembro($value);
				break;
			case 2:
				$this->setAcreditacionAza($value);
				break;
			case 3:
				$this->setAcreditacionIso9001($value);
				break;
			case 4:
				$this->setAcreditacionIso14001($value);
				break;
			case 5:
				$this->setAcreditacionOtra($value);
				break;
			case 6:
				$this->setAsociacionWaza($value);
				break;
			case 7:
				$this->setAsociacionAza($value);
				break;
			case 8:
				$this->setAsociacionEaza($value);
				break;
			case 9:
				$this->setAsociacionIze($value);
				break;
			case 10:
				$this->setAsociacionAmaczoa($value);
				break;
			case 11:
				$this->setAsociacionIsis($value);
				break;
			case 12:
				$this->setAsociacionOtra($value);
				break;
			case 13:
				$this->setColeccionIsis($value);
				break;
			case 14:
				$this->setColeccionArks($value);
				break;
			case 15:
				$this->setColeccionMedarks($value);
				break;
			case 16:
				$this->setColeccionSparks($value);
				break;
			case 17:
				$this->setColeccionZims($value);
				break;
			case 18:
				$this->setColeccionExcel($value);
				break;
			case 19:
				$this->setColeccionPropio($value);
				break;
			case 20:
				$this->setColeccionOtro($value);
				break;
			case 21:
				$this->setColeccionMarcaPorcentaje($value);
				break;
			case 22:
				$this->setMarcaMicrochip($value);
				break;
			case 23:
				$this->setMarcaAnillo($value);
				break;
			case 24:
				$this->setMarcaBanda($value);
				break;
			case 25:
				$this->setMarcaTatuaje($value);
				break;
			case 26:
				$this->setMarcaFria($value);
				break;
			case 27:
				$this->setMarcaCaliente($value);
				break;
			case 28:
				$this->setMarcaPiquete($value);
				break;
			case 29:
				$this->setMarcaRaya($value);
				break;
			case 30:
				$this->setMarcaNatura($value);
				break;
			case 31:
				$this->setMarcaOtra($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = AlpzaMiembroAnexoPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setIdAlpzaMiembroAnexo($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setIdAlpzaMiembro($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setAcreditacionAza($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setAcreditacionIso9001($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setAcreditacionIso14001($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setAcreditacionOtra($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setAsociacionWaza($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setAsociacionAza($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setAsociacionEaza($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setAsociacionIze($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setAsociacionAmaczoa($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setAsociacionIsis($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setAsociacionOtra($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setColeccionIsis($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setColeccionArks($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setColeccionMedarks($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setColeccionSparks($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setColeccionZims($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setColeccionExcel($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setColeccionPropio($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setColeccionOtro($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setColeccionMarcaPorcentaje($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setMarcaMicrochip($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setMarcaAnillo($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setMarcaBanda($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setMarcaTatuaje($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setMarcaFria($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setMarcaCaliente($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setMarcaPiquete($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setMarcaRaya($arr[$keys[29]]);
		if (array_key_exists($keys[30], $arr)) $this->setMarcaNatura($arr[$keys[30]]);
		if (array_key_exists($keys[31], $arr)) $this->setMarcaOtra($arr[$keys[31]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(AlpzaMiembroAnexoPeer::DATABASE_NAME);

		if ($this->isColumnModified(AlpzaMiembroAnexoPeer::ID_ALPZA_MIEMBRO_ANEXO)) $criteria->add(AlpzaMiembroAnexoPeer::ID_ALPZA_MIEMBRO_ANEXO, $this->id_alpza_miembro_anexo);
		if ($this->isColumnModified(AlpzaMiembroAnexoPeer::ID_ALPZA_MIEMBRO)) $criteria->add(AlpzaMiembroAnexoPeer::ID_ALPZA_MIEMBRO, $this->id_alpza_miembro);
		if ($this->isColumnModified(AlpzaMiembroAnexoPeer::ACREDITACION_AZA)) $criteria->add(AlpzaMiembroAnexoPeer::ACREDITACION_AZA, $this->acreditacion_aza);
		if ($this->isColumnModified(AlpzaMiembroAnexoPeer::ACREDITACION_ISO9001)) $criteria->add(AlpzaMiembroAnexoPeer::ACREDITACION_ISO9001, $this->acreditacion_iso9001);
		if ($this->isColumnModified(AlpzaMiembroAnexoPeer::ACREDITACION_ISO14001)) $criteria->add(AlpzaMiembroAnexoPeer::ACREDITACION_ISO14001, $this->acreditacion_iso14001);
		if ($this->isColumnModified(AlpzaMiembroAnexoPeer::ACREDITACION_OTRA)) $criteria->add(AlpzaMiembroAnexoPeer::ACREDITACION_OTRA, $this->acreditacion_otra);
		if ($this->isColumnModified(AlpzaMiembroAnexoPeer::ASOCIACION_WAZA)) $criteria->add(AlpzaMiembroAnexoPeer::ASOCIACION_WAZA, $this->asociacion_waza);
		if ($this->isColumnModified(AlpzaMiembroAnexoPeer::ASOCIACION_AZA)) $criteria->add(AlpzaMiembroAnexoPeer::ASOCIACION_AZA, $this->asociacion_aza);
		if ($this->isColumnModified(AlpzaMiembroAnexoPeer::ASOCIACION_EAZA)) $criteria->add(AlpzaMiembroAnexoPeer::ASOCIACION_EAZA, $this->asociacion_eaza);
		if ($this->isColumnModified(AlpzaMiembroAnexoPeer::ASOCIACION_IZE)) $criteria->add(AlpzaMiembroAnexoPeer::ASOCIACION_IZE, $this->asociacion_ize);
		if ($this->isColumnModified(AlpzaMiembroAnexoPeer::ASOCIACION_AMACZOA)) $criteria->add(AlpzaMiembroAnexoPeer::ASOCIACION_AMACZOA, $this->asociacion_amaczoa);
		if ($this->isColumnModified(AlpzaMiembroAnexoPeer::ASOCIACION_ISIS)) $criteria->add(AlpzaMiembroAnexoPeer::ASOCIACION_ISIS, $this->asociacion_isis);
		if ($this->isColumnModified(AlpzaMiembroAnexoPeer::ASOCIACION_OTRA)) $criteria->add(AlpzaMiembroAnexoPeer::ASOCIACION_OTRA, $this->asociacion_otra);
		if ($this->isColumnModified(AlpzaMiembroAnexoPeer::COLECCION_ISIS)) $criteria->add(AlpzaMiembroAnexoPeer::COLECCION_ISIS, $this->coleccion_isis);
		if ($this->isColumnModified(AlpzaMiembroAnexoPeer::COLECCION_ARKS)) $criteria->add(AlpzaMiembroAnexoPeer::COLECCION_ARKS, $this->coleccion_arks);
		if ($this->isColumnModified(AlpzaMiembroAnexoPeer::COLECCION_MEDARKS)) $criteria->add(AlpzaMiembroAnexoPeer::COLECCION_MEDARKS, $this->coleccion_medarks);
		if ($this->isColumnModified(AlpzaMiembroAnexoPeer::COLECCION_SPARKS)) $criteria->add(AlpzaMiembroAnexoPeer::COLECCION_SPARKS, $this->coleccion_sparks);
		if ($this->isColumnModified(AlpzaMiembroAnexoPeer::COLECCION_ZIMS)) $criteria->add(AlpzaMiembroAnexoPeer::COLECCION_ZIMS, $this->coleccion_zims);
		if ($this->isColumnModified(AlpzaMiembroAnexoPeer::COLECCION_EXCEL)) $criteria->add(AlpzaMiembroAnexoPeer::COLECCION_EXCEL, $this->coleccion_excel);
		if ($this->isColumnModified(AlpzaMiembroAnexoPeer::COLECCION_PROPIO)) $criteria->add(AlpzaMiembroAnexoPeer::COLECCION_PROPIO, $this->coleccion_propio);
		if ($this->isColumnModified(AlpzaMiembroAnexoPeer::COLECCION_OTRO)) $criteria->add(AlpzaMiembroAnexoPeer::COLECCION_OTRO, $this->coleccion_otro);
		if ($this->isColumnModified(AlpzaMiembroAnexoPeer::COLECCION_MARCA_PORCENTAJE)) $criteria->add(AlpzaMiembroAnexoPeer::COLECCION_MARCA_PORCENTAJE, $this->coleccion_marca_porcentaje);
		if ($this->isColumnModified(AlpzaMiembroAnexoPeer::MARCA_MICROCHIP)) $criteria->add(AlpzaMiembroAnexoPeer::MARCA_MICROCHIP, $this->marca_microchip);
		if ($this->isColumnModified(AlpzaMiembroAnexoPeer::MARCA_ANILLO)) $criteria->add(AlpzaMiembroAnexoPeer::MARCA_ANILLO, $this->marca_anillo);
		if ($this->isColumnModified(AlpzaMiembroAnexoPeer::MARCA_BANDA)) $criteria->add(AlpzaMiembroAnexoPeer::MARCA_BANDA, $this->marca_banda);
		if ($this->isColumnModified(AlpzaMiembroAnexoPeer::MARCA_TATUAJE)) $criteria->add(AlpzaMiembroAnexoPeer::MARCA_TATUAJE, $this->marca_tatuaje);
		if ($this->isColumnModified(AlpzaMiembroAnexoPeer::MARCA_FRIA)) $criteria->add(AlpzaMiembroAnexoPeer::MARCA_FRIA, $this->marca_fria);
		if ($this->isColumnModified(AlpzaMiembroAnexoPeer::MARCA_CALIENTE)) $criteria->add(AlpzaMiembroAnexoPeer::MARCA_CALIENTE, $this->marca_caliente);
		if ($this->isColumnModified(AlpzaMiembroAnexoPeer::MARCA_PIQUETE)) $criteria->add(AlpzaMiembroAnexoPeer::MARCA_PIQUETE, $this->marca_piquete);
		if ($this->isColumnModified(AlpzaMiembroAnexoPeer::MARCA_RAYA)) $criteria->add(AlpzaMiembroAnexoPeer::MARCA_RAYA, $this->marca_raya);
		if ($this->isColumnModified(AlpzaMiembroAnexoPeer::MARCA_NATURA)) $criteria->add(AlpzaMiembroAnexoPeer::MARCA_NATURA, $this->marca_natura);
		if ($this->isColumnModified(AlpzaMiembroAnexoPeer::MARCA_OTRA)) $criteria->add(AlpzaMiembroAnexoPeer::MARCA_OTRA, $this->marca_otra);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(AlpzaMiembroAnexoPeer::DATABASE_NAME);

		$criteria->add(AlpzaMiembroAnexoPeer::ID_ALPZA_MIEMBRO_ANEXO, $this->id_alpza_miembro_anexo);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getIdAlpzaMiembroAnexo();
	}

	/**
	 * Generic method to set the primary key (id_alpza_miembro_anexo column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setIdAlpzaMiembroAnexo($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of AlpzaMiembroAnexo (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setIdAlpzaMiembro($this->id_alpza_miembro);

		$copyObj->setAcreditacionAza($this->acreditacion_aza);

		$copyObj->setAcreditacionIso9001($this->acreditacion_iso9001);

		$copyObj->setAcreditacionIso14001($this->acreditacion_iso14001);

		$copyObj->setAcreditacionOtra($this->acreditacion_otra);

		$copyObj->setAsociacionWaza($this->asociacion_waza);

		$copyObj->setAsociacionAza($this->asociacion_aza);

		$copyObj->setAsociacionEaza($this->asociacion_eaza);

		$copyObj->setAsociacionIze($this->asociacion_ize);

		$copyObj->setAsociacionAmaczoa($this->asociacion_amaczoa);

		$copyObj->setAsociacionIsis($this->asociacion_isis);

		$copyObj->setAsociacionOtra($this->asociacion_otra);

		$copyObj->setColeccionIsis($this->coleccion_isis);

		$copyObj->setColeccionArks($this->coleccion_arks);

		$copyObj->setColeccionMedarks($this->coleccion_medarks);

		$copyObj->setColeccionSparks($this->coleccion_sparks);

		$copyObj->setColeccionZims($this->coleccion_zims);

		$copyObj->setColeccionExcel($this->coleccion_excel);

		$copyObj->setColeccionPropio($this->coleccion_propio);

		$copyObj->setColeccionOtro($this->coleccion_otro);

		$copyObj->setColeccionMarcaPorcentaje($this->coleccion_marca_porcentaje);

		$copyObj->setMarcaMicrochip($this->marca_microchip);

		$copyObj->setMarcaAnillo($this->marca_anillo);

		$copyObj->setMarcaBanda($this->marca_banda);

		$copyObj->setMarcaTatuaje($this->marca_tatuaje);

		$copyObj->setMarcaFria($this->marca_fria);

		$copyObj->setMarcaCaliente($this->marca_caliente);

		$copyObj->setMarcaPiquete($this->marca_piquete);

		$copyObj->setMarcaRaya($this->marca_raya);

		$copyObj->setMarcaNatura($this->marca_natura);

		$copyObj->setMarcaOtra($this->marca_otra);


		$copyObj->setNew(true);

		$copyObj->setIdAlpzaMiembroAnexo(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     AlpzaMiembroAnexo Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     AlpzaMiembroAnexoPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new AlpzaMiembroAnexoPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a AlpzaMiembro object.
	 *
	 * @param      AlpzaMiembro $v
	 * @return     AlpzaMiembroAnexo The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setAlpzaMiembro(AlpzaMiembro $v = null)
	{
		if ($v === null) {
			$this->setIdAlpzaMiembro(NULL);
		} else {
			$this->setIdAlpzaMiembro($v->getIdAlpzaMiembro());
		}

		$this->aAlpzaMiembro = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the AlpzaMiembro object, it will not be re-added.
		if ($v !== null) {
			$v->addAlpzaMiembroAnexo($this);
		}

		return $this;
	}


	/**
	 * Get the associated AlpzaMiembro object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     AlpzaMiembro The associated AlpzaMiembro object.
	 * @throws     PropelException
	 */
	public function getAlpzaMiembro(PropelPDO $con = null)
	{
		if ($this->aAlpzaMiembro === null && ($this->id_alpza_miembro !== null)) {
			$this->aAlpzaMiembro = AlpzaMiembroPeer::retrieveByPk($this->id_alpza_miembro);
			/* The following can be used additionally to
			 guarantee the related object contains a reference
			 to this object.  This level of coupling may, however, be
			 undesirable since it could result in an only partially populated collection
			 in the referenced object.
			 $this->aAlpzaMiembro->addAlpzaMiembroAnexos($this);
			 */
		}
		return $this->aAlpzaMiembro;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

		$this->aAlpzaMiembro = null;
	}

	// symfony_behaviors behavior

	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
		if (!$callable = sfMixer::getCallable('BaseAlpzaMiembroAnexo:'.$method))
		{
			throw new sfException(sprintf('Call to undefined method BaseAlpzaMiembroAnexo::%s', $method));
		}

		array_unshift($arguments, $this);

		return call_user_func_array($callable, $arguments);
	}

} // BaseAlpzaMiembroAnexo
