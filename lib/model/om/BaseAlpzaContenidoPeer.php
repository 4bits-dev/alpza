<?php

/**
 * Base static class for performing query and update operations on the 'alpza_contenido' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Sat Oct 20 15:09:53 2012
 *
 * @package    lib.model.om
 */
abstract class BaseAlpzaContenidoPeer {

	/** the default database name for this class */
	const DATABASE_NAME = 'propel';

	/** the table name for this class */
	const TABLE_NAME = 'alpza_contenido';

	/** the related Propel class for this table */
	const OM_CLASS = 'AlpzaContenido';

	/** A class that can be returned by this peer. */
	const CLASS_DEFAULT = 'lib.model.AlpzaContenido';

	/** the related TableMap class for this table */
	const TM_CLASS = 'AlpzaContenidoTableMap';

	/** The total number of columns. */
	const NUM_COLUMNS = 10;

	/** The number of lazy-loaded columns. */
	const NUM_LAZY_LOAD_COLUMNS = 0;

	/** the column name for the ID_ALPZA_CONTENIDO field */
	const ID_ALPZA_CONTENIDO = 'alpza_contenido.ID_ALPZA_CONTENIDO';

	/** the column name for the ID_ALPZA_MIEMBRO field */
	const ID_ALPZA_MIEMBRO = 'alpza_contenido.ID_ALPZA_MIEMBRO';

	/** the column name for the ID_ALPZA_NOTICIA field */
	const ID_ALPZA_NOTICIA = 'alpza_contenido.ID_ALPZA_NOTICIA';

	/** the column name for the ID_ALPZA_EVENTO field */
	const ID_ALPZA_EVENTO = 'alpza_contenido.ID_ALPZA_EVENTO';

	/** the column name for the ID_ALPZA_BECA field */
	const ID_ALPZA_BECA = 'alpza_contenido.ID_ALPZA_BECA';

	/** the column name for the ID_ALPZA_PUBLICACION field */
	const ID_ALPZA_PUBLICACION = 'alpza_contenido.ID_ALPZA_PUBLICACION';

	/** the column name for the ID_ALPZA_JUNTA field */
	const ID_ALPZA_JUNTA = 'alpza_contenido.ID_ALPZA_JUNTA';

	/** the column name for the ID_ALPZA_COMITE field */
	const ID_ALPZA_COMITE = 'alpza_contenido.ID_ALPZA_COMITE';

	/** the column name for the ID_ALPZA_CONGRESO field */
	const ID_ALPZA_CONGRESO = 'alpza_contenido.ID_ALPZA_CONGRESO';

	/** the column name for the ID_ALPZA_INFORMACION field */
	const ID_ALPZA_INFORMACION = 'alpza_contenido.ID_ALPZA_INFORMACION';

	/**
	 * An identiy map to hold any loaded instances of AlpzaContenido objects.
	 * This must be public so that other peer classes can access this when hydrating from JOIN
	 * queries.
	 * @var        array AlpzaContenido[]
	 */
	public static $instances = array();


	// symfony behavior

	/**
	 * Indicates whether the current model includes I18N.
	 */
	const IS_I18N = false;

	/**
	 * holds an array of fieldnames
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[self::TYPE_PHPNAME][0] = 'Id'
	 */
	private static $fieldNames = array (
	BasePeer::TYPE_PHPNAME => array ('IdAlpzaContenido', 'IdAlpzaMiembro', 'IdAlpzaNoticia', 'IdAlpzaEvento', 'IdAlpzaBeca', 'IdAlpzaPublicacion', 'IdAlpzaJunta', 'IdAlpzaComite', 'IdAlpzaCongreso', 'IdAlpzaInformacion', ),
	BasePeer::TYPE_STUDLYPHPNAME => array ('idAlpzaContenido', 'idAlpzaMiembro', 'idAlpzaNoticia', 'idAlpzaEvento', 'idAlpzaBeca', 'idAlpzaPublicacion', 'idAlpzaJunta', 'idAlpzaComite', 'idAlpzaCongreso', 'idAlpzaInformacion', ),
	BasePeer::TYPE_COLNAME => array (self::ID_ALPZA_CONTENIDO, self::ID_ALPZA_MIEMBRO, self::ID_ALPZA_NOTICIA, self::ID_ALPZA_EVENTO, self::ID_ALPZA_BECA, self::ID_ALPZA_PUBLICACION, self::ID_ALPZA_JUNTA, self::ID_ALPZA_COMITE, self::ID_ALPZA_CONGRESO, self::ID_ALPZA_INFORMACION, ),
	BasePeer::TYPE_FIELDNAME => array ('id_alpza_contenido', 'id_alpza_miembro', 'id_alpza_noticia', 'id_alpza_evento', 'id_alpza_beca', 'id_alpza_publicacion', 'id_alpza_junta', 'id_alpza_comite', 'id_alpza_congreso', 'id_alpza_informacion', ),
	BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, )
	);

	/**
	 * holds an array of keys for quick access to the fieldnames array
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[BasePeer::TYPE_PHPNAME]['Id'] = 0
	 */
	private static $fieldKeys = array (
	BasePeer::TYPE_PHPNAME => array ('IdAlpzaContenido' => 0, 'IdAlpzaMiembro' => 1, 'IdAlpzaNoticia' => 2, 'IdAlpzaEvento' => 3, 'IdAlpzaBeca' => 4, 'IdAlpzaPublicacion' => 5, 'IdAlpzaJunta' => 6, 'IdAlpzaComite' => 7, 'IdAlpzaCongreso' => 8, 'IdAlpzaInformacion' => 9, ),
	BasePeer::TYPE_STUDLYPHPNAME => array ('idAlpzaContenido' => 0, 'idAlpzaMiembro' => 1, 'idAlpzaNoticia' => 2, 'idAlpzaEvento' => 3, 'idAlpzaBeca' => 4, 'idAlpzaPublicacion' => 5, 'idAlpzaJunta' => 6, 'idAlpzaComite' => 7, 'idAlpzaCongreso' => 8, 'idAlpzaInformacion' => 9, ),
	BasePeer::TYPE_COLNAME => array (self::ID_ALPZA_CONTENIDO => 0, self::ID_ALPZA_MIEMBRO => 1, self::ID_ALPZA_NOTICIA => 2, self::ID_ALPZA_EVENTO => 3, self::ID_ALPZA_BECA => 4, self::ID_ALPZA_PUBLICACION => 5, self::ID_ALPZA_JUNTA => 6, self::ID_ALPZA_COMITE => 7, self::ID_ALPZA_CONGRESO => 8, self::ID_ALPZA_INFORMACION => 9, ),
	BasePeer::TYPE_FIELDNAME => array ('id_alpza_contenido' => 0, 'id_alpza_miembro' => 1, 'id_alpza_noticia' => 2, 'id_alpza_evento' => 3, 'id_alpza_beca' => 4, 'id_alpza_publicacion' => 5, 'id_alpza_junta' => 6, 'id_alpza_comite' => 7, 'id_alpza_congreso' => 8, 'id_alpza_informacion' => 9, ),
	BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, )
	);

	/**
	 * Translates a fieldname to another type
	 *
	 * @param      string $name field name
	 * @param      string $fromType One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                         BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @param      string $toType   One of the class type constants
	 * @return     string translated name of the field.
	 * @throws     PropelException - if the specified name could not be found in the fieldname mappings.
	 */
	static public function translateFieldName($name, $fromType, $toType)
	{
		$toNames = self::getFieldNames($toType);
		$key = isset(self::$fieldKeys[$fromType][$name]) ? self::$fieldKeys[$fromType][$name] : null;
		if ($key === null) {
			throw new PropelException("'$name' could not be found in the field names of type '$fromType'. These are: " . print_r(self::$fieldKeys[$fromType], true));
		}
		return $toNames[$key];
	}

	/**
	 * Returns an array of field names.
	 *
	 * @param      string $type The type of fieldnames to return:
	 *                      One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                      BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     array A list of field names
	 */

	static public function getFieldNames($type = BasePeer::TYPE_PHPNAME)
	{
		if (!array_key_exists($type, self::$fieldNames)) {
			throw new PropelException('Method getFieldNames() expects the parameter $type to be one of the class constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME, BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. ' . $type . ' was given.');
		}
		return self::$fieldNames[$type];
	}

	/**
	 * Convenience method which changes table.column to alias.column.
	 *
	 * Using this method you can maintain SQL abstraction while using column aliases.
	 * <code>
	 *		$c->addAlias("alias1", TablePeer::TABLE_NAME);
	 *		$c->addJoin(TablePeer::alias("alias1", TablePeer::PRIMARY_KEY_COLUMN), TablePeer::PRIMARY_KEY_COLUMN);
	 * </code>
	 * @param      string $alias The alias for the current table.
	 * @param      string $column The column name for current table. (i.e. AlpzaContenidoPeer::COLUMN_NAME).
	 * @return     string
	 */
	public static function alias($alias, $column)
	{
		return str_replace(AlpzaContenidoPeer::TABLE_NAME.'.', $alias.'.', $column);
	}

	/**
	 * Add all the columns needed to create a new object.
	 *
	 * Note: any columns that were marked with lazyLoad="true" in the
	 * XML schema will not be added to the select list and only loaded
	 * on demand.
	 *
	 * @param      criteria object containing the columns to add.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function addSelectColumns(Criteria $criteria)
	{
		$criteria->addSelectColumn(AlpzaContenidoPeer::ID_ALPZA_CONTENIDO);
		$criteria->addSelectColumn(AlpzaContenidoPeer::ID_ALPZA_MIEMBRO);
		$criteria->addSelectColumn(AlpzaContenidoPeer::ID_ALPZA_NOTICIA);
		$criteria->addSelectColumn(AlpzaContenidoPeer::ID_ALPZA_EVENTO);
		$criteria->addSelectColumn(AlpzaContenidoPeer::ID_ALPZA_BECA);
		$criteria->addSelectColumn(AlpzaContenidoPeer::ID_ALPZA_PUBLICACION);
		$criteria->addSelectColumn(AlpzaContenidoPeer::ID_ALPZA_JUNTA);
		$criteria->addSelectColumn(AlpzaContenidoPeer::ID_ALPZA_COMITE);
		$criteria->addSelectColumn(AlpzaContenidoPeer::ID_ALPZA_CONGRESO);
		$criteria->addSelectColumn(AlpzaContenidoPeer::ID_ALPZA_INFORMACION);
	}

	/**
	 * Returns the number of rows matching criteria.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @return     int Number of matching rows.
	 */
	public static function doCount(Criteria $criteria, $distinct = false, PropelPDO $con = null)
	{
		// we may modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(AlpzaContenidoPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			AlpzaContenidoPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		$criteria->setDbName(self::DATABASE_NAME); // Set the correct dbName

		if ($con === null) {
			$con = Propel::getConnection(AlpzaContenidoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
			call_user_func($sf_hook, 'BaseAlpzaContenidoPeer', $criteria, $con);
		}

		// BasePeer returns a PDOStatement
		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}
	/**
	 * Method to select one object from the DB.
	 *
	 * @param      Criteria $criteria object used to create the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     AlpzaContenido
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectOne(Criteria $criteria, PropelPDO $con = null)
	{
		$critcopy = clone $criteria;
		$critcopy->setLimit(1);
		$objects = AlpzaContenidoPeer::doSelect($critcopy, $con);
		if ($objects) {
			return $objects[0];
		}
		return null;
	}
	/**
	 * Method to do selects.
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     array Array of selected Objects
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelect(Criteria $criteria, PropelPDO $con = null)
	{
		return AlpzaContenidoPeer::populateObjects(AlpzaContenidoPeer::doSelectStmt($criteria, $con));
	}
	/**
	 * Prepares the Criteria object and uses the parent doSelect() method to execute a PDOStatement.
	 *
	 * Use this method directly if you want to work with an executed statement durirectly (for example
	 * to perform your own object hydration).
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con The connection to use
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 * @return     PDOStatement The executed PDOStatement object.
	 * @see        BasePeer::doSelect()
	 */
	public static function doSelectStmt(Criteria $criteria, PropelPDO $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(AlpzaContenidoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		if (!$criteria->hasSelectClause()) {
			$criteria = clone $criteria;
			AlpzaContenidoPeer::addSelectColumns($criteria);
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);
		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
			call_user_func($sf_hook, 'BaseAlpzaContenidoPeer', $criteria, $con);
		}


		// BasePeer returns a PDOStatement
		return BasePeer::doSelect($criteria, $con);
	}
	/**
	 * Adds an object to the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doSelect*()
	 * methods in your stub classes -- you may need to explicitly add objects
	 * to the cache in order to ensure that the same objects are always returned by doSelect*()
	 * and retrieveByPK*() calls.
	 *
	 * @param      AlpzaContenido $value A AlpzaContenido object.
	 * @param      string $key (optional) key to use for instance map (for performance boost if key was already calculated externally).
	 */
	public static function addInstanceToPool(AlpzaContenido $obj, $key = null)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if ($key === null) {
				$key = (string) $obj->getIdAlpzaContenido();
			} // if key === null
			self::$instances[$key] = $obj;
		}
	}

	/**
	 * Removes an object from the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doDelete
	 * methods in your stub classes -- you may need to explicitly remove objects
	 * from the cache in order to prevent returning objects that no longer exist.
	 *
	 * @param      mixed $value A AlpzaContenido object or a primary key value.
	 */
	public static function removeInstanceFromPool($value)
	{
		if (Propel::isInstancePoolingEnabled() && $value !== null) {
			if (is_object($value) && $value instanceof AlpzaContenido) {
				$key = (string) $value->getIdAlpzaContenido();
			} elseif (is_scalar($value)) {
				// assume we've been passed a primary key
				$key = (string) $value;
			} else {
				$e = new PropelException("Invalid value passed to removeInstanceFromPool().  Expected primary key or AlpzaContenido object; got " . (is_object($value) ? get_class($value) . ' object.' : var_export($value,true)));
				throw $e;
			}

			unset(self::$instances[$key]);
		}
	} // removeInstanceFromPool()

	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      string $key The key (@see getPrimaryKeyHash()) for this instance.
	 * @return     AlpzaContenido Found object or NULL if 1) no instance exists for specified key or 2) instance pooling has been disabled.
	 * @see        getPrimaryKeyHash()
	 */
	public static function getInstanceFromPool($key)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if (isset(self::$instances[$key])) {
				return self::$instances[$key];
			}
		}
		return null; // just to be explicit
	}

	/**
	 * Clear the instance pool.
	 *
	 * @return     void
	 */
	public static function clearInstancePool()
	{
		self::$instances = array();
	}

	/**
	 * Method to invalidate the instance pool of all tables related to alpza_contenido
	 * by a foreign key with ON DELETE CASCADE
	 */
	public static function clearRelatedInstancePool()
	{
	}

	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      array $row PropelPDO resultset row.
	 * @param      int $startcol The 0-based offset for reading from the resultset row.
	 * @return     string A string version of PK or NULL if the components of primary key in result array are all null.
	 */
	public static function getPrimaryKeyHashFromRow($row, $startcol = 0)
	{
		// If the PK cannot be derived from the row, return NULL.
		if ($row[$startcol] === null) {
			return null;
		}
		return (string) $row[$startcol];
	}

	/**
	 * The returned array will contain objects of the default type or
	 * objects that inherit from the default.
	 *
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function populateObjects(PDOStatement $stmt)
	{
		$results = array();

		// set the class once to avoid overhead in the loop
		$cls = AlpzaContenidoPeer::getOMClass(false);
		// populate the object(s)
		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key = AlpzaContenidoPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj = AlpzaContenidoPeer::getInstanceFromPool($key))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj->hydrate($row, 0, true); // rehydrate
				$results[] = $obj;
			} else {
				$obj = new $cls();
				$obj->hydrate($row);
				$results[] = $obj;
				AlpzaContenidoPeer::addInstanceToPool($obj, $key);
			} // if key exists
		}
		$stmt->closeCursor();
		return $results;
	}

	/**
	 * Returns the number of rows matching criteria, joining the related AlpzaMiembro table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAlpzaMiembro(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(AlpzaContenidoPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			AlpzaContenidoPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(AlpzaContenidoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_MIEMBRO, AlpzaMiembroPeer::ID_ALPZA_MIEMBRO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
			call_user_func($sf_hook, 'BaseAlpzaContenidoPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related AlpzaNoticia table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAlpzaNoticia(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(AlpzaContenidoPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			AlpzaContenidoPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(AlpzaContenidoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_NOTICIA, AlpzaNoticiaPeer::ID_ALPZA_NOTICIA, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
			call_user_func($sf_hook, 'BaseAlpzaContenidoPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related AlpzaEvento table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAlpzaEvento(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(AlpzaContenidoPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			AlpzaContenidoPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(AlpzaContenidoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_EVENTO, AlpzaEventoPeer::ID_ALPZA_EVENTO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
			call_user_func($sf_hook, 'BaseAlpzaContenidoPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related AlpzaBeca table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAlpzaBeca(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(AlpzaContenidoPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			AlpzaContenidoPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(AlpzaContenidoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_BECA, AlpzaBecaPeer::ID_ALPZA_BECA, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
			call_user_func($sf_hook, 'BaseAlpzaContenidoPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related AlpzaPublicacion table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAlpzaPublicacion(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(AlpzaContenidoPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			AlpzaContenidoPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(AlpzaContenidoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_PUBLICACION, AlpzaPublicacionPeer::ID_ALPZA_PUBLICACION, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
			call_user_func($sf_hook, 'BaseAlpzaContenidoPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related AlpzaJunta table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAlpzaJunta(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(AlpzaContenidoPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			AlpzaContenidoPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(AlpzaContenidoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_JUNTA, AlpzaJuntaPeer::ID_ALPZA_JUNTA, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
			call_user_func($sf_hook, 'BaseAlpzaContenidoPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related AlpzaComite table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAlpzaComite(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(AlpzaContenidoPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			AlpzaContenidoPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(AlpzaContenidoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_COMITE, AlpzaComitePeer::ID_ALPZA_COMITE, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
			call_user_func($sf_hook, 'BaseAlpzaContenidoPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related AlpzaCongreso table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAlpzaCongreso(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(AlpzaContenidoPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			AlpzaContenidoPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(AlpzaContenidoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_CONGRESO, AlpzaCongresoPeer::ID_ALPZA_CONGRESO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
			call_user_func($sf_hook, 'BaseAlpzaContenidoPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related AlpzaInformacion table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAlpzaInformacion(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(AlpzaContenidoPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			AlpzaContenidoPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(AlpzaContenidoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_INFORMACION, AlpzaInformacionPeer::ID_ALPZA_INFORMACION, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
			call_user_func($sf_hook, 'BaseAlpzaContenidoPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Selects a collection of AlpzaContenido objects pre-filled with their AlpzaMiembro objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of AlpzaContenido objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAlpzaMiembro(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		AlpzaContenidoPeer::addSelectColumns($criteria);
		$startcol = (AlpzaContenidoPeer::NUM_COLUMNS - AlpzaContenidoPeer::NUM_LAZY_LOAD_COLUMNS);
		AlpzaMiembroPeer::addSelectColumns($criteria);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_MIEMBRO, AlpzaMiembroPeer::ID_ALPZA_MIEMBRO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
			call_user_func($sf_hook, 'BaseAlpzaContenidoPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = AlpzaContenidoPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = AlpzaContenidoPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = AlpzaContenidoPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				AlpzaContenidoPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = AlpzaMiembroPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = AlpzaMiembroPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = AlpzaMiembroPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					AlpzaMiembroPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (AlpzaContenido) to $obj2 (AlpzaMiembro)
				$obj2->addAlpzaContenido($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of AlpzaContenido objects pre-filled with their AlpzaNoticia objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of AlpzaContenido objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAlpzaNoticia(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		AlpzaContenidoPeer::addSelectColumns($criteria);
		$startcol = (AlpzaContenidoPeer::NUM_COLUMNS - AlpzaContenidoPeer::NUM_LAZY_LOAD_COLUMNS);
		AlpzaNoticiaPeer::addSelectColumns($criteria);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_NOTICIA, AlpzaNoticiaPeer::ID_ALPZA_NOTICIA, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
			call_user_func($sf_hook, 'BaseAlpzaContenidoPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = AlpzaContenidoPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = AlpzaContenidoPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = AlpzaContenidoPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				AlpzaContenidoPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = AlpzaNoticiaPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = AlpzaNoticiaPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = AlpzaNoticiaPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					AlpzaNoticiaPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (AlpzaContenido) to $obj2 (AlpzaNoticia)
				$obj2->addAlpzaContenido($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of AlpzaContenido objects pre-filled with their AlpzaEvento objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of AlpzaContenido objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAlpzaEvento(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		AlpzaContenidoPeer::addSelectColumns($criteria);
		$startcol = (AlpzaContenidoPeer::NUM_COLUMNS - AlpzaContenidoPeer::NUM_LAZY_LOAD_COLUMNS);
		AlpzaEventoPeer::addSelectColumns($criteria);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_EVENTO, AlpzaEventoPeer::ID_ALPZA_EVENTO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
			call_user_func($sf_hook, 'BaseAlpzaContenidoPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = AlpzaContenidoPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = AlpzaContenidoPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = AlpzaContenidoPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				AlpzaContenidoPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = AlpzaEventoPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = AlpzaEventoPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = AlpzaEventoPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					AlpzaEventoPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (AlpzaContenido) to $obj2 (AlpzaEvento)
				$obj2->addAlpzaContenido($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of AlpzaContenido objects pre-filled with their AlpzaBeca objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of AlpzaContenido objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAlpzaBeca(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		AlpzaContenidoPeer::addSelectColumns($criteria);
		$startcol = (AlpzaContenidoPeer::NUM_COLUMNS - AlpzaContenidoPeer::NUM_LAZY_LOAD_COLUMNS);
		AlpzaBecaPeer::addSelectColumns($criteria);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_BECA, AlpzaBecaPeer::ID_ALPZA_BECA, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
			call_user_func($sf_hook, 'BaseAlpzaContenidoPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = AlpzaContenidoPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = AlpzaContenidoPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = AlpzaContenidoPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				AlpzaContenidoPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = AlpzaBecaPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = AlpzaBecaPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = AlpzaBecaPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					AlpzaBecaPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (AlpzaContenido) to $obj2 (AlpzaBeca)
				$obj2->addAlpzaContenido($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of AlpzaContenido objects pre-filled with their AlpzaPublicacion objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of AlpzaContenido objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAlpzaPublicacion(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		AlpzaContenidoPeer::addSelectColumns($criteria);
		$startcol = (AlpzaContenidoPeer::NUM_COLUMNS - AlpzaContenidoPeer::NUM_LAZY_LOAD_COLUMNS);
		AlpzaPublicacionPeer::addSelectColumns($criteria);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_PUBLICACION, AlpzaPublicacionPeer::ID_ALPZA_PUBLICACION, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
			call_user_func($sf_hook, 'BaseAlpzaContenidoPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = AlpzaContenidoPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = AlpzaContenidoPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = AlpzaContenidoPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				AlpzaContenidoPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = AlpzaPublicacionPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = AlpzaPublicacionPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = AlpzaPublicacionPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					AlpzaPublicacionPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (AlpzaContenido) to $obj2 (AlpzaPublicacion)
				$obj2->addAlpzaContenido($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of AlpzaContenido objects pre-filled with their AlpzaJunta objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of AlpzaContenido objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAlpzaJunta(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		AlpzaContenidoPeer::addSelectColumns($criteria);
		$startcol = (AlpzaContenidoPeer::NUM_COLUMNS - AlpzaContenidoPeer::NUM_LAZY_LOAD_COLUMNS);
		AlpzaJuntaPeer::addSelectColumns($criteria);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_JUNTA, AlpzaJuntaPeer::ID_ALPZA_JUNTA, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
			call_user_func($sf_hook, 'BaseAlpzaContenidoPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = AlpzaContenidoPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = AlpzaContenidoPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = AlpzaContenidoPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				AlpzaContenidoPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = AlpzaJuntaPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = AlpzaJuntaPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = AlpzaJuntaPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					AlpzaJuntaPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (AlpzaContenido) to $obj2 (AlpzaJunta)
				$obj2->addAlpzaContenido($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of AlpzaContenido objects pre-filled with their AlpzaComite objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of AlpzaContenido objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAlpzaComite(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		AlpzaContenidoPeer::addSelectColumns($criteria);
		$startcol = (AlpzaContenidoPeer::NUM_COLUMNS - AlpzaContenidoPeer::NUM_LAZY_LOAD_COLUMNS);
		AlpzaComitePeer::addSelectColumns($criteria);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_COMITE, AlpzaComitePeer::ID_ALPZA_COMITE, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
			call_user_func($sf_hook, 'BaseAlpzaContenidoPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = AlpzaContenidoPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = AlpzaContenidoPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = AlpzaContenidoPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				AlpzaContenidoPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = AlpzaComitePeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = AlpzaComitePeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = AlpzaComitePeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					AlpzaComitePeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (AlpzaContenido) to $obj2 (AlpzaComite)
				$obj2->addAlpzaContenido($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of AlpzaContenido objects pre-filled with their AlpzaCongreso objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of AlpzaContenido objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAlpzaCongreso(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		AlpzaContenidoPeer::addSelectColumns($criteria);
		$startcol = (AlpzaContenidoPeer::NUM_COLUMNS - AlpzaContenidoPeer::NUM_LAZY_LOAD_COLUMNS);
		AlpzaCongresoPeer::addSelectColumns($criteria);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_CONGRESO, AlpzaCongresoPeer::ID_ALPZA_CONGRESO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
			call_user_func($sf_hook, 'BaseAlpzaContenidoPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = AlpzaContenidoPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = AlpzaContenidoPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = AlpzaContenidoPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				AlpzaContenidoPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = AlpzaCongresoPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = AlpzaCongresoPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = AlpzaCongresoPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					AlpzaCongresoPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (AlpzaContenido) to $obj2 (AlpzaCongreso)
				$obj2->addAlpzaContenido($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of AlpzaContenido objects pre-filled with their AlpzaInformacion objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of AlpzaContenido objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAlpzaInformacion(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		AlpzaContenidoPeer::addSelectColumns($criteria);
		$startcol = (AlpzaContenidoPeer::NUM_COLUMNS - AlpzaContenidoPeer::NUM_LAZY_LOAD_COLUMNS);
		AlpzaInformacionPeer::addSelectColumns($criteria);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_INFORMACION, AlpzaInformacionPeer::ID_ALPZA_INFORMACION, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
			call_user_func($sf_hook, 'BaseAlpzaContenidoPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = AlpzaContenidoPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = AlpzaContenidoPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = AlpzaContenidoPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				AlpzaContenidoPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = AlpzaInformacionPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = AlpzaInformacionPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = AlpzaInformacionPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					AlpzaInformacionPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (AlpzaContenido) to $obj2 (AlpzaInformacion)
				$obj2->addAlpzaContenido($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Returns the number of rows matching criteria, joining all related tables
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAll(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(AlpzaContenidoPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			AlpzaContenidoPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(AlpzaContenidoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_MIEMBRO, AlpzaMiembroPeer::ID_ALPZA_MIEMBRO, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_NOTICIA, AlpzaNoticiaPeer::ID_ALPZA_NOTICIA, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_EVENTO, AlpzaEventoPeer::ID_ALPZA_EVENTO, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_BECA, AlpzaBecaPeer::ID_ALPZA_BECA, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_PUBLICACION, AlpzaPublicacionPeer::ID_ALPZA_PUBLICACION, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_JUNTA, AlpzaJuntaPeer::ID_ALPZA_JUNTA, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_COMITE, AlpzaComitePeer::ID_ALPZA_COMITE, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_CONGRESO, AlpzaCongresoPeer::ID_ALPZA_CONGRESO, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_INFORMACION, AlpzaInformacionPeer::ID_ALPZA_INFORMACION, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
			call_user_func($sf_hook, 'BaseAlpzaContenidoPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}

	/**
	 * Selects a collection of AlpzaContenido objects pre-filled with all related objects.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of AlpzaContenido objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAll(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		AlpzaContenidoPeer::addSelectColumns($criteria);
		$startcol2 = (AlpzaContenidoPeer::NUM_COLUMNS - AlpzaContenidoPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaMiembroPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (AlpzaMiembroPeer::NUM_COLUMNS - AlpzaMiembroPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaNoticiaPeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + (AlpzaNoticiaPeer::NUM_COLUMNS - AlpzaNoticiaPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaEventoPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + (AlpzaEventoPeer::NUM_COLUMNS - AlpzaEventoPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaBecaPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + (AlpzaBecaPeer::NUM_COLUMNS - AlpzaBecaPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaPublicacionPeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + (AlpzaPublicacionPeer::NUM_COLUMNS - AlpzaPublicacionPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaJuntaPeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + (AlpzaJuntaPeer::NUM_COLUMNS - AlpzaJuntaPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaComitePeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + (AlpzaComitePeer::NUM_COLUMNS - AlpzaComitePeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaCongresoPeer::addSelectColumns($criteria);
		$startcol10 = $startcol9 + (AlpzaCongresoPeer::NUM_COLUMNS - AlpzaCongresoPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaInformacionPeer::addSelectColumns($criteria);
		$startcol11 = $startcol10 + (AlpzaInformacionPeer::NUM_COLUMNS - AlpzaInformacionPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_MIEMBRO, AlpzaMiembroPeer::ID_ALPZA_MIEMBRO, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_NOTICIA, AlpzaNoticiaPeer::ID_ALPZA_NOTICIA, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_EVENTO, AlpzaEventoPeer::ID_ALPZA_EVENTO, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_BECA, AlpzaBecaPeer::ID_ALPZA_BECA, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_PUBLICACION, AlpzaPublicacionPeer::ID_ALPZA_PUBLICACION, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_JUNTA, AlpzaJuntaPeer::ID_ALPZA_JUNTA, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_COMITE, AlpzaComitePeer::ID_ALPZA_COMITE, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_CONGRESO, AlpzaCongresoPeer::ID_ALPZA_CONGRESO, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_INFORMACION, AlpzaInformacionPeer::ID_ALPZA_INFORMACION, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
			call_user_func($sf_hook, 'BaseAlpzaContenidoPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = AlpzaContenidoPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = AlpzaContenidoPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = AlpzaContenidoPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				AlpzaContenidoPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

			// Add objects for joined AlpzaMiembro rows

			$key2 = AlpzaMiembroPeer::getPrimaryKeyHashFromRow($row, $startcol2);
			if ($key2 !== null) {
				$obj2 = AlpzaMiembroPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = AlpzaMiembroPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					AlpzaMiembroPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj2 (AlpzaMiembro)
				$obj2->addAlpzaContenido($obj1);
			} // if joined row not null

			// Add objects for joined AlpzaNoticia rows

			$key3 = AlpzaNoticiaPeer::getPrimaryKeyHashFromRow($row, $startcol3);
			if ($key3 !== null) {
				$obj3 = AlpzaNoticiaPeer::getInstanceFromPool($key3);
				if (!$obj3) {

					$cls = AlpzaNoticiaPeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					AlpzaNoticiaPeer::addInstanceToPool($obj3, $key3);
				} // if obj3 loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj3 (AlpzaNoticia)
				$obj3->addAlpzaContenido($obj1);
			} // if joined row not null

			// Add objects for joined AlpzaEvento rows

			$key4 = AlpzaEventoPeer::getPrimaryKeyHashFromRow($row, $startcol4);
			if ($key4 !== null) {
				$obj4 = AlpzaEventoPeer::getInstanceFromPool($key4);
				if (!$obj4) {

					$cls = AlpzaEventoPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					AlpzaEventoPeer::addInstanceToPool($obj4, $key4);
				} // if obj4 loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj4 (AlpzaEvento)
				$obj4->addAlpzaContenido($obj1);
			} // if joined row not null

			// Add objects for joined AlpzaBeca rows

			$key5 = AlpzaBecaPeer::getPrimaryKeyHashFromRow($row, $startcol5);
			if ($key5 !== null) {
				$obj5 = AlpzaBecaPeer::getInstanceFromPool($key5);
				if (!$obj5) {

					$cls = AlpzaBecaPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					AlpzaBecaPeer::addInstanceToPool($obj5, $key5);
				} // if obj5 loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj5 (AlpzaBeca)
				$obj5->addAlpzaContenido($obj1);
			} // if joined row not null

			// Add objects for joined AlpzaPublicacion rows

			$key6 = AlpzaPublicacionPeer::getPrimaryKeyHashFromRow($row, $startcol6);
			if ($key6 !== null) {
				$obj6 = AlpzaPublicacionPeer::getInstanceFromPool($key6);
				if (!$obj6) {

					$cls = AlpzaPublicacionPeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					AlpzaPublicacionPeer::addInstanceToPool($obj6, $key6);
				} // if obj6 loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj6 (AlpzaPublicacion)
				$obj6->addAlpzaContenido($obj1);
			} // if joined row not null

			// Add objects for joined AlpzaJunta rows

			$key7 = AlpzaJuntaPeer::getPrimaryKeyHashFromRow($row, $startcol7);
			if ($key7 !== null) {
				$obj7 = AlpzaJuntaPeer::getInstanceFromPool($key7);
				if (!$obj7) {

					$cls = AlpzaJuntaPeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					AlpzaJuntaPeer::addInstanceToPool($obj7, $key7);
				} // if obj7 loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj7 (AlpzaJunta)
				$obj7->addAlpzaContenido($obj1);
			} // if joined row not null

			// Add objects for joined AlpzaComite rows

			$key8 = AlpzaComitePeer::getPrimaryKeyHashFromRow($row, $startcol8);
			if ($key8 !== null) {
				$obj8 = AlpzaComitePeer::getInstanceFromPool($key8);
				if (!$obj8) {

					$cls = AlpzaComitePeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					AlpzaComitePeer::addInstanceToPool($obj8, $key8);
				} // if obj8 loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj8 (AlpzaComite)
				$obj8->addAlpzaContenido($obj1);
			} // if joined row not null

			// Add objects for joined AlpzaCongreso rows

			$key9 = AlpzaCongresoPeer::getPrimaryKeyHashFromRow($row, $startcol9);
			if ($key9 !== null) {
				$obj9 = AlpzaCongresoPeer::getInstanceFromPool($key9);
				if (!$obj9) {

					$cls = AlpzaCongresoPeer::getOMClass(false);

					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					AlpzaCongresoPeer::addInstanceToPool($obj9, $key9);
				} // if obj9 loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj9 (AlpzaCongreso)
				$obj9->addAlpzaContenido($obj1);
			} // if joined row not null

			// Add objects for joined AlpzaInformacion rows

			$key10 = AlpzaInformacionPeer::getPrimaryKeyHashFromRow($row, $startcol10);
			if ($key10 !== null) {
				$obj10 = AlpzaInformacionPeer::getInstanceFromPool($key10);
				if (!$obj10) {

					$cls = AlpzaInformacionPeer::getOMClass(false);

					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					AlpzaInformacionPeer::addInstanceToPool($obj10, $key10);
				} // if obj10 loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj10 (AlpzaInformacion)
				$obj10->addAlpzaContenido($obj1);
			} // if joined row not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related AlpzaMiembro table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptAlpzaMiembro(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(AlpzaContenidoPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			AlpzaContenidoPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY should not affect count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(AlpzaContenidoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_NOTICIA, AlpzaNoticiaPeer::ID_ALPZA_NOTICIA, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_EVENTO, AlpzaEventoPeer::ID_ALPZA_EVENTO, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_BECA, AlpzaBecaPeer::ID_ALPZA_BECA, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_PUBLICACION, AlpzaPublicacionPeer::ID_ALPZA_PUBLICACION, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_JUNTA, AlpzaJuntaPeer::ID_ALPZA_JUNTA, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_COMITE, AlpzaComitePeer::ID_ALPZA_COMITE, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_CONGRESO, AlpzaCongresoPeer::ID_ALPZA_CONGRESO, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_INFORMACION, AlpzaInformacionPeer::ID_ALPZA_INFORMACION, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
			call_user_func($sf_hook, 'BaseAlpzaContenidoPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related AlpzaNoticia table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptAlpzaNoticia(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(AlpzaContenidoPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			AlpzaContenidoPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY should not affect count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(AlpzaContenidoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_MIEMBRO, AlpzaMiembroPeer::ID_ALPZA_MIEMBRO, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_EVENTO, AlpzaEventoPeer::ID_ALPZA_EVENTO, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_BECA, AlpzaBecaPeer::ID_ALPZA_BECA, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_PUBLICACION, AlpzaPublicacionPeer::ID_ALPZA_PUBLICACION, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_JUNTA, AlpzaJuntaPeer::ID_ALPZA_JUNTA, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_COMITE, AlpzaComitePeer::ID_ALPZA_COMITE, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_CONGRESO, AlpzaCongresoPeer::ID_ALPZA_CONGRESO, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_INFORMACION, AlpzaInformacionPeer::ID_ALPZA_INFORMACION, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
			call_user_func($sf_hook, 'BaseAlpzaContenidoPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related AlpzaEvento table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptAlpzaEvento(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(AlpzaContenidoPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			AlpzaContenidoPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY should not affect count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(AlpzaContenidoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_MIEMBRO, AlpzaMiembroPeer::ID_ALPZA_MIEMBRO, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_NOTICIA, AlpzaNoticiaPeer::ID_ALPZA_NOTICIA, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_BECA, AlpzaBecaPeer::ID_ALPZA_BECA, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_PUBLICACION, AlpzaPublicacionPeer::ID_ALPZA_PUBLICACION, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_JUNTA, AlpzaJuntaPeer::ID_ALPZA_JUNTA, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_COMITE, AlpzaComitePeer::ID_ALPZA_COMITE, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_CONGRESO, AlpzaCongresoPeer::ID_ALPZA_CONGRESO, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_INFORMACION, AlpzaInformacionPeer::ID_ALPZA_INFORMACION, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
			call_user_func($sf_hook, 'BaseAlpzaContenidoPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related AlpzaBeca table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptAlpzaBeca(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(AlpzaContenidoPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			AlpzaContenidoPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY should not affect count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(AlpzaContenidoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_MIEMBRO, AlpzaMiembroPeer::ID_ALPZA_MIEMBRO, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_NOTICIA, AlpzaNoticiaPeer::ID_ALPZA_NOTICIA, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_EVENTO, AlpzaEventoPeer::ID_ALPZA_EVENTO, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_PUBLICACION, AlpzaPublicacionPeer::ID_ALPZA_PUBLICACION, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_JUNTA, AlpzaJuntaPeer::ID_ALPZA_JUNTA, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_COMITE, AlpzaComitePeer::ID_ALPZA_COMITE, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_CONGRESO, AlpzaCongresoPeer::ID_ALPZA_CONGRESO, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_INFORMACION, AlpzaInformacionPeer::ID_ALPZA_INFORMACION, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
			call_user_func($sf_hook, 'BaseAlpzaContenidoPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related AlpzaPublicacion table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptAlpzaPublicacion(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(AlpzaContenidoPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			AlpzaContenidoPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY should not affect count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(AlpzaContenidoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_MIEMBRO, AlpzaMiembroPeer::ID_ALPZA_MIEMBRO, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_NOTICIA, AlpzaNoticiaPeer::ID_ALPZA_NOTICIA, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_EVENTO, AlpzaEventoPeer::ID_ALPZA_EVENTO, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_BECA, AlpzaBecaPeer::ID_ALPZA_BECA, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_JUNTA, AlpzaJuntaPeer::ID_ALPZA_JUNTA, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_COMITE, AlpzaComitePeer::ID_ALPZA_COMITE, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_CONGRESO, AlpzaCongresoPeer::ID_ALPZA_CONGRESO, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_INFORMACION, AlpzaInformacionPeer::ID_ALPZA_INFORMACION, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
			call_user_func($sf_hook, 'BaseAlpzaContenidoPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related AlpzaJunta table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptAlpzaJunta(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(AlpzaContenidoPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			AlpzaContenidoPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY should not affect count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(AlpzaContenidoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_MIEMBRO, AlpzaMiembroPeer::ID_ALPZA_MIEMBRO, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_NOTICIA, AlpzaNoticiaPeer::ID_ALPZA_NOTICIA, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_EVENTO, AlpzaEventoPeer::ID_ALPZA_EVENTO, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_BECA, AlpzaBecaPeer::ID_ALPZA_BECA, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_PUBLICACION, AlpzaPublicacionPeer::ID_ALPZA_PUBLICACION, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_COMITE, AlpzaComitePeer::ID_ALPZA_COMITE, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_CONGRESO, AlpzaCongresoPeer::ID_ALPZA_CONGRESO, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_INFORMACION, AlpzaInformacionPeer::ID_ALPZA_INFORMACION, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
			call_user_func($sf_hook, 'BaseAlpzaContenidoPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related AlpzaComite table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptAlpzaComite(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(AlpzaContenidoPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			AlpzaContenidoPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY should not affect count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(AlpzaContenidoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_MIEMBRO, AlpzaMiembroPeer::ID_ALPZA_MIEMBRO, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_NOTICIA, AlpzaNoticiaPeer::ID_ALPZA_NOTICIA, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_EVENTO, AlpzaEventoPeer::ID_ALPZA_EVENTO, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_BECA, AlpzaBecaPeer::ID_ALPZA_BECA, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_PUBLICACION, AlpzaPublicacionPeer::ID_ALPZA_PUBLICACION, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_JUNTA, AlpzaJuntaPeer::ID_ALPZA_JUNTA, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_CONGRESO, AlpzaCongresoPeer::ID_ALPZA_CONGRESO, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_INFORMACION, AlpzaInformacionPeer::ID_ALPZA_INFORMACION, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
			call_user_func($sf_hook, 'BaseAlpzaContenidoPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related AlpzaCongreso table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptAlpzaCongreso(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(AlpzaContenidoPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			AlpzaContenidoPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY should not affect count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(AlpzaContenidoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_MIEMBRO, AlpzaMiembroPeer::ID_ALPZA_MIEMBRO, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_NOTICIA, AlpzaNoticiaPeer::ID_ALPZA_NOTICIA, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_EVENTO, AlpzaEventoPeer::ID_ALPZA_EVENTO, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_BECA, AlpzaBecaPeer::ID_ALPZA_BECA, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_PUBLICACION, AlpzaPublicacionPeer::ID_ALPZA_PUBLICACION, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_JUNTA, AlpzaJuntaPeer::ID_ALPZA_JUNTA, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_COMITE, AlpzaComitePeer::ID_ALPZA_COMITE, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_INFORMACION, AlpzaInformacionPeer::ID_ALPZA_INFORMACION, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
			call_user_func($sf_hook, 'BaseAlpzaContenidoPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related AlpzaInformacion table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptAlpzaInformacion(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(AlpzaContenidoPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			AlpzaContenidoPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY should not affect count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(AlpzaContenidoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_MIEMBRO, AlpzaMiembroPeer::ID_ALPZA_MIEMBRO, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_NOTICIA, AlpzaNoticiaPeer::ID_ALPZA_NOTICIA, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_EVENTO, AlpzaEventoPeer::ID_ALPZA_EVENTO, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_BECA, AlpzaBecaPeer::ID_ALPZA_BECA, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_PUBLICACION, AlpzaPublicacionPeer::ID_ALPZA_PUBLICACION, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_JUNTA, AlpzaJuntaPeer::ID_ALPZA_JUNTA, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_COMITE, AlpzaComitePeer::ID_ALPZA_COMITE, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_CONGRESO, AlpzaCongresoPeer::ID_ALPZA_CONGRESO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
			call_user_func($sf_hook, 'BaseAlpzaContenidoPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Selects a collection of AlpzaContenido objects pre-filled with all related objects except AlpzaMiembro.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of AlpzaContenido objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptAlpzaMiembro(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		AlpzaContenidoPeer::addSelectColumns($criteria);
		$startcol2 = (AlpzaContenidoPeer::NUM_COLUMNS - AlpzaContenidoPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaNoticiaPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (AlpzaNoticiaPeer::NUM_COLUMNS - AlpzaNoticiaPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaEventoPeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + (AlpzaEventoPeer::NUM_COLUMNS - AlpzaEventoPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaBecaPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + (AlpzaBecaPeer::NUM_COLUMNS - AlpzaBecaPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaPublicacionPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + (AlpzaPublicacionPeer::NUM_COLUMNS - AlpzaPublicacionPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaJuntaPeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + (AlpzaJuntaPeer::NUM_COLUMNS - AlpzaJuntaPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaComitePeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + (AlpzaComitePeer::NUM_COLUMNS - AlpzaComitePeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaCongresoPeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + (AlpzaCongresoPeer::NUM_COLUMNS - AlpzaCongresoPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaInformacionPeer::addSelectColumns($criteria);
		$startcol10 = $startcol9 + (AlpzaInformacionPeer::NUM_COLUMNS - AlpzaInformacionPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_NOTICIA, AlpzaNoticiaPeer::ID_ALPZA_NOTICIA, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_EVENTO, AlpzaEventoPeer::ID_ALPZA_EVENTO, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_BECA, AlpzaBecaPeer::ID_ALPZA_BECA, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_PUBLICACION, AlpzaPublicacionPeer::ID_ALPZA_PUBLICACION, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_JUNTA, AlpzaJuntaPeer::ID_ALPZA_JUNTA, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_COMITE, AlpzaComitePeer::ID_ALPZA_COMITE, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_CONGRESO, AlpzaCongresoPeer::ID_ALPZA_CONGRESO, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_INFORMACION, AlpzaInformacionPeer::ID_ALPZA_INFORMACION, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
			call_user_func($sf_hook, 'BaseAlpzaContenidoPeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = AlpzaContenidoPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = AlpzaContenidoPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = AlpzaContenidoPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				AlpzaContenidoPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

			// Add objects for joined AlpzaNoticia rows

			$key2 = AlpzaNoticiaPeer::getPrimaryKeyHashFromRow($row, $startcol2);
			if ($key2 !== null) {
				$obj2 = AlpzaNoticiaPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = AlpzaNoticiaPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					AlpzaNoticiaPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj2 (AlpzaNoticia)
				$obj2->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaEvento rows

			$key3 = AlpzaEventoPeer::getPrimaryKeyHashFromRow($row, $startcol3);
			if ($key3 !== null) {
				$obj3 = AlpzaEventoPeer::getInstanceFromPool($key3);
				if (!$obj3) {

					$cls = AlpzaEventoPeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					AlpzaEventoPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj3 (AlpzaEvento)
				$obj3->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaBeca rows

			$key4 = AlpzaBecaPeer::getPrimaryKeyHashFromRow($row, $startcol4);
			if ($key4 !== null) {
				$obj4 = AlpzaBecaPeer::getInstanceFromPool($key4);
				if (!$obj4) {

					$cls = AlpzaBecaPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					AlpzaBecaPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj4 (AlpzaBeca)
				$obj4->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaPublicacion rows

			$key5 = AlpzaPublicacionPeer::getPrimaryKeyHashFromRow($row, $startcol5);
			if ($key5 !== null) {
				$obj5 = AlpzaPublicacionPeer::getInstanceFromPool($key5);
				if (!$obj5) {

					$cls = AlpzaPublicacionPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					AlpzaPublicacionPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj5 (AlpzaPublicacion)
				$obj5->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaJunta rows

			$key6 = AlpzaJuntaPeer::getPrimaryKeyHashFromRow($row, $startcol6);
			if ($key6 !== null) {
				$obj6 = AlpzaJuntaPeer::getInstanceFromPool($key6);
				if (!$obj6) {

					$cls = AlpzaJuntaPeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					AlpzaJuntaPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj6 (AlpzaJunta)
				$obj6->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaComite rows

			$key7 = AlpzaComitePeer::getPrimaryKeyHashFromRow($row, $startcol7);
			if ($key7 !== null) {
				$obj7 = AlpzaComitePeer::getInstanceFromPool($key7);
				if (!$obj7) {

					$cls = AlpzaComitePeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					AlpzaComitePeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj7 (AlpzaComite)
				$obj7->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaCongreso rows

			$key8 = AlpzaCongresoPeer::getPrimaryKeyHashFromRow($row, $startcol8);
			if ($key8 !== null) {
				$obj8 = AlpzaCongresoPeer::getInstanceFromPool($key8);
				if (!$obj8) {

					$cls = AlpzaCongresoPeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					AlpzaCongresoPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj8 (AlpzaCongreso)
				$obj8->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaInformacion rows

			$key9 = AlpzaInformacionPeer::getPrimaryKeyHashFromRow($row, $startcol9);
			if ($key9 !== null) {
				$obj9 = AlpzaInformacionPeer::getInstanceFromPool($key9);
				if (!$obj9) {

					$cls = AlpzaInformacionPeer::getOMClass(false);

					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					AlpzaInformacionPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj9 (AlpzaInformacion)
				$obj9->addAlpzaContenido($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of AlpzaContenido objects pre-filled with all related objects except AlpzaNoticia.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of AlpzaContenido objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptAlpzaNoticia(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		AlpzaContenidoPeer::addSelectColumns($criteria);
		$startcol2 = (AlpzaContenidoPeer::NUM_COLUMNS - AlpzaContenidoPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaMiembroPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (AlpzaMiembroPeer::NUM_COLUMNS - AlpzaMiembroPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaEventoPeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + (AlpzaEventoPeer::NUM_COLUMNS - AlpzaEventoPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaBecaPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + (AlpzaBecaPeer::NUM_COLUMNS - AlpzaBecaPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaPublicacionPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + (AlpzaPublicacionPeer::NUM_COLUMNS - AlpzaPublicacionPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaJuntaPeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + (AlpzaJuntaPeer::NUM_COLUMNS - AlpzaJuntaPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaComitePeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + (AlpzaComitePeer::NUM_COLUMNS - AlpzaComitePeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaCongresoPeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + (AlpzaCongresoPeer::NUM_COLUMNS - AlpzaCongresoPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaInformacionPeer::addSelectColumns($criteria);
		$startcol10 = $startcol9 + (AlpzaInformacionPeer::NUM_COLUMNS - AlpzaInformacionPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_MIEMBRO, AlpzaMiembroPeer::ID_ALPZA_MIEMBRO, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_EVENTO, AlpzaEventoPeer::ID_ALPZA_EVENTO, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_BECA, AlpzaBecaPeer::ID_ALPZA_BECA, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_PUBLICACION, AlpzaPublicacionPeer::ID_ALPZA_PUBLICACION, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_JUNTA, AlpzaJuntaPeer::ID_ALPZA_JUNTA, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_COMITE, AlpzaComitePeer::ID_ALPZA_COMITE, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_CONGRESO, AlpzaCongresoPeer::ID_ALPZA_CONGRESO, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_INFORMACION, AlpzaInformacionPeer::ID_ALPZA_INFORMACION, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
			call_user_func($sf_hook, 'BaseAlpzaContenidoPeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = AlpzaContenidoPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = AlpzaContenidoPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = AlpzaContenidoPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				AlpzaContenidoPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

			// Add objects for joined AlpzaMiembro rows

			$key2 = AlpzaMiembroPeer::getPrimaryKeyHashFromRow($row, $startcol2);
			if ($key2 !== null) {
				$obj2 = AlpzaMiembroPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = AlpzaMiembroPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					AlpzaMiembroPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj2 (AlpzaMiembro)
				$obj2->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaEvento rows

			$key3 = AlpzaEventoPeer::getPrimaryKeyHashFromRow($row, $startcol3);
			if ($key3 !== null) {
				$obj3 = AlpzaEventoPeer::getInstanceFromPool($key3);
				if (!$obj3) {

					$cls = AlpzaEventoPeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					AlpzaEventoPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj3 (AlpzaEvento)
				$obj3->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaBeca rows

			$key4 = AlpzaBecaPeer::getPrimaryKeyHashFromRow($row, $startcol4);
			if ($key4 !== null) {
				$obj4 = AlpzaBecaPeer::getInstanceFromPool($key4);
				if (!$obj4) {

					$cls = AlpzaBecaPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					AlpzaBecaPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj4 (AlpzaBeca)
				$obj4->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaPublicacion rows

			$key5 = AlpzaPublicacionPeer::getPrimaryKeyHashFromRow($row, $startcol5);
			if ($key5 !== null) {
				$obj5 = AlpzaPublicacionPeer::getInstanceFromPool($key5);
				if (!$obj5) {

					$cls = AlpzaPublicacionPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					AlpzaPublicacionPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj5 (AlpzaPublicacion)
				$obj5->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaJunta rows

			$key6 = AlpzaJuntaPeer::getPrimaryKeyHashFromRow($row, $startcol6);
			if ($key6 !== null) {
				$obj6 = AlpzaJuntaPeer::getInstanceFromPool($key6);
				if (!$obj6) {

					$cls = AlpzaJuntaPeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					AlpzaJuntaPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj6 (AlpzaJunta)
				$obj6->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaComite rows

			$key7 = AlpzaComitePeer::getPrimaryKeyHashFromRow($row, $startcol7);
			if ($key7 !== null) {
				$obj7 = AlpzaComitePeer::getInstanceFromPool($key7);
				if (!$obj7) {

					$cls = AlpzaComitePeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					AlpzaComitePeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj7 (AlpzaComite)
				$obj7->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaCongreso rows

			$key8 = AlpzaCongresoPeer::getPrimaryKeyHashFromRow($row, $startcol8);
			if ($key8 !== null) {
				$obj8 = AlpzaCongresoPeer::getInstanceFromPool($key8);
				if (!$obj8) {

					$cls = AlpzaCongresoPeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					AlpzaCongresoPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj8 (AlpzaCongreso)
				$obj8->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaInformacion rows

			$key9 = AlpzaInformacionPeer::getPrimaryKeyHashFromRow($row, $startcol9);
			if ($key9 !== null) {
				$obj9 = AlpzaInformacionPeer::getInstanceFromPool($key9);
				if (!$obj9) {

					$cls = AlpzaInformacionPeer::getOMClass(false);

					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					AlpzaInformacionPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj9 (AlpzaInformacion)
				$obj9->addAlpzaContenido($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of AlpzaContenido objects pre-filled with all related objects except AlpzaEvento.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of AlpzaContenido objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptAlpzaEvento(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		AlpzaContenidoPeer::addSelectColumns($criteria);
		$startcol2 = (AlpzaContenidoPeer::NUM_COLUMNS - AlpzaContenidoPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaMiembroPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (AlpzaMiembroPeer::NUM_COLUMNS - AlpzaMiembroPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaNoticiaPeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + (AlpzaNoticiaPeer::NUM_COLUMNS - AlpzaNoticiaPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaBecaPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + (AlpzaBecaPeer::NUM_COLUMNS - AlpzaBecaPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaPublicacionPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + (AlpzaPublicacionPeer::NUM_COLUMNS - AlpzaPublicacionPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaJuntaPeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + (AlpzaJuntaPeer::NUM_COLUMNS - AlpzaJuntaPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaComitePeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + (AlpzaComitePeer::NUM_COLUMNS - AlpzaComitePeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaCongresoPeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + (AlpzaCongresoPeer::NUM_COLUMNS - AlpzaCongresoPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaInformacionPeer::addSelectColumns($criteria);
		$startcol10 = $startcol9 + (AlpzaInformacionPeer::NUM_COLUMNS - AlpzaInformacionPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_MIEMBRO, AlpzaMiembroPeer::ID_ALPZA_MIEMBRO, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_NOTICIA, AlpzaNoticiaPeer::ID_ALPZA_NOTICIA, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_BECA, AlpzaBecaPeer::ID_ALPZA_BECA, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_PUBLICACION, AlpzaPublicacionPeer::ID_ALPZA_PUBLICACION, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_JUNTA, AlpzaJuntaPeer::ID_ALPZA_JUNTA, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_COMITE, AlpzaComitePeer::ID_ALPZA_COMITE, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_CONGRESO, AlpzaCongresoPeer::ID_ALPZA_CONGRESO, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_INFORMACION, AlpzaInformacionPeer::ID_ALPZA_INFORMACION, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
			call_user_func($sf_hook, 'BaseAlpzaContenidoPeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = AlpzaContenidoPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = AlpzaContenidoPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = AlpzaContenidoPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				AlpzaContenidoPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

			// Add objects for joined AlpzaMiembro rows

			$key2 = AlpzaMiembroPeer::getPrimaryKeyHashFromRow($row, $startcol2);
			if ($key2 !== null) {
				$obj2 = AlpzaMiembroPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = AlpzaMiembroPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					AlpzaMiembroPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj2 (AlpzaMiembro)
				$obj2->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaNoticia rows

			$key3 = AlpzaNoticiaPeer::getPrimaryKeyHashFromRow($row, $startcol3);
			if ($key3 !== null) {
				$obj3 = AlpzaNoticiaPeer::getInstanceFromPool($key3);
				if (!$obj3) {

					$cls = AlpzaNoticiaPeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					AlpzaNoticiaPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj3 (AlpzaNoticia)
				$obj3->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaBeca rows

			$key4 = AlpzaBecaPeer::getPrimaryKeyHashFromRow($row, $startcol4);
			if ($key4 !== null) {
				$obj4 = AlpzaBecaPeer::getInstanceFromPool($key4);
				if (!$obj4) {

					$cls = AlpzaBecaPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					AlpzaBecaPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj4 (AlpzaBeca)
				$obj4->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaPublicacion rows

			$key5 = AlpzaPublicacionPeer::getPrimaryKeyHashFromRow($row, $startcol5);
			if ($key5 !== null) {
				$obj5 = AlpzaPublicacionPeer::getInstanceFromPool($key5);
				if (!$obj5) {

					$cls = AlpzaPublicacionPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					AlpzaPublicacionPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj5 (AlpzaPublicacion)
				$obj5->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaJunta rows

			$key6 = AlpzaJuntaPeer::getPrimaryKeyHashFromRow($row, $startcol6);
			if ($key6 !== null) {
				$obj6 = AlpzaJuntaPeer::getInstanceFromPool($key6);
				if (!$obj6) {

					$cls = AlpzaJuntaPeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					AlpzaJuntaPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj6 (AlpzaJunta)
				$obj6->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaComite rows

			$key7 = AlpzaComitePeer::getPrimaryKeyHashFromRow($row, $startcol7);
			if ($key7 !== null) {
				$obj7 = AlpzaComitePeer::getInstanceFromPool($key7);
				if (!$obj7) {

					$cls = AlpzaComitePeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					AlpzaComitePeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj7 (AlpzaComite)
				$obj7->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaCongreso rows

			$key8 = AlpzaCongresoPeer::getPrimaryKeyHashFromRow($row, $startcol8);
			if ($key8 !== null) {
				$obj8 = AlpzaCongresoPeer::getInstanceFromPool($key8);
				if (!$obj8) {

					$cls = AlpzaCongresoPeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					AlpzaCongresoPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj8 (AlpzaCongreso)
				$obj8->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaInformacion rows

			$key9 = AlpzaInformacionPeer::getPrimaryKeyHashFromRow($row, $startcol9);
			if ($key9 !== null) {
				$obj9 = AlpzaInformacionPeer::getInstanceFromPool($key9);
				if (!$obj9) {

					$cls = AlpzaInformacionPeer::getOMClass(false);

					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					AlpzaInformacionPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj9 (AlpzaInformacion)
				$obj9->addAlpzaContenido($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of AlpzaContenido objects pre-filled with all related objects except AlpzaBeca.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of AlpzaContenido objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptAlpzaBeca(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		AlpzaContenidoPeer::addSelectColumns($criteria);
		$startcol2 = (AlpzaContenidoPeer::NUM_COLUMNS - AlpzaContenidoPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaMiembroPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (AlpzaMiembroPeer::NUM_COLUMNS - AlpzaMiembroPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaNoticiaPeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + (AlpzaNoticiaPeer::NUM_COLUMNS - AlpzaNoticiaPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaEventoPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + (AlpzaEventoPeer::NUM_COLUMNS - AlpzaEventoPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaPublicacionPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + (AlpzaPublicacionPeer::NUM_COLUMNS - AlpzaPublicacionPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaJuntaPeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + (AlpzaJuntaPeer::NUM_COLUMNS - AlpzaJuntaPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaComitePeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + (AlpzaComitePeer::NUM_COLUMNS - AlpzaComitePeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaCongresoPeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + (AlpzaCongresoPeer::NUM_COLUMNS - AlpzaCongresoPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaInformacionPeer::addSelectColumns($criteria);
		$startcol10 = $startcol9 + (AlpzaInformacionPeer::NUM_COLUMNS - AlpzaInformacionPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_MIEMBRO, AlpzaMiembroPeer::ID_ALPZA_MIEMBRO, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_NOTICIA, AlpzaNoticiaPeer::ID_ALPZA_NOTICIA, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_EVENTO, AlpzaEventoPeer::ID_ALPZA_EVENTO, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_PUBLICACION, AlpzaPublicacionPeer::ID_ALPZA_PUBLICACION, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_JUNTA, AlpzaJuntaPeer::ID_ALPZA_JUNTA, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_COMITE, AlpzaComitePeer::ID_ALPZA_COMITE, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_CONGRESO, AlpzaCongresoPeer::ID_ALPZA_CONGRESO, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_INFORMACION, AlpzaInformacionPeer::ID_ALPZA_INFORMACION, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
			call_user_func($sf_hook, 'BaseAlpzaContenidoPeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = AlpzaContenidoPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = AlpzaContenidoPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = AlpzaContenidoPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				AlpzaContenidoPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

			// Add objects for joined AlpzaMiembro rows

			$key2 = AlpzaMiembroPeer::getPrimaryKeyHashFromRow($row, $startcol2);
			if ($key2 !== null) {
				$obj2 = AlpzaMiembroPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = AlpzaMiembroPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					AlpzaMiembroPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj2 (AlpzaMiembro)
				$obj2->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaNoticia rows

			$key3 = AlpzaNoticiaPeer::getPrimaryKeyHashFromRow($row, $startcol3);
			if ($key3 !== null) {
				$obj3 = AlpzaNoticiaPeer::getInstanceFromPool($key3);
				if (!$obj3) {

					$cls = AlpzaNoticiaPeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					AlpzaNoticiaPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj3 (AlpzaNoticia)
				$obj3->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaEvento rows

			$key4 = AlpzaEventoPeer::getPrimaryKeyHashFromRow($row, $startcol4);
			if ($key4 !== null) {
				$obj4 = AlpzaEventoPeer::getInstanceFromPool($key4);
				if (!$obj4) {

					$cls = AlpzaEventoPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					AlpzaEventoPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj4 (AlpzaEvento)
				$obj4->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaPublicacion rows

			$key5 = AlpzaPublicacionPeer::getPrimaryKeyHashFromRow($row, $startcol5);
			if ($key5 !== null) {
				$obj5 = AlpzaPublicacionPeer::getInstanceFromPool($key5);
				if (!$obj5) {

					$cls = AlpzaPublicacionPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					AlpzaPublicacionPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj5 (AlpzaPublicacion)
				$obj5->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaJunta rows

			$key6 = AlpzaJuntaPeer::getPrimaryKeyHashFromRow($row, $startcol6);
			if ($key6 !== null) {
				$obj6 = AlpzaJuntaPeer::getInstanceFromPool($key6);
				if (!$obj6) {

					$cls = AlpzaJuntaPeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					AlpzaJuntaPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj6 (AlpzaJunta)
				$obj6->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaComite rows

			$key7 = AlpzaComitePeer::getPrimaryKeyHashFromRow($row, $startcol7);
			if ($key7 !== null) {
				$obj7 = AlpzaComitePeer::getInstanceFromPool($key7);
				if (!$obj7) {

					$cls = AlpzaComitePeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					AlpzaComitePeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj7 (AlpzaComite)
				$obj7->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaCongreso rows

			$key8 = AlpzaCongresoPeer::getPrimaryKeyHashFromRow($row, $startcol8);
			if ($key8 !== null) {
				$obj8 = AlpzaCongresoPeer::getInstanceFromPool($key8);
				if (!$obj8) {

					$cls = AlpzaCongresoPeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					AlpzaCongresoPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj8 (AlpzaCongreso)
				$obj8->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaInformacion rows

			$key9 = AlpzaInformacionPeer::getPrimaryKeyHashFromRow($row, $startcol9);
			if ($key9 !== null) {
				$obj9 = AlpzaInformacionPeer::getInstanceFromPool($key9);
				if (!$obj9) {

					$cls = AlpzaInformacionPeer::getOMClass(false);

					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					AlpzaInformacionPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj9 (AlpzaInformacion)
				$obj9->addAlpzaContenido($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of AlpzaContenido objects pre-filled with all related objects except AlpzaPublicacion.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of AlpzaContenido objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptAlpzaPublicacion(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		AlpzaContenidoPeer::addSelectColumns($criteria);
		$startcol2 = (AlpzaContenidoPeer::NUM_COLUMNS - AlpzaContenidoPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaMiembroPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (AlpzaMiembroPeer::NUM_COLUMNS - AlpzaMiembroPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaNoticiaPeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + (AlpzaNoticiaPeer::NUM_COLUMNS - AlpzaNoticiaPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaEventoPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + (AlpzaEventoPeer::NUM_COLUMNS - AlpzaEventoPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaBecaPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + (AlpzaBecaPeer::NUM_COLUMNS - AlpzaBecaPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaJuntaPeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + (AlpzaJuntaPeer::NUM_COLUMNS - AlpzaJuntaPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaComitePeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + (AlpzaComitePeer::NUM_COLUMNS - AlpzaComitePeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaCongresoPeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + (AlpzaCongresoPeer::NUM_COLUMNS - AlpzaCongresoPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaInformacionPeer::addSelectColumns($criteria);
		$startcol10 = $startcol9 + (AlpzaInformacionPeer::NUM_COLUMNS - AlpzaInformacionPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_MIEMBRO, AlpzaMiembroPeer::ID_ALPZA_MIEMBRO, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_NOTICIA, AlpzaNoticiaPeer::ID_ALPZA_NOTICIA, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_EVENTO, AlpzaEventoPeer::ID_ALPZA_EVENTO, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_BECA, AlpzaBecaPeer::ID_ALPZA_BECA, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_JUNTA, AlpzaJuntaPeer::ID_ALPZA_JUNTA, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_COMITE, AlpzaComitePeer::ID_ALPZA_COMITE, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_CONGRESO, AlpzaCongresoPeer::ID_ALPZA_CONGRESO, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_INFORMACION, AlpzaInformacionPeer::ID_ALPZA_INFORMACION, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
			call_user_func($sf_hook, 'BaseAlpzaContenidoPeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = AlpzaContenidoPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = AlpzaContenidoPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = AlpzaContenidoPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				AlpzaContenidoPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

			// Add objects for joined AlpzaMiembro rows

			$key2 = AlpzaMiembroPeer::getPrimaryKeyHashFromRow($row, $startcol2);
			if ($key2 !== null) {
				$obj2 = AlpzaMiembroPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = AlpzaMiembroPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					AlpzaMiembroPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj2 (AlpzaMiembro)
				$obj2->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaNoticia rows

			$key3 = AlpzaNoticiaPeer::getPrimaryKeyHashFromRow($row, $startcol3);
			if ($key3 !== null) {
				$obj3 = AlpzaNoticiaPeer::getInstanceFromPool($key3);
				if (!$obj3) {

					$cls = AlpzaNoticiaPeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					AlpzaNoticiaPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj3 (AlpzaNoticia)
				$obj3->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaEvento rows

			$key4 = AlpzaEventoPeer::getPrimaryKeyHashFromRow($row, $startcol4);
			if ($key4 !== null) {
				$obj4 = AlpzaEventoPeer::getInstanceFromPool($key4);
				if (!$obj4) {

					$cls = AlpzaEventoPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					AlpzaEventoPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj4 (AlpzaEvento)
				$obj4->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaBeca rows

			$key5 = AlpzaBecaPeer::getPrimaryKeyHashFromRow($row, $startcol5);
			if ($key5 !== null) {
				$obj5 = AlpzaBecaPeer::getInstanceFromPool($key5);
				if (!$obj5) {

					$cls = AlpzaBecaPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					AlpzaBecaPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj5 (AlpzaBeca)
				$obj5->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaJunta rows

			$key6 = AlpzaJuntaPeer::getPrimaryKeyHashFromRow($row, $startcol6);
			if ($key6 !== null) {
				$obj6 = AlpzaJuntaPeer::getInstanceFromPool($key6);
				if (!$obj6) {

					$cls = AlpzaJuntaPeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					AlpzaJuntaPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj6 (AlpzaJunta)
				$obj6->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaComite rows

			$key7 = AlpzaComitePeer::getPrimaryKeyHashFromRow($row, $startcol7);
			if ($key7 !== null) {
				$obj7 = AlpzaComitePeer::getInstanceFromPool($key7);
				if (!$obj7) {

					$cls = AlpzaComitePeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					AlpzaComitePeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj7 (AlpzaComite)
				$obj7->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaCongreso rows

			$key8 = AlpzaCongresoPeer::getPrimaryKeyHashFromRow($row, $startcol8);
			if ($key8 !== null) {
				$obj8 = AlpzaCongresoPeer::getInstanceFromPool($key8);
				if (!$obj8) {

					$cls = AlpzaCongresoPeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					AlpzaCongresoPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj8 (AlpzaCongreso)
				$obj8->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaInformacion rows

			$key9 = AlpzaInformacionPeer::getPrimaryKeyHashFromRow($row, $startcol9);
			if ($key9 !== null) {
				$obj9 = AlpzaInformacionPeer::getInstanceFromPool($key9);
				if (!$obj9) {

					$cls = AlpzaInformacionPeer::getOMClass(false);

					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					AlpzaInformacionPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj9 (AlpzaInformacion)
				$obj9->addAlpzaContenido($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of AlpzaContenido objects pre-filled with all related objects except AlpzaJunta.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of AlpzaContenido objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptAlpzaJunta(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		AlpzaContenidoPeer::addSelectColumns($criteria);
		$startcol2 = (AlpzaContenidoPeer::NUM_COLUMNS - AlpzaContenidoPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaMiembroPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (AlpzaMiembroPeer::NUM_COLUMNS - AlpzaMiembroPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaNoticiaPeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + (AlpzaNoticiaPeer::NUM_COLUMNS - AlpzaNoticiaPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaEventoPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + (AlpzaEventoPeer::NUM_COLUMNS - AlpzaEventoPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaBecaPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + (AlpzaBecaPeer::NUM_COLUMNS - AlpzaBecaPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaPublicacionPeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + (AlpzaPublicacionPeer::NUM_COLUMNS - AlpzaPublicacionPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaComitePeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + (AlpzaComitePeer::NUM_COLUMNS - AlpzaComitePeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaCongresoPeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + (AlpzaCongresoPeer::NUM_COLUMNS - AlpzaCongresoPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaInformacionPeer::addSelectColumns($criteria);
		$startcol10 = $startcol9 + (AlpzaInformacionPeer::NUM_COLUMNS - AlpzaInformacionPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_MIEMBRO, AlpzaMiembroPeer::ID_ALPZA_MIEMBRO, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_NOTICIA, AlpzaNoticiaPeer::ID_ALPZA_NOTICIA, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_EVENTO, AlpzaEventoPeer::ID_ALPZA_EVENTO, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_BECA, AlpzaBecaPeer::ID_ALPZA_BECA, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_PUBLICACION, AlpzaPublicacionPeer::ID_ALPZA_PUBLICACION, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_COMITE, AlpzaComitePeer::ID_ALPZA_COMITE, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_CONGRESO, AlpzaCongresoPeer::ID_ALPZA_CONGRESO, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_INFORMACION, AlpzaInformacionPeer::ID_ALPZA_INFORMACION, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
			call_user_func($sf_hook, 'BaseAlpzaContenidoPeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = AlpzaContenidoPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = AlpzaContenidoPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = AlpzaContenidoPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				AlpzaContenidoPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

			// Add objects for joined AlpzaMiembro rows

			$key2 = AlpzaMiembroPeer::getPrimaryKeyHashFromRow($row, $startcol2);
			if ($key2 !== null) {
				$obj2 = AlpzaMiembroPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = AlpzaMiembroPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					AlpzaMiembroPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj2 (AlpzaMiembro)
				$obj2->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaNoticia rows

			$key3 = AlpzaNoticiaPeer::getPrimaryKeyHashFromRow($row, $startcol3);
			if ($key3 !== null) {
				$obj3 = AlpzaNoticiaPeer::getInstanceFromPool($key3);
				if (!$obj3) {

					$cls = AlpzaNoticiaPeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					AlpzaNoticiaPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj3 (AlpzaNoticia)
				$obj3->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaEvento rows

			$key4 = AlpzaEventoPeer::getPrimaryKeyHashFromRow($row, $startcol4);
			if ($key4 !== null) {
				$obj4 = AlpzaEventoPeer::getInstanceFromPool($key4);
				if (!$obj4) {

					$cls = AlpzaEventoPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					AlpzaEventoPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj4 (AlpzaEvento)
				$obj4->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaBeca rows

			$key5 = AlpzaBecaPeer::getPrimaryKeyHashFromRow($row, $startcol5);
			if ($key5 !== null) {
				$obj5 = AlpzaBecaPeer::getInstanceFromPool($key5);
				if (!$obj5) {

					$cls = AlpzaBecaPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					AlpzaBecaPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj5 (AlpzaBeca)
				$obj5->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaPublicacion rows

			$key6 = AlpzaPublicacionPeer::getPrimaryKeyHashFromRow($row, $startcol6);
			if ($key6 !== null) {
				$obj6 = AlpzaPublicacionPeer::getInstanceFromPool($key6);
				if (!$obj6) {

					$cls = AlpzaPublicacionPeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					AlpzaPublicacionPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj6 (AlpzaPublicacion)
				$obj6->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaComite rows

			$key7 = AlpzaComitePeer::getPrimaryKeyHashFromRow($row, $startcol7);
			if ($key7 !== null) {
				$obj7 = AlpzaComitePeer::getInstanceFromPool($key7);
				if (!$obj7) {

					$cls = AlpzaComitePeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					AlpzaComitePeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj7 (AlpzaComite)
				$obj7->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaCongreso rows

			$key8 = AlpzaCongresoPeer::getPrimaryKeyHashFromRow($row, $startcol8);
			if ($key8 !== null) {
				$obj8 = AlpzaCongresoPeer::getInstanceFromPool($key8);
				if (!$obj8) {

					$cls = AlpzaCongresoPeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					AlpzaCongresoPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj8 (AlpzaCongreso)
				$obj8->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaInformacion rows

			$key9 = AlpzaInformacionPeer::getPrimaryKeyHashFromRow($row, $startcol9);
			if ($key9 !== null) {
				$obj9 = AlpzaInformacionPeer::getInstanceFromPool($key9);
				if (!$obj9) {

					$cls = AlpzaInformacionPeer::getOMClass(false);

					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					AlpzaInformacionPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj9 (AlpzaInformacion)
				$obj9->addAlpzaContenido($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of AlpzaContenido objects pre-filled with all related objects except AlpzaComite.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of AlpzaContenido objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptAlpzaComite(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		AlpzaContenidoPeer::addSelectColumns($criteria);
		$startcol2 = (AlpzaContenidoPeer::NUM_COLUMNS - AlpzaContenidoPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaMiembroPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (AlpzaMiembroPeer::NUM_COLUMNS - AlpzaMiembroPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaNoticiaPeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + (AlpzaNoticiaPeer::NUM_COLUMNS - AlpzaNoticiaPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaEventoPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + (AlpzaEventoPeer::NUM_COLUMNS - AlpzaEventoPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaBecaPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + (AlpzaBecaPeer::NUM_COLUMNS - AlpzaBecaPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaPublicacionPeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + (AlpzaPublicacionPeer::NUM_COLUMNS - AlpzaPublicacionPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaJuntaPeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + (AlpzaJuntaPeer::NUM_COLUMNS - AlpzaJuntaPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaCongresoPeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + (AlpzaCongresoPeer::NUM_COLUMNS - AlpzaCongresoPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaInformacionPeer::addSelectColumns($criteria);
		$startcol10 = $startcol9 + (AlpzaInformacionPeer::NUM_COLUMNS - AlpzaInformacionPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_MIEMBRO, AlpzaMiembroPeer::ID_ALPZA_MIEMBRO, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_NOTICIA, AlpzaNoticiaPeer::ID_ALPZA_NOTICIA, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_EVENTO, AlpzaEventoPeer::ID_ALPZA_EVENTO, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_BECA, AlpzaBecaPeer::ID_ALPZA_BECA, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_PUBLICACION, AlpzaPublicacionPeer::ID_ALPZA_PUBLICACION, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_JUNTA, AlpzaJuntaPeer::ID_ALPZA_JUNTA, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_CONGRESO, AlpzaCongresoPeer::ID_ALPZA_CONGRESO, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_INFORMACION, AlpzaInformacionPeer::ID_ALPZA_INFORMACION, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
			call_user_func($sf_hook, 'BaseAlpzaContenidoPeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = AlpzaContenidoPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = AlpzaContenidoPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = AlpzaContenidoPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				AlpzaContenidoPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

			// Add objects for joined AlpzaMiembro rows

			$key2 = AlpzaMiembroPeer::getPrimaryKeyHashFromRow($row, $startcol2);
			if ($key2 !== null) {
				$obj2 = AlpzaMiembroPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = AlpzaMiembroPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					AlpzaMiembroPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj2 (AlpzaMiembro)
				$obj2->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaNoticia rows

			$key3 = AlpzaNoticiaPeer::getPrimaryKeyHashFromRow($row, $startcol3);
			if ($key3 !== null) {
				$obj3 = AlpzaNoticiaPeer::getInstanceFromPool($key3);
				if (!$obj3) {

					$cls = AlpzaNoticiaPeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					AlpzaNoticiaPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj3 (AlpzaNoticia)
				$obj3->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaEvento rows

			$key4 = AlpzaEventoPeer::getPrimaryKeyHashFromRow($row, $startcol4);
			if ($key4 !== null) {
				$obj4 = AlpzaEventoPeer::getInstanceFromPool($key4);
				if (!$obj4) {

					$cls = AlpzaEventoPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					AlpzaEventoPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj4 (AlpzaEvento)
				$obj4->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaBeca rows

			$key5 = AlpzaBecaPeer::getPrimaryKeyHashFromRow($row, $startcol5);
			if ($key5 !== null) {
				$obj5 = AlpzaBecaPeer::getInstanceFromPool($key5);
				if (!$obj5) {

					$cls = AlpzaBecaPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					AlpzaBecaPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj5 (AlpzaBeca)
				$obj5->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaPublicacion rows

			$key6 = AlpzaPublicacionPeer::getPrimaryKeyHashFromRow($row, $startcol6);
			if ($key6 !== null) {
				$obj6 = AlpzaPublicacionPeer::getInstanceFromPool($key6);
				if (!$obj6) {

					$cls = AlpzaPublicacionPeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					AlpzaPublicacionPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj6 (AlpzaPublicacion)
				$obj6->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaJunta rows

			$key7 = AlpzaJuntaPeer::getPrimaryKeyHashFromRow($row, $startcol7);
			if ($key7 !== null) {
				$obj7 = AlpzaJuntaPeer::getInstanceFromPool($key7);
				if (!$obj7) {

					$cls = AlpzaJuntaPeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					AlpzaJuntaPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj7 (AlpzaJunta)
				$obj7->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaCongreso rows

			$key8 = AlpzaCongresoPeer::getPrimaryKeyHashFromRow($row, $startcol8);
			if ($key8 !== null) {
				$obj8 = AlpzaCongresoPeer::getInstanceFromPool($key8);
				if (!$obj8) {

					$cls = AlpzaCongresoPeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					AlpzaCongresoPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj8 (AlpzaCongreso)
				$obj8->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaInformacion rows

			$key9 = AlpzaInformacionPeer::getPrimaryKeyHashFromRow($row, $startcol9);
			if ($key9 !== null) {
				$obj9 = AlpzaInformacionPeer::getInstanceFromPool($key9);
				if (!$obj9) {

					$cls = AlpzaInformacionPeer::getOMClass(false);

					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					AlpzaInformacionPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj9 (AlpzaInformacion)
				$obj9->addAlpzaContenido($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of AlpzaContenido objects pre-filled with all related objects except AlpzaCongreso.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of AlpzaContenido objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptAlpzaCongreso(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		AlpzaContenidoPeer::addSelectColumns($criteria);
		$startcol2 = (AlpzaContenidoPeer::NUM_COLUMNS - AlpzaContenidoPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaMiembroPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (AlpzaMiembroPeer::NUM_COLUMNS - AlpzaMiembroPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaNoticiaPeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + (AlpzaNoticiaPeer::NUM_COLUMNS - AlpzaNoticiaPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaEventoPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + (AlpzaEventoPeer::NUM_COLUMNS - AlpzaEventoPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaBecaPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + (AlpzaBecaPeer::NUM_COLUMNS - AlpzaBecaPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaPublicacionPeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + (AlpzaPublicacionPeer::NUM_COLUMNS - AlpzaPublicacionPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaJuntaPeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + (AlpzaJuntaPeer::NUM_COLUMNS - AlpzaJuntaPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaComitePeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + (AlpzaComitePeer::NUM_COLUMNS - AlpzaComitePeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaInformacionPeer::addSelectColumns($criteria);
		$startcol10 = $startcol9 + (AlpzaInformacionPeer::NUM_COLUMNS - AlpzaInformacionPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_MIEMBRO, AlpzaMiembroPeer::ID_ALPZA_MIEMBRO, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_NOTICIA, AlpzaNoticiaPeer::ID_ALPZA_NOTICIA, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_EVENTO, AlpzaEventoPeer::ID_ALPZA_EVENTO, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_BECA, AlpzaBecaPeer::ID_ALPZA_BECA, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_PUBLICACION, AlpzaPublicacionPeer::ID_ALPZA_PUBLICACION, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_JUNTA, AlpzaJuntaPeer::ID_ALPZA_JUNTA, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_COMITE, AlpzaComitePeer::ID_ALPZA_COMITE, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_INFORMACION, AlpzaInformacionPeer::ID_ALPZA_INFORMACION, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
			call_user_func($sf_hook, 'BaseAlpzaContenidoPeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = AlpzaContenidoPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = AlpzaContenidoPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = AlpzaContenidoPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				AlpzaContenidoPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

			// Add objects for joined AlpzaMiembro rows

			$key2 = AlpzaMiembroPeer::getPrimaryKeyHashFromRow($row, $startcol2);
			if ($key2 !== null) {
				$obj2 = AlpzaMiembroPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = AlpzaMiembroPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					AlpzaMiembroPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj2 (AlpzaMiembro)
				$obj2->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaNoticia rows

			$key3 = AlpzaNoticiaPeer::getPrimaryKeyHashFromRow($row, $startcol3);
			if ($key3 !== null) {
				$obj3 = AlpzaNoticiaPeer::getInstanceFromPool($key3);
				if (!$obj3) {

					$cls = AlpzaNoticiaPeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					AlpzaNoticiaPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj3 (AlpzaNoticia)
				$obj3->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaEvento rows

			$key4 = AlpzaEventoPeer::getPrimaryKeyHashFromRow($row, $startcol4);
			if ($key4 !== null) {
				$obj4 = AlpzaEventoPeer::getInstanceFromPool($key4);
				if (!$obj4) {

					$cls = AlpzaEventoPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					AlpzaEventoPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj4 (AlpzaEvento)
				$obj4->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaBeca rows

			$key5 = AlpzaBecaPeer::getPrimaryKeyHashFromRow($row, $startcol5);
			if ($key5 !== null) {
				$obj5 = AlpzaBecaPeer::getInstanceFromPool($key5);
				if (!$obj5) {

					$cls = AlpzaBecaPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					AlpzaBecaPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj5 (AlpzaBeca)
				$obj5->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaPublicacion rows

			$key6 = AlpzaPublicacionPeer::getPrimaryKeyHashFromRow($row, $startcol6);
			if ($key6 !== null) {
				$obj6 = AlpzaPublicacionPeer::getInstanceFromPool($key6);
				if (!$obj6) {

					$cls = AlpzaPublicacionPeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					AlpzaPublicacionPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj6 (AlpzaPublicacion)
				$obj6->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaJunta rows

			$key7 = AlpzaJuntaPeer::getPrimaryKeyHashFromRow($row, $startcol7);
			if ($key7 !== null) {
				$obj7 = AlpzaJuntaPeer::getInstanceFromPool($key7);
				if (!$obj7) {

					$cls = AlpzaJuntaPeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					AlpzaJuntaPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj7 (AlpzaJunta)
				$obj7->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaComite rows

			$key8 = AlpzaComitePeer::getPrimaryKeyHashFromRow($row, $startcol8);
			if ($key8 !== null) {
				$obj8 = AlpzaComitePeer::getInstanceFromPool($key8);
				if (!$obj8) {

					$cls = AlpzaComitePeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					AlpzaComitePeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj8 (AlpzaComite)
				$obj8->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaInformacion rows

			$key9 = AlpzaInformacionPeer::getPrimaryKeyHashFromRow($row, $startcol9);
			if ($key9 !== null) {
				$obj9 = AlpzaInformacionPeer::getInstanceFromPool($key9);
				if (!$obj9) {

					$cls = AlpzaInformacionPeer::getOMClass(false);

					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					AlpzaInformacionPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj9 (AlpzaInformacion)
				$obj9->addAlpzaContenido($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of AlpzaContenido objects pre-filled with all related objects except AlpzaInformacion.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of AlpzaContenido objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptAlpzaInformacion(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		AlpzaContenidoPeer::addSelectColumns($criteria);
		$startcol2 = (AlpzaContenidoPeer::NUM_COLUMNS - AlpzaContenidoPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaMiembroPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + (AlpzaMiembroPeer::NUM_COLUMNS - AlpzaMiembroPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaNoticiaPeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + (AlpzaNoticiaPeer::NUM_COLUMNS - AlpzaNoticiaPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaEventoPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + (AlpzaEventoPeer::NUM_COLUMNS - AlpzaEventoPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaBecaPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + (AlpzaBecaPeer::NUM_COLUMNS - AlpzaBecaPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaPublicacionPeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + (AlpzaPublicacionPeer::NUM_COLUMNS - AlpzaPublicacionPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaJuntaPeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + (AlpzaJuntaPeer::NUM_COLUMNS - AlpzaJuntaPeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaComitePeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + (AlpzaComitePeer::NUM_COLUMNS - AlpzaComitePeer::NUM_LAZY_LOAD_COLUMNS);

		AlpzaCongresoPeer::addSelectColumns($criteria);
		$startcol10 = $startcol9 + (AlpzaCongresoPeer::NUM_COLUMNS - AlpzaCongresoPeer::NUM_LAZY_LOAD_COLUMNS);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_MIEMBRO, AlpzaMiembroPeer::ID_ALPZA_MIEMBRO, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_NOTICIA, AlpzaNoticiaPeer::ID_ALPZA_NOTICIA, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_EVENTO, AlpzaEventoPeer::ID_ALPZA_EVENTO, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_BECA, AlpzaBecaPeer::ID_ALPZA_BECA, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_PUBLICACION, AlpzaPublicacionPeer::ID_ALPZA_PUBLICACION, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_JUNTA, AlpzaJuntaPeer::ID_ALPZA_JUNTA, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_COMITE, AlpzaComitePeer::ID_ALPZA_COMITE, $join_behavior);

		$criteria->addJoin(AlpzaContenidoPeer::ID_ALPZA_CONGRESO, AlpzaCongresoPeer::ID_ALPZA_CONGRESO, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
			call_user_func($sf_hook, 'BaseAlpzaContenidoPeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = AlpzaContenidoPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = AlpzaContenidoPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = AlpzaContenidoPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				AlpzaContenidoPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

			// Add objects for joined AlpzaMiembro rows

			$key2 = AlpzaMiembroPeer::getPrimaryKeyHashFromRow($row, $startcol2);
			if ($key2 !== null) {
				$obj2 = AlpzaMiembroPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = AlpzaMiembroPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					AlpzaMiembroPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj2 (AlpzaMiembro)
				$obj2->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaNoticia rows

			$key3 = AlpzaNoticiaPeer::getPrimaryKeyHashFromRow($row, $startcol3);
			if ($key3 !== null) {
				$obj3 = AlpzaNoticiaPeer::getInstanceFromPool($key3);
				if (!$obj3) {

					$cls = AlpzaNoticiaPeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					AlpzaNoticiaPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj3 (AlpzaNoticia)
				$obj3->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaEvento rows

			$key4 = AlpzaEventoPeer::getPrimaryKeyHashFromRow($row, $startcol4);
			if ($key4 !== null) {
				$obj4 = AlpzaEventoPeer::getInstanceFromPool($key4);
				if (!$obj4) {

					$cls = AlpzaEventoPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					AlpzaEventoPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj4 (AlpzaEvento)
				$obj4->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaBeca rows

			$key5 = AlpzaBecaPeer::getPrimaryKeyHashFromRow($row, $startcol5);
			if ($key5 !== null) {
				$obj5 = AlpzaBecaPeer::getInstanceFromPool($key5);
				if (!$obj5) {

					$cls = AlpzaBecaPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					AlpzaBecaPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj5 (AlpzaBeca)
				$obj5->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaPublicacion rows

			$key6 = AlpzaPublicacionPeer::getPrimaryKeyHashFromRow($row, $startcol6);
			if ($key6 !== null) {
				$obj6 = AlpzaPublicacionPeer::getInstanceFromPool($key6);
				if (!$obj6) {

					$cls = AlpzaPublicacionPeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					AlpzaPublicacionPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj6 (AlpzaPublicacion)
				$obj6->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaJunta rows

			$key7 = AlpzaJuntaPeer::getPrimaryKeyHashFromRow($row, $startcol7);
			if ($key7 !== null) {
				$obj7 = AlpzaJuntaPeer::getInstanceFromPool($key7);
				if (!$obj7) {

					$cls = AlpzaJuntaPeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					AlpzaJuntaPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj7 (AlpzaJunta)
				$obj7->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaComite rows

			$key8 = AlpzaComitePeer::getPrimaryKeyHashFromRow($row, $startcol8);
			if ($key8 !== null) {
				$obj8 = AlpzaComitePeer::getInstanceFromPool($key8);
				if (!$obj8) {

					$cls = AlpzaComitePeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					AlpzaComitePeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj8 (AlpzaComite)
				$obj8->addAlpzaContenido($obj1);

			} // if joined row is not null

			// Add objects for joined AlpzaCongreso rows

			$key9 = AlpzaCongresoPeer::getPrimaryKeyHashFromRow($row, $startcol9);
			if ($key9 !== null) {
				$obj9 = AlpzaCongresoPeer::getInstanceFromPool($key9);
				if (!$obj9) {

					$cls = AlpzaCongresoPeer::getOMClass(false);

					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					AlpzaCongresoPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (AlpzaContenido) to the collection in $obj9 (AlpzaCongreso)
				$obj9->addAlpzaContenido($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}

	/**
	 * Returns the TableMap related to this peer.
	 * This method is not needed for general use but a specific application could have a need.
	 * @return     TableMap
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function getTableMap()
	{
		return Propel::getDatabaseMap(self::DATABASE_NAME)->getTable(self::TABLE_NAME);
	}

	/**
	 * Add a TableMap instance to the database for this peer class.
	 */
	public static function buildTableMap()
	{
		$dbMap = Propel::getDatabaseMap(BaseAlpzaContenidoPeer::DATABASE_NAME);
		if (!$dbMap->hasTable(BaseAlpzaContenidoPeer::TABLE_NAME))
		{
			$dbMap->addTableObject(new AlpzaContenidoTableMap());
		}
	}

	/**
	 * The class that the Peer will make instances of.
	 *
	 * If $withPrefix is true, the returned path
	 * uses a dot-path notation which is tranalted into a path
	 * relative to a location on the PHP include_path.
	 * (e.g. path.to.MyClass -> 'path/to/MyClass.php')
	 *
	 * @param      boolean  Whether or not to return the path wit hthe class name
	 * @return     string path.to.ClassName
	 */
	public static function getOMClass($withPrefix = true)
	{
		return $withPrefix ? AlpzaContenidoPeer::CLASS_DEFAULT : AlpzaContenidoPeer::OM_CLASS;
	}

	/**
	 * Method perform an INSERT on the database, given a AlpzaContenido or Criteria object.
	 *
	 * @param      mixed $values Criteria or AlpzaContenido object containing data that is used to create the INSERT statement.
	 * @param      PropelPDO $con the PropelPDO connection to use
	 * @return     mixed The new primary key.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doInsert($values, PropelPDO $con = null)
	{
		// symfony_behaviors behavior
		foreach (sfMixer::getCallables('BaseAlpzaContenidoPeer:doInsert:pre') as $sf_hook)
		{
			if (false !== $sf_hook_retval = call_user_func($sf_hook, 'BaseAlpzaContenidoPeer', $values, $con))
			{
				return $sf_hook_retval;
			}
		}

		if ($con === null) {
			$con = Propel::getConnection(AlpzaContenidoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity
		} else {
			$criteria = $values->buildCriteria(); // build Criteria from AlpzaContenido object
		}

		if ($criteria->containsKey(AlpzaContenidoPeer::ID_ALPZA_CONTENIDO) && $criteria->keyContainsValue(AlpzaContenidoPeer::ID_ALPZA_CONTENIDO) ) {
			throw new PropelException('Cannot insert a value for auto-increment primary key ('.AlpzaContenidoPeer::ID_ALPZA_CONTENIDO.')');
		}


		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		try {
			// use transaction because $criteria could contain info
			// for more than one table (I guess, conceivably)
			$con->beginTransaction();
			$pk = BasePeer::doInsert($criteria, $con);
			$con->commit();
		} catch(PropelException $e) {
			$con->rollBack();
			throw $e;
		}

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables('BaseAlpzaContenidoPeer:doInsert:post') as $sf_hook)
		{
			call_user_func($sf_hook, 'BaseAlpzaContenidoPeer', $values, $con, $pk);
		}

		return $pk;
	}

	/**
	 * Method perform an UPDATE on the database, given a AlpzaContenido or Criteria object.
	 *
	 * @param      mixed $values Criteria or AlpzaContenido object containing data that is used to create the UPDATE statement.
	 * @param      PropelPDO $con The connection to use (specify PropelPDO connection object to exert more control over transactions).
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doUpdate($values, PropelPDO $con = null)
	{
		// symfony_behaviors behavior
		foreach (sfMixer::getCallables('BaseAlpzaContenidoPeer:doUpdate:pre') as $sf_hook)
		{
			if (false !== $sf_hook_retval = call_user_func($sf_hook, 'BaseAlpzaContenidoPeer', $values, $con))
			{
				return $sf_hook_retval;
			}
		}

		if ($con === null) {
			$con = Propel::getConnection(AlpzaContenidoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$selectCriteria = new Criteria(self::DATABASE_NAME);

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity

			$comparison = $criteria->getComparison(AlpzaContenidoPeer::ID_ALPZA_CONTENIDO);
			$selectCriteria->add(AlpzaContenidoPeer::ID_ALPZA_CONTENIDO, $criteria->remove(AlpzaContenidoPeer::ID_ALPZA_CONTENIDO), $comparison);

		} else { // $values is AlpzaContenido object
			$criteria = $values->buildCriteria(); // gets full criteria
			$selectCriteria = $values->buildPkeyCriteria(); // gets criteria w/ primary key(s)
		}

		// set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		$ret = BasePeer::doUpdate($selectCriteria, $criteria, $con);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables('BaseAlpzaContenidoPeer:doUpdate:post') as $sf_hook)
		{
			call_user_func($sf_hook, 'BaseAlpzaContenidoPeer', $values, $con, $ret);
		}

		return $ret;
	}

	/**
	 * Method to DELETE all rows from the alpza_contenido table.
	 *
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 */
	public static function doDeleteAll($con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(AlpzaContenidoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		$affectedRows = 0; // initialize var to track total num of affected rows
		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
			$affectedRows += BasePeer::doDeleteAll(AlpzaContenidoPeer::TABLE_NAME, $con);
			// Because this db requires some delete cascade/set null emulation, we have to
			// clear the cached instance *after* the emulation has happened (since
			// instances get re-added by the select statement contained therein).
			AlpzaContenidoPeer::clearInstancePool();
			AlpzaContenidoPeer::clearRelatedInstancePool();
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Method perform a DELETE on the database, given a AlpzaContenido or Criteria object OR a primary key value.
	 *
	 * @param      mixed $values Criteria or AlpzaContenido object or primary key or array of primary keys
	 *              which is used to create the DELETE statement
	 * @param      PropelPDO $con the connection to use
	 * @return     int 	The number of affected rows (if supported by underlying database driver).  This includes CASCADE-related rows
	 *				if supported by native driver or if emulated using Propel.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doDelete($values, PropelPDO $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(AlpzaContenidoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			// invalidate the cache for all objects of this type, since we have no
			// way of knowing (without running a query) what objects should be invalidated
			// from the cache based on this Criteria.
			AlpzaContenidoPeer::clearInstancePool();
			// rename for clarity
			$criteria = clone $values;
		} elseif ($values instanceof AlpzaContenido) { // it's a model object
			// invalidate the cache for this single object
			AlpzaContenidoPeer::removeInstanceFromPool($values);
			// create criteria based on pk values
			$criteria = $values->buildPkeyCriteria();
		} else { // it's a primary key, or an array of pks
			$criteria = new Criteria(self::DATABASE_NAME);
			$criteria->add(AlpzaContenidoPeer::ID_ALPZA_CONTENIDO, (array) $values, Criteria::IN);
			// invalidate the cache for this object(s)
			foreach ((array) $values as $singleval) {
				AlpzaContenidoPeer::removeInstanceFromPool($singleval);
			}
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		$affectedRows = 0; // initialize var to track total num of affected rows

		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
				
			$affectedRows += BasePeer::doDelete($criteria, $con);
			AlpzaContenidoPeer::clearRelatedInstancePool();
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Validates all modified columns of given AlpzaContenido object.
	 * If parameter $columns is either a single column name or an array of column names
	 * than only those columns are validated.
	 *
	 * NOTICE: This does not apply to primary or foreign keys for now.
	 *
	 * @param      AlpzaContenido $obj The object to validate.
	 * @param      mixed $cols Column name or array of column names.
	 *
	 * @return     mixed TRUE if all columns are valid or the error message of the first invalid column.
	 */
	public static function doValidate(AlpzaContenido $obj, $cols = null)
	{
		$columns = array();

		if ($cols) {
			$dbMap = Propel::getDatabaseMap(AlpzaContenidoPeer::DATABASE_NAME);
			$tableMap = $dbMap->getTable(AlpzaContenidoPeer::TABLE_NAME);

			if (! is_array($cols)) {
				$cols = array($cols);
			}

			foreach ($cols as $colName) {
				if ($tableMap->containsColumn($colName)) {
					$get = 'get' . $tableMap->getColumn($colName)->getPhpName();
					$columns[$colName] = $obj->$get();
				}
			}
		} else {

		}

		return BasePeer::doValidate(AlpzaContenidoPeer::DATABASE_NAME, AlpzaContenidoPeer::TABLE_NAME, $columns);
	}

	/**
	 * Retrieve a single object by pkey.
	 *
	 * @param      int $pk the primary key.
	 * @param      PropelPDO $con the connection to use
	 * @return     AlpzaContenido
	 */
	public static function retrieveByPK($pk, PropelPDO $con = null)
	{

		if (null !== ($obj = AlpzaContenidoPeer::getInstanceFromPool((string) $pk))) {
			return $obj;
		}

		if ($con === null) {
			$con = Propel::getConnection(AlpzaContenidoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria = new Criteria(AlpzaContenidoPeer::DATABASE_NAME);
		$criteria->add(AlpzaContenidoPeer::ID_ALPZA_CONTENIDO, $pk);

		$v = AlpzaContenidoPeer::doSelect($criteria, $con);

		return !empty($v) > 0 ? $v[0] : null;
	}

	/**
	 * Retrieve multiple objects by pkey.
	 *
	 * @param      array $pks List of primary keys
	 * @param      PropelPDO $con the connection to use
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function retrieveByPKs($pks, PropelPDO $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(AlpzaContenidoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$objs = null;
		if (empty($pks)) {
			$objs = array();
		} else {
			$criteria = new Criteria(AlpzaContenidoPeer::DATABASE_NAME);
			$criteria->add(AlpzaContenidoPeer::ID_ALPZA_CONTENIDO, $pks, Criteria::IN);
			$objs = AlpzaContenidoPeer::doSelect($criteria, $con);
		}
		return $objs;
	}

	// symfony behavior

	/**
	 * Returns an array of arrays that contain columns in each unique index.
	 *
	 * @return array
	 */
	static public function getUniqueColumnNames()
	{
		return array();
	}

	// symfony_behaviors behavior

	/**
	 * Returns the name of the hook to call from inside the supplied method.
	 *
	 * @param string $method The calling method
	 *
	 * @return string A hook name for {@link sfMixer}
	 *
	 * @throws LogicException If the method name is not recognized
	 */
	static private function getMixerPreSelectHook($method)
	{
		if (preg_match('/^do(Select|Count)(Join(All(Except)?)?|Stmt)?/', $method, $match))
		{
			return sprintf('BaseAlpzaContenidoPeer:%s:%1$s', 'Count' == $match[1] ? 'doCount' : $match[0]);
		}

		throw new LogicException(sprintf('Unrecognized function "%s"', $method));
	}

} // BaseAlpzaContenidoPeer

// This is the static code needed to register the TableMap for this table with the main Propel class.
//
BaseAlpzaContenidoPeer::buildTableMap();

